syntax = "proto3";

package chatservice;
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "const.proto";
option go_package = "./pb/chatpb";


service ChatService {
    rpc Chat(stream ChatMessage) returns (stream ChatMessage) {}
    rpc NewConversation(NewConversationRequest) returns (NewConversationResponse) {}
    rpc GetConversation(ConversationPostRequest) returns (ConversationPostResponse) {}
    rpc TriggerSendSMS(TriggerSendSMSRequest) returns (TriggerSendSMSResponse) {}
    rpc CloseConversation(CloseConversationRequest) returns (CloseConversationResponse) {}
}

message CloseConversationRequest {
    string orderId = 1;
}

message CloseConversationResponse {

}

message TriggerSendSMSRequest {
    string userId = 1;
}

message TriggerSendSMSResponse {

}

message NewConversationRequest {
    string orderId = 1;
    repeated string memberIds = 2;
    repeated string phoneNumbers = 3;
    string serviceId = 4;
}


message NewConversationResponse {
    string id = 1;
}


message ChatMessage {
    string message = 1; 
}

service ChatHTTP {
    rpc FetchPost(FetchPostRequest) returns (FetchPostResponse) {
        option (google.api.http) = {
            post: "/chat/fetch"
            body: "*"
        };
    }
    rpc FetchOnePost(FetchOnePostRequest) returns (FetchOnePostResponse) {
        option (google.api.http) = {
            post: "/chat/fetch/{id=message}"
            body: "*"
        };
    }
    rpc SendPost(SendPostRequest) returns (SendPostResponse) {
        option (google.api.http) = {
            post: "/chat/send/{id=message}"
            body: "*"
        };
    }
    rpc ConversationPost(ConversationPostRequest) returns (ConversationPostResponse) {
        option (google.api.http) = {
            post: "/chat/conversation"
        };
    }
    rpc NotificationGet(NotificationGetRequest) returns (NotificationGetResponse) {
        option (google.api.http) = {
            get: "/chat/noti"
        };
    }
    rpc NotificationSeenPut(NotificationSeenPutRequest) returns (NotificationSeenPutResponse) {
        option (google.api.http) = {
            put: "/chat/noti"
        };
    }
}

message Chat {
    int64 timestamp = 1;
    string payload = 2;
    string sender = 3;
}

message FetchPostRequest {
    repeated string conversationId = 1;
    string _userId = 2;
}

message FetchPostResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
    }
}

message Pagination {
    string timestamp = 1;
    string min = 2;
}

message FetchOnePostRequest {
    string id = 1;
    int64 timestamp = 2;
    int32 min = 3;
    string _userId = 4;
    
}

message FetchOnePostResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
        repeated Chat chats = 1;
    }
}

message SendPostRequest {
    string _userId = 1;
    string payload = 2;
    string id = 3;
}

message SendPostResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
    }
}

message Conversation {
    string id = 1;
    int64 lastChat = 2;
    repeated string members = 3;
}

message ConversationPostRequest {
    string _userId = 1;
    repeated string conversationIds = 2;
}

message ConversationPostResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
        repeated Conversation conversation = 1;
    }
}

message NotificationGetRequest {
    string _userId = 1;
}

message NotificationGetResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
        bool seen = 1;
    }
}

message NotificationSeenPutRequest {
    string _userId = 1;
}

message NotificationSeenPutResponse {
    int32 code = 1;
    bool success = 2;
    Data data = 3;
    message Data {
    }
}

