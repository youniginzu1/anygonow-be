// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aqaurius6666/cronjob/src/internal/cronjob"
	"github.com/aqaurius6666/cronjob/src/internal/db"
	"github.com/aqaurius6666/cronjob/src/internal/db/cockroach"
	"github.com/aqaurius6666/cronjob/src/internal/model"
	"github.com/aqaurius6666/cronjob/src/services/chatservice"
	"github.com/aqaurius6666/cronjob/src/services/mailservice"
	"github.com/aqaurius6666/cronjob/src/services/payment"
	"github.com/aqaurius6666/cronjob/src/services/redis"
	cockroach2 "github.com/aqaurius6666/go-utils/database/cockroach"
	"github.com/sirupsen/logrus"
)

// Injectors from server.wire.go:

func InitMainServer(ctx context.Context, logger2 *logrus.Logger, opts ServerOptions) (*Server, error) {
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := cockroach.InterfacesProvider()
	cdbRepository := cockroach2.CDBRepository{
		Db:         gormDB,
		Logger:     logger2,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	serverCDBRepo := &cockroach.ServerCDBRepo{
		CDBRepository: cdbRepository,
	}
	stripe_API_KEY := opts.Key
	stripe, err := payment.NewStripe(ctx, logger2, stripe_API_KEY)
	if err != nil {
		return nil, err
	}
	mailserviceAddr := opts.MailserviceAddr
	mailServiceClient, err := mailservice.ConnectClient(ctx, mailserviceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := &mailservice.ServiceGRPC{
		Ctx:    ctx,
		Client: mailServiceClient,
	}
	redis_URI := opts.RedisUri
	redis_USER := opts.RedisUser
	redis_PASS := opts.RedisPass
	client, err := redis.NewRedisClient(ctx, redis_URI, redis_USER, redis_PASS)
	if err != nil {
		return nil, err
	}
	redisImpl := &redis.RedisImpl{
		Logger: logger2,
		Client: client,
	}
	chatserviceAddr := opts.ChatserviceAddr
	chatServiceClient, err := chatservice.ConnectClient(ctx, chatserviceAddr)
	if err != nil {
		return nil, err
	}
	chatserviceServiceGRPC := &chatservice.ServiceGRPC{
		Ctx:    ctx,
		Client: chatServiceClient,
	}
	serverModel := &model.ServerModel{
		Ctx:     ctx,
		Logger:  logger2,
		Repo:    serverCDBRepo,
		Payment: stripe,
		Mail:    serviceGRPC,
		Redis:   redisImpl,
		Chat:    chatserviceServiceGRPC,
	}
	quantity_INTERVAL := opts.QuantityInterval
	unit_INTERVAL := opts.UnitInterval
	payment_DAY := opts.PaymentDay
	paymentCronjob := &cronjob.PaymentCronjob{
		Logger:           logger2,
		Model:            serverModel,
		QuantityInterval: quantity_INTERVAL,
		Unit:             unit_INTERVAL,
		PaymentDay:       payment_DAY,
	}
	chat_QUANTITY_INTERVAL := opts.ChatQuantityInterval
	chatCronjob := &cronjob.ChatCronjob{
		Logger:           logger2,
		Model:            serverModel,
		QuantityInterval: chat_QUANTITY_INTERVAL,
	}
	v := cronjob.SliceProvider(paymentCronjob, chatCronjob)
	server := &Server{
		Jobs:     v,
		MainRepo: serverCDBRepo,
	}
	return server, nil
}

// server.wire.go:

type Server struct {
	Jobs     []cronjob.Cronjob
	MainRepo db.ServerRepo
}

type ServerOptions struct {
	DBDsn                db.DBDsn
	Key                  payment.STRIPE_API_KEY
	QuantityInterval     cronjob.QUANTITY_INTERVAL
	ChatQuantityInterval cronjob.CHAT_QUANTITY_INTERVAL
	UnitInterval         cronjob.UNIT_INTERVAL
	PaymentDay           cronjob.PAYMENT_DAY
	MailserviceAddr      mailservice.MailserviceAddr
	RedisUri             redis.REDIS_URI
	RedisUser            redis.REDIS_USER
	RedisPass            redis.REDIS_PASS
	ChatserviceAddr      chatservice.ChatserviceAddr
}
