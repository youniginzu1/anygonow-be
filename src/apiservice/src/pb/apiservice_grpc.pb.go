// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: apiservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	SubscribePost(ctx context.Context, in *SubscribePostRequest, opts ...grpc.CallOption) (*SubscribePostResponse, error)
	UnsubscribePost(ctx context.Context, in *UnsubscribePostRequest, opts ...grpc.CallOption) (*UnsubscribePostResponse, error)
	// Auth Credential for get credential infomation
	AuthCredential(ctx context.Context, in *AuthCredentialRequest, opts ...grpc.CallOption) (*AuthCredentialResponse, error)
	// Auth Ping to check whether is authorized
	AuthPing(ctx context.Context, in *AuthPingRequest, opts ...grpc.CallOption) (*AuthPingResponse, error)
	// Auth Password to change password
	AuthPasswordPost(ctx context.Context, in *AuthPasswordPostRequest, opts ...grpc.CallOption) (*AuthPasswordPostResponse, error)
	// Auth OTP to send OTP
	AuthOTPPost(ctx context.Context, in *AuthOTPPostRequest, opts ...grpc.CallOption) (*AuthOTPPostResponse, error)
	// Auth Resend OTP to resend OTP
	AuthResendOTP(ctx context.Context, in *AuthResendOTPPostRequest, opts ...grpc.CallOption) (*AuthResendOTPPostResponse, error)
	// Forgot to send OTP for forgotting password
	AuthForgotPost(ctx context.Context, in *AuthForgotPostRequest, opts ...grpc.CallOption) (*AuthForgotPostResponse, error)
	// Auth OTP Forgot to update new password when forgotting
	AuthForgotReset(ctx context.Context, in *AuthForgotResetPostRequest, opts ...grpc.CallOption) (*AuthForgotResetPostResponse, error)
	// Auth OTP change mail and password
	AuthChangeMailAndPassPut(ctx context.Context, in *AuthChangeMailAndPassPostRequest, opts ...grpc.CallOption) (*AuthChangeMailAndPassPostResponse, error)
	// User for create new user
	UserPost(ctx context.Context, in *UserPostRequest, opts ...grpc.CallOption) (*UserPostResponse, error)
	// Business for create new handyman (business)
	BusinessPost(ctx context.Context, in *BusinessPostRequest, opts ...grpc.CallOption) (*BusinessPostResponse, error)
	// User to get user by id
	UserGet(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetResponse, error)
	UserStateGet(ctx context.Context, in *UserStateGetRequest, opts ...grpc.CallOption) (*UserStateGetResponse, error)
	// Business to get business by id
	BusinessGet(ctx context.Context, in *BusinessGetRequest, opts ...grpc.CallOption) (*BusinessGetResponse, error)
	// Business to get business by id
	BusinessPut(ctx context.Context, in *BusinessPutRequest, opts ...grpc.CallOption) (*BusinessPutResponse, error)
	BusinessPaymentMethodGet(ctx context.Context, in *BusinessPaymentMethodGetRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodGetResponse, error)
	OrdersProjectCancel(ctx context.Context, in *CancelProjectPostRequest, opts ...grpc.CallOption) (*CancelProjectPostResponse, error)
	BusinessPaymentMethodSetupPost(ctx context.Context, in *BusinessPaymentMethodSetupPostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodSetupPostResponse, error)
	BusinessPaymentMethodDeletePost(ctx context.Context, in *BusinessPaymentMethodDeletePostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodDeletePostResponse, error)
	BusinessGetInvitationCode(ctx context.Context, in *BusinessInterestGetRequest, opts ...grpc.CallOption) (*BusinessInvitationCodeGetResponse, error)
	BusinessVerifyRefCode(ctx context.Context, in *BusinessVerifyRefCodePutRequest, opts ...grpc.CallOption) (*BusinessVerifyRefCodePutResponse, error)
	// Business to get business by id
	ContactGet(ctx context.Context, in *ContactGetRequest, opts ...grpc.CallOption) (*ContactGetResponse, error)
	// Business to get business by id
	ContactPut(ctx context.Context, in *ContactPutRequest, opts ...grpc.CallOption) (*ContactPutResponse, error)
	UserPut(ctx context.Context, in *UserPutRequest, opts ...grpc.CallOption) (*UserPutResponse, error)
	StatesGet(ctx context.Context, in *StatesGetRequest, opts ...grpc.CallOption) (*StatesGetResponse, error)
	AdminBanUserPost(ctx context.Context, in *AdminBanUserPostRequest, opts ...grpc.CallOption) (*AdminBanUserPostResponse, error)
	AdminGroupGet(ctx context.Context, in *AdminGroupGetRequest, opts ...grpc.CallOption) (*AdminGroupGetResponse, error)
	AdminGroupPost(ctx context.Context, in *AdminGroupPostRequest, opts ...grpc.CallOption) (*AdminGroupPostResponse, error)
	AdminGroupPut(ctx context.Context, in *AdminGroupPutRequest, opts ...grpc.CallOption) (*AdminGroupPutRequest, error)
	StripePaymentMethodGet(ctx context.Context, in *StripePaymentMethodGetRequest, opts ...grpc.CallOption) (*StripePaymentMethodGetResponse, error)
	UploadUrlPost(ctx context.Context, in *UploadUrlPostRequest, opts ...grpc.CallOption) (*UploadUrlPostResponse, error)
	BusinessNearGet(ctx context.Context, in *BusinessNearGetRequest, opts ...grpc.CallOption) (*BusinessNearGetResponse, error)
	BusinessInterestGet(ctx context.Context, in *BusinessInterestGetRequest, opts ...grpc.CallOption) (*BusinessInterestGetResponse, error)
	OrdersGet(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error)
	BusinessServiceGet(ctx context.Context, in *BusinessServiceGetRequest, opts ...grpc.CallOption) (*BusinessServiceGetResponse, error)
	BusinessFreeContactGet(ctx context.Context, in *BusinessFreeContactGetRequest, opts ...grpc.CallOption) (*BusinessFreeContactGetResponse, error)
	AdminBusinessesGet(ctx context.Context, in *AdminBusinessesGetRequest, opts ...grpc.CallOption) (*AdminBusinessesGetResponse, error)
	AdminBusinessBanPost(ctx context.Context, in *AdminBusinessBanPostRequest, opts ...grpc.CallOption) (*AdminBusinessBanPostResponse, error)
	AdminBusinessDeletePost(ctx context.Context, in *AdminBusinessDeletePostRequest, opts ...grpc.CallOption) (*AdminBusinessDeletePostResponse, error)
	AdminUsersDeletePost(ctx context.Context, in *AdminUsersDeletePostRequest, opts ...grpc.CallOption) (*AdminUsersDeletePostResponse, error)
	AdminUsersUnbanPost(ctx context.Context, in *AdminUsersUnbanPostRequest, opts ...grpc.CallOption) (*AdminUsersUnbanPostResponse, error)
	AdminBusinessesUnbanPost(ctx context.Context, in *AdminBusinessesUnbanPostRequest, opts ...grpc.CallOption) (*AdminBusinessesUnbanPostResponse, error)
	AdminUsersGet(ctx context.Context, in *AdminUsersGetRequest, opts ...grpc.CallOption) (*AdminUsersGetResponse, error)
	AdminPostCategories(ctx context.Context, in *AdminCategoryPostRequest, opts ...grpc.CallOption) (*AdminCategoryPostResponese, error)
	AdminPostEditCategories(ctx context.Context, in *AdminCategoryPostEditRequest, opts ...grpc.CallOption) (*AdminCategoryPostEditResponese, error)
	AdminPostDeleteCategories(ctx context.Context, in *AdminCategoryPostDeleteRequest, opts ...grpc.CallOption) (*AdminCategoryPostDeleteResponese, error)
	AdminAdvertiseManagementPost(ctx context.Context, in *AdminAdvertiseManagementPostRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementPostResponse, error)
	AdminAdvertiseMangementGet(ctx context.Context, in *AdminAdvertiseManagementGetRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementGetResponse, error)
	AdminAdvertiseManagementPut(ctx context.Context, in *AdminAdvertiseManagementPutRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementPutResponse, error)
	AdminAdvertiseManagementPostDelete(ctx context.Context, in *AdminAdvertiseManagementDeletePostRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementDeletePostResponse, error)
	CategoriesGet(ctx context.Context, in *CategoriesGetRequest, opts ...grpc.CallOption) (*CategoriesGetResponse, error)
	CategoryGet(ctx context.Context, in *CategoryGetRequest, opts ...grpc.CallOption) (*CategoryGetResponse, error)
	StripeKeyGet(ctx context.Context, in *StripeKeyGetRequest, opts ...grpc.CallOption) (*StripeKeyGetResponse, error)
	StripeSetupPost(ctx context.Context, in *StripeSetupPostRequest, opts ...grpc.CallOption) (*StripeSetupPostResponse, error)
	BusinesssGet(ctx context.Context, in *BusinessesGetRequest, opts ...grpc.CallOption) (*BusinessesGetResponse, error)
	AuthCheckGet(ctx context.Context, in *AuthCheckGetRequest, opts ...grpc.CallOption) (*AuthCheckGetResponse, error)
	BusinessServicesPut(ctx context.Context, in *BusinessServicesPutRequest, opts ...grpc.CallOption) (*BusinessServicesPutResponse, error)
	BusinessFeedbacksGet(ctx context.Context, in *BusinessFeedbacksGetRequest, opts ...grpc.CallOption) (*BusinessFeedbacksGetResponse, error)
	BusinessRatingGet(ctx context.Context, in *BusinessRatingGetRequest, opts ...grpc.CallOption) (*BusinessRatingGetResponse, error)
	OrdersPost(ctx context.Context, in *OrdersPostRequest, opts ...grpc.CallOption) (*OrdersPostResponse, error)
	UpdateOrderConnectPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error)
	UpdateAllOrderConnectPost(ctx context.Context, in *UpdateAllOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateAllOrderStatusPostResponse, error)
	UpdateOrderRejectPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error)
	UpdateOrderCancelPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error)
	UpdateOrderCompletePost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error)
	FeedbacksPost(ctx context.Context, in *FeedbacksPostRequest, opts ...grpc.CallOption) (*FeedbacksPostResponse, error)
	FeedbacksPut(ctx context.Context, in *FeedbackPutRequest, opts ...grpc.CallOption) (*FeedbackPutResponse, error)
	FeedbacksGet(ctx context.Context, in *FeedbackGetRequest, opts ...grpc.CallOption) (*FeedbackGetResponse, error)
	AuthMailPost(ctx context.Context, in *AuthMailPostRequest, opts ...grpc.CallOption) (*AuthMailPostResponse, error)
	OrdersProjectsGet(ctx context.Context, in *UserProjectsGetRequest, opts ...grpc.CallOption) (*UserProjectsGetResponse, error)
	BusinessAlreadyOrderedGet(ctx context.Context, in *BusinessesAlreadyOrderedGetRequest, opts ...grpc.CallOption) (*BusinessesAlreadyOrderedGetResponse, error)
	BusinessPaymentMethodPost(ctx context.Context, in *BusinessPaymentMethodPostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodPostResponse, error)
	BusinessPaymentSummaryGet(ctx context.Context, in *BusinessTransactionsGetRequest, opts ...grpc.CallOption) (*BusinessTransactionsGetResponse, error)
	BusinessPaymentSummaryExportGet(ctx context.Context, in *BusinessTransactionsGetRequest, opts ...grpc.CallOption) (*BusinessTransactionsGetResponse, error)
	BusinessAdvertiseGet(ctx context.Context, in *AdvertiseGetRequest, opts ...grpc.CallOption) (*AdvertiseGetResponse, error)
	BusinessAdvertiseDetailGet(ctx context.Context, in *AdvertiseDetailGetRequest, opts ...grpc.CallOption) (*AdvertiseDetailGetResponse, error)
	BusinessAdvertiseTransactionGet(ctx context.Context, in *BusinessAdvertiseOrderGetRequest, opts ...grpc.CallOption) (*BusinessAdvertiseOrderGetResponse, error)
	BusinessBuyAdvertiseValidatePost(ctx context.Context, in *BusinessValidateBuyAdvertisePostRequest, opts ...grpc.CallOption) (*BusinessValidateBuyAdvertisePostResponse, error)
	BusinessBuyAdvertiseSetupPost(ctx context.Context, in *BusinessBuyAdvertiseSetupPostRequest, opts ...grpc.CallOption) (*BusinessBuyAdvertiseSetupPostResponse, error)
	BusinessBuyAdvertisePost(ctx context.Context, in *BusinessBuyAdvertisePostRequest, opts ...grpc.CallOption) (*BusinessBuyAdvertisePostResponse, error)
	ChatserviceConversationsPost(ctx context.Context, in *ConversationPostRequest, opts ...grpc.CallOption) (*ConversationPostResponse, error)
	StatisticsGet(ctx context.Context, in *StatisticGetRequest, opts ...grpc.CallOption) (*StatisticGetResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) SubscribePost(ctx context.Context, in *SubscribePostRequest, opts ...grpc.CallOption) (*SubscribePostResponse, error) {
	out := new(SubscribePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/SubscribePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UnsubscribePost(ctx context.Context, in *UnsubscribePostRequest, opts ...grpc.CallOption) (*UnsubscribePostResponse, error) {
	out := new(UnsubscribePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UnsubscribePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthCredential(ctx context.Context, in *AuthCredentialRequest, opts ...grpc.CallOption) (*AuthCredentialResponse, error) {
	out := new(AuthCredentialResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthPing(ctx context.Context, in *AuthPingRequest, opts ...grpc.CallOption) (*AuthPingResponse, error) {
	out := new(AuthPingResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthPasswordPost(ctx context.Context, in *AuthPasswordPostRequest, opts ...grpc.CallOption) (*AuthPasswordPostResponse, error) {
	out := new(AuthPasswordPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthPasswordPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthOTPPost(ctx context.Context, in *AuthOTPPostRequest, opts ...grpc.CallOption) (*AuthOTPPostResponse, error) {
	out := new(AuthOTPPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthOTPPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthResendOTP(ctx context.Context, in *AuthResendOTPPostRequest, opts ...grpc.CallOption) (*AuthResendOTPPostResponse, error) {
	out := new(AuthResendOTPPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthResendOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthForgotPost(ctx context.Context, in *AuthForgotPostRequest, opts ...grpc.CallOption) (*AuthForgotPostResponse, error) {
	out := new(AuthForgotPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthForgotPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthForgotReset(ctx context.Context, in *AuthForgotResetPostRequest, opts ...grpc.CallOption) (*AuthForgotResetPostResponse, error) {
	out := new(AuthForgotResetPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthForgotReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthChangeMailAndPassPut(ctx context.Context, in *AuthChangeMailAndPassPostRequest, opts ...grpc.CallOption) (*AuthChangeMailAndPassPostResponse, error) {
	out := new(AuthChangeMailAndPassPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthChangeMailAndPassPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UserPost(ctx context.Context, in *UserPostRequest, opts ...grpc.CallOption) (*UserPostResponse, error) {
	out := new(UserPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPost(ctx context.Context, in *BusinessPostRequest, opts ...grpc.CallOption) (*BusinessPostResponse, error) {
	out := new(BusinessPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UserGet(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetResponse, error) {
	out := new(UserGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UserStateGet(ctx context.Context, in *UserStateGetRequest, opts ...grpc.CallOption) (*UserStateGetResponse, error) {
	out := new(UserStateGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UserStateGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessGet(ctx context.Context, in *BusinessGetRequest, opts ...grpc.CallOption) (*BusinessGetResponse, error) {
	out := new(BusinessGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPut(ctx context.Context, in *BusinessPutRequest, opts ...grpc.CallOption) (*BusinessPutResponse, error) {
	out := new(BusinessPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentMethodGet(ctx context.Context, in *BusinessPaymentMethodGetRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodGetResponse, error) {
	out := new(BusinessPaymentMethodGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentMethodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) OrdersProjectCancel(ctx context.Context, in *CancelProjectPostRequest, opts ...grpc.CallOption) (*CancelProjectPostResponse, error) {
	out := new(CancelProjectPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/OrdersProjectCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentMethodSetupPost(ctx context.Context, in *BusinessPaymentMethodSetupPostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodSetupPostResponse, error) {
	out := new(BusinessPaymentMethodSetupPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentMethodSetupPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentMethodDeletePost(ctx context.Context, in *BusinessPaymentMethodDeletePostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodDeletePostResponse, error) {
	out := new(BusinessPaymentMethodDeletePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentMethodDeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessGetInvitationCode(ctx context.Context, in *BusinessInterestGetRequest, opts ...grpc.CallOption) (*BusinessInvitationCodeGetResponse, error) {
	out := new(BusinessInvitationCodeGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessGetInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessVerifyRefCode(ctx context.Context, in *BusinessVerifyRefCodePutRequest, opts ...grpc.CallOption) (*BusinessVerifyRefCodePutResponse, error) {
	out := new(BusinessVerifyRefCodePutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessVerifyRefCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ContactGet(ctx context.Context, in *ContactGetRequest, opts ...grpc.CallOption) (*ContactGetResponse, error) {
	out := new(ContactGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/ContactGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ContactPut(ctx context.Context, in *ContactPutRequest, opts ...grpc.CallOption) (*ContactPutResponse, error) {
	out := new(ContactPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/ContactPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UserPut(ctx context.Context, in *UserPutRequest, opts ...grpc.CallOption) (*UserPutResponse, error) {
	out := new(UserPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UserPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StatesGet(ctx context.Context, in *StatesGetRequest, opts ...grpc.CallOption) (*StatesGetResponse, error) {
	out := new(StatesGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/StatesGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminBanUserPost(ctx context.Context, in *AdminBanUserPostRequest, opts ...grpc.CallOption) (*AdminBanUserPostResponse, error) {
	out := new(AdminBanUserPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminBanUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminGroupGet(ctx context.Context, in *AdminGroupGetRequest, opts ...grpc.CallOption) (*AdminGroupGetResponse, error) {
	out := new(AdminGroupGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminGroupGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminGroupPost(ctx context.Context, in *AdminGroupPostRequest, opts ...grpc.CallOption) (*AdminGroupPostResponse, error) {
	out := new(AdminGroupPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminGroupPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminGroupPut(ctx context.Context, in *AdminGroupPutRequest, opts ...grpc.CallOption) (*AdminGroupPutRequest, error) {
	out := new(AdminGroupPutRequest)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminGroupPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StripePaymentMethodGet(ctx context.Context, in *StripePaymentMethodGetRequest, opts ...grpc.CallOption) (*StripePaymentMethodGetResponse, error) {
	out := new(StripePaymentMethodGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/StripePaymentMethodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UploadUrlPost(ctx context.Context, in *UploadUrlPostRequest, opts ...grpc.CallOption) (*UploadUrlPostResponse, error) {
	out := new(UploadUrlPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UploadUrlPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessNearGet(ctx context.Context, in *BusinessNearGetRequest, opts ...grpc.CallOption) (*BusinessNearGetResponse, error) {
	out := new(BusinessNearGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessNearGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessInterestGet(ctx context.Context, in *BusinessInterestGetRequest, opts ...grpc.CallOption) (*BusinessInterestGetResponse, error) {
	out := new(BusinessInterestGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessInterestGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) OrdersGet(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error) {
	out := new(OrdersGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/OrdersGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessServiceGet(ctx context.Context, in *BusinessServiceGetRequest, opts ...grpc.CallOption) (*BusinessServiceGetResponse, error) {
	out := new(BusinessServiceGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessServiceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessFreeContactGet(ctx context.Context, in *BusinessFreeContactGetRequest, opts ...grpc.CallOption) (*BusinessFreeContactGetResponse, error) {
	out := new(BusinessFreeContactGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessFreeContactGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminBusinessesGet(ctx context.Context, in *AdminBusinessesGetRequest, opts ...grpc.CallOption) (*AdminBusinessesGetResponse, error) {
	out := new(AdminBusinessesGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminBusinessesGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminBusinessBanPost(ctx context.Context, in *AdminBusinessBanPostRequest, opts ...grpc.CallOption) (*AdminBusinessBanPostResponse, error) {
	out := new(AdminBusinessBanPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminBusinessBanPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminBusinessDeletePost(ctx context.Context, in *AdminBusinessDeletePostRequest, opts ...grpc.CallOption) (*AdminBusinessDeletePostResponse, error) {
	out := new(AdminBusinessDeletePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminBusinessDeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminUsersDeletePost(ctx context.Context, in *AdminUsersDeletePostRequest, opts ...grpc.CallOption) (*AdminUsersDeletePostResponse, error) {
	out := new(AdminUsersDeletePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminUsersDeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminUsersUnbanPost(ctx context.Context, in *AdminUsersUnbanPostRequest, opts ...grpc.CallOption) (*AdminUsersUnbanPostResponse, error) {
	out := new(AdminUsersUnbanPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminUsersUnbanPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminBusinessesUnbanPost(ctx context.Context, in *AdminBusinessesUnbanPostRequest, opts ...grpc.CallOption) (*AdminBusinessesUnbanPostResponse, error) {
	out := new(AdminBusinessesUnbanPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminBusinessesUnbanPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminUsersGet(ctx context.Context, in *AdminUsersGetRequest, opts ...grpc.CallOption) (*AdminUsersGetResponse, error) {
	out := new(AdminUsersGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminUsersGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminPostCategories(ctx context.Context, in *AdminCategoryPostRequest, opts ...grpc.CallOption) (*AdminCategoryPostResponese, error) {
	out := new(AdminCategoryPostResponese)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminPostCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminPostEditCategories(ctx context.Context, in *AdminCategoryPostEditRequest, opts ...grpc.CallOption) (*AdminCategoryPostEditResponese, error) {
	out := new(AdminCategoryPostEditResponese)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminPostEditCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminPostDeleteCategories(ctx context.Context, in *AdminCategoryPostDeleteRequest, opts ...grpc.CallOption) (*AdminCategoryPostDeleteResponese, error) {
	out := new(AdminCategoryPostDeleteResponese)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminPostDeleteCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminAdvertiseManagementPost(ctx context.Context, in *AdminAdvertiseManagementPostRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementPostResponse, error) {
	out := new(AdminAdvertiseManagementPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminAdvertiseManagementPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminAdvertiseMangementGet(ctx context.Context, in *AdminAdvertiseManagementGetRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementGetResponse, error) {
	out := new(AdminAdvertiseManagementGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminAdvertiseMangementGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminAdvertiseManagementPut(ctx context.Context, in *AdminAdvertiseManagementPutRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementPutResponse, error) {
	out := new(AdminAdvertiseManagementPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminAdvertiseManagementPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AdminAdvertiseManagementPostDelete(ctx context.Context, in *AdminAdvertiseManagementDeletePostRequest, opts ...grpc.CallOption) (*AdminAdvertiseManagementDeletePostResponse, error) {
	out := new(AdminAdvertiseManagementDeletePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AdminAdvertiseManagementPostDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CategoriesGet(ctx context.Context, in *CategoriesGetRequest, opts ...grpc.CallOption) (*CategoriesGetResponse, error) {
	out := new(CategoriesGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/CategoriesGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CategoryGet(ctx context.Context, in *CategoryGetRequest, opts ...grpc.CallOption) (*CategoryGetResponse, error) {
	out := new(CategoryGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/CategoryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StripeKeyGet(ctx context.Context, in *StripeKeyGetRequest, opts ...grpc.CallOption) (*StripeKeyGetResponse, error) {
	out := new(StripeKeyGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/StripeKeyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StripeSetupPost(ctx context.Context, in *StripeSetupPostRequest, opts ...grpc.CallOption) (*StripeSetupPostResponse, error) {
	out := new(StripeSetupPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/StripeSetupPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinesssGet(ctx context.Context, in *BusinessesGetRequest, opts ...grpc.CallOption) (*BusinessesGetResponse, error) {
	out := new(BusinessesGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinesssGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthCheckGet(ctx context.Context, in *AuthCheckGetRequest, opts ...grpc.CallOption) (*AuthCheckGetResponse, error) {
	out := new(AuthCheckGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthCheckGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessServicesPut(ctx context.Context, in *BusinessServicesPutRequest, opts ...grpc.CallOption) (*BusinessServicesPutResponse, error) {
	out := new(BusinessServicesPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessServicesPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessFeedbacksGet(ctx context.Context, in *BusinessFeedbacksGetRequest, opts ...grpc.CallOption) (*BusinessFeedbacksGetResponse, error) {
	out := new(BusinessFeedbacksGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessFeedbacksGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessRatingGet(ctx context.Context, in *BusinessRatingGetRequest, opts ...grpc.CallOption) (*BusinessRatingGetResponse, error) {
	out := new(BusinessRatingGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessRatingGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) OrdersPost(ctx context.Context, in *OrdersPostRequest, opts ...grpc.CallOption) (*OrdersPostResponse, error) {
	out := new(OrdersPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/OrdersPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateOrderConnectPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error) {
	out := new(UpdateOrderStatusPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UpdateOrderConnectPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateAllOrderConnectPost(ctx context.Context, in *UpdateAllOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateAllOrderStatusPostResponse, error) {
	out := new(UpdateAllOrderStatusPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UpdateAllOrderConnectPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateOrderRejectPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error) {
	out := new(UpdateOrderStatusPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UpdateOrderRejectPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateOrderCancelPost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error) {
	out := new(UpdateOrderStatusPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UpdateOrderCancelPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateOrderCompletePost(ctx context.Context, in *UpdateOrderStatusPostRequest, opts ...grpc.CallOption) (*UpdateOrderStatusPostResponse, error) {
	out := new(UpdateOrderStatusPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/UpdateOrderCompletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) FeedbacksPost(ctx context.Context, in *FeedbacksPostRequest, opts ...grpc.CallOption) (*FeedbacksPostResponse, error) {
	out := new(FeedbacksPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/FeedbacksPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) FeedbacksPut(ctx context.Context, in *FeedbackPutRequest, opts ...grpc.CallOption) (*FeedbackPutResponse, error) {
	out := new(FeedbackPutResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/FeedbacksPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) FeedbacksGet(ctx context.Context, in *FeedbackGetRequest, opts ...grpc.CallOption) (*FeedbackGetResponse, error) {
	out := new(FeedbackGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/FeedbacksGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AuthMailPost(ctx context.Context, in *AuthMailPostRequest, opts ...grpc.CallOption) (*AuthMailPostResponse, error) {
	out := new(AuthMailPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/AuthMailPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) OrdersProjectsGet(ctx context.Context, in *UserProjectsGetRequest, opts ...grpc.CallOption) (*UserProjectsGetResponse, error) {
	out := new(UserProjectsGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/OrdersProjectsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessAlreadyOrderedGet(ctx context.Context, in *BusinessesAlreadyOrderedGetRequest, opts ...grpc.CallOption) (*BusinessesAlreadyOrderedGetResponse, error) {
	out := new(BusinessesAlreadyOrderedGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessAlreadyOrderedGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentMethodPost(ctx context.Context, in *BusinessPaymentMethodPostRequest, opts ...grpc.CallOption) (*BusinessPaymentMethodPostResponse, error) {
	out := new(BusinessPaymentMethodPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentMethodPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentSummaryGet(ctx context.Context, in *BusinessTransactionsGetRequest, opts ...grpc.CallOption) (*BusinessTransactionsGetResponse, error) {
	out := new(BusinessTransactionsGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentSummaryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessPaymentSummaryExportGet(ctx context.Context, in *BusinessTransactionsGetRequest, opts ...grpc.CallOption) (*BusinessTransactionsGetResponse, error) {
	out := new(BusinessTransactionsGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessPaymentSummaryExportGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessAdvertiseGet(ctx context.Context, in *AdvertiseGetRequest, opts ...grpc.CallOption) (*AdvertiseGetResponse, error) {
	out := new(AdvertiseGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessAdvertiseGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessAdvertiseDetailGet(ctx context.Context, in *AdvertiseDetailGetRequest, opts ...grpc.CallOption) (*AdvertiseDetailGetResponse, error) {
	out := new(AdvertiseDetailGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessAdvertiseDetailGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessAdvertiseTransactionGet(ctx context.Context, in *BusinessAdvertiseOrderGetRequest, opts ...grpc.CallOption) (*BusinessAdvertiseOrderGetResponse, error) {
	out := new(BusinessAdvertiseOrderGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessAdvertiseTransactionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessBuyAdvertiseValidatePost(ctx context.Context, in *BusinessValidateBuyAdvertisePostRequest, opts ...grpc.CallOption) (*BusinessValidateBuyAdvertisePostResponse, error) {
	out := new(BusinessValidateBuyAdvertisePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessBuyAdvertiseValidatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessBuyAdvertiseSetupPost(ctx context.Context, in *BusinessBuyAdvertiseSetupPostRequest, opts ...grpc.CallOption) (*BusinessBuyAdvertiseSetupPostResponse, error) {
	out := new(BusinessBuyAdvertiseSetupPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessBuyAdvertiseSetupPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BusinessBuyAdvertisePost(ctx context.Context, in *BusinessBuyAdvertisePostRequest, opts ...grpc.CallOption) (*BusinessBuyAdvertisePostResponse, error) {
	out := new(BusinessBuyAdvertisePostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/BusinessBuyAdvertisePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChatserviceConversationsPost(ctx context.Context, in *ConversationPostRequest, opts ...grpc.CallOption) (*ConversationPostResponse, error) {
	out := new(ConversationPostResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/ChatserviceConversationsPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StatisticsGet(ctx context.Context, in *StatisticGetRequest, opts ...grpc.CallOption) (*StatisticGetResponse, error) {
	out := new(StatisticGetResponse)
	err := c.cc.Invoke(ctx, "/apiservice.ApiService/StatisticsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	SubscribePost(context.Context, *SubscribePostRequest) (*SubscribePostResponse, error)
	UnsubscribePost(context.Context, *UnsubscribePostRequest) (*UnsubscribePostResponse, error)
	// Auth Credential for get credential infomation
	AuthCredential(context.Context, *AuthCredentialRequest) (*AuthCredentialResponse, error)
	// Auth Ping to check whether is authorized
	AuthPing(context.Context, *AuthPingRequest) (*AuthPingResponse, error)
	// Auth Password to change password
	AuthPasswordPost(context.Context, *AuthPasswordPostRequest) (*AuthPasswordPostResponse, error)
	// Auth OTP to send OTP
	AuthOTPPost(context.Context, *AuthOTPPostRequest) (*AuthOTPPostResponse, error)
	// Auth Resend OTP to resend OTP
	AuthResendOTP(context.Context, *AuthResendOTPPostRequest) (*AuthResendOTPPostResponse, error)
	// Forgot to send OTP for forgotting password
	AuthForgotPost(context.Context, *AuthForgotPostRequest) (*AuthForgotPostResponse, error)
	// Auth OTP Forgot to update new password when forgotting
	AuthForgotReset(context.Context, *AuthForgotResetPostRequest) (*AuthForgotResetPostResponse, error)
	// Auth OTP change mail and password
	AuthChangeMailAndPassPut(context.Context, *AuthChangeMailAndPassPostRequest) (*AuthChangeMailAndPassPostResponse, error)
	// User for create new user
	UserPost(context.Context, *UserPostRequest) (*UserPostResponse, error)
	// Business for create new handyman (business)
	BusinessPost(context.Context, *BusinessPostRequest) (*BusinessPostResponse, error)
	// User to get user by id
	UserGet(context.Context, *UserGetRequest) (*UserGetResponse, error)
	UserStateGet(context.Context, *UserStateGetRequest) (*UserStateGetResponse, error)
	// Business to get business by id
	BusinessGet(context.Context, *BusinessGetRequest) (*BusinessGetResponse, error)
	// Business to get business by id
	BusinessPut(context.Context, *BusinessPutRequest) (*BusinessPutResponse, error)
	BusinessPaymentMethodGet(context.Context, *BusinessPaymentMethodGetRequest) (*BusinessPaymentMethodGetResponse, error)
	OrdersProjectCancel(context.Context, *CancelProjectPostRequest) (*CancelProjectPostResponse, error)
	BusinessPaymentMethodSetupPost(context.Context, *BusinessPaymentMethodSetupPostRequest) (*BusinessPaymentMethodSetupPostResponse, error)
	BusinessPaymentMethodDeletePost(context.Context, *BusinessPaymentMethodDeletePostRequest) (*BusinessPaymentMethodDeletePostResponse, error)
	BusinessGetInvitationCode(context.Context, *BusinessInterestGetRequest) (*BusinessInvitationCodeGetResponse, error)
	BusinessVerifyRefCode(context.Context, *BusinessVerifyRefCodePutRequest) (*BusinessVerifyRefCodePutResponse, error)
	// Business to get business by id
	ContactGet(context.Context, *ContactGetRequest) (*ContactGetResponse, error)
	// Business to get business by id
	ContactPut(context.Context, *ContactPutRequest) (*ContactPutResponse, error)
	UserPut(context.Context, *UserPutRequest) (*UserPutResponse, error)
	StatesGet(context.Context, *StatesGetRequest) (*StatesGetResponse, error)
	AdminBanUserPost(context.Context, *AdminBanUserPostRequest) (*AdminBanUserPostResponse, error)
	AdminGroupGet(context.Context, *AdminGroupGetRequest) (*AdminGroupGetResponse, error)
	AdminGroupPost(context.Context, *AdminGroupPostRequest) (*AdminGroupPostResponse, error)
	AdminGroupPut(context.Context, *AdminGroupPutRequest) (*AdminGroupPutRequest, error)
	StripePaymentMethodGet(context.Context, *StripePaymentMethodGetRequest) (*StripePaymentMethodGetResponse, error)
	UploadUrlPost(context.Context, *UploadUrlPostRequest) (*UploadUrlPostResponse, error)
	BusinessNearGet(context.Context, *BusinessNearGetRequest) (*BusinessNearGetResponse, error)
	BusinessInterestGet(context.Context, *BusinessInterestGetRequest) (*BusinessInterestGetResponse, error)
	OrdersGet(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error)
	BusinessServiceGet(context.Context, *BusinessServiceGetRequest) (*BusinessServiceGetResponse, error)
	BusinessFreeContactGet(context.Context, *BusinessFreeContactGetRequest) (*BusinessFreeContactGetResponse, error)
	AdminBusinessesGet(context.Context, *AdminBusinessesGetRequest) (*AdminBusinessesGetResponse, error)
	AdminBusinessBanPost(context.Context, *AdminBusinessBanPostRequest) (*AdminBusinessBanPostResponse, error)
	AdminBusinessDeletePost(context.Context, *AdminBusinessDeletePostRequest) (*AdminBusinessDeletePostResponse, error)
	AdminUsersDeletePost(context.Context, *AdminUsersDeletePostRequest) (*AdminUsersDeletePostResponse, error)
	AdminUsersUnbanPost(context.Context, *AdminUsersUnbanPostRequest) (*AdminUsersUnbanPostResponse, error)
	AdminBusinessesUnbanPost(context.Context, *AdminBusinessesUnbanPostRequest) (*AdminBusinessesUnbanPostResponse, error)
	AdminUsersGet(context.Context, *AdminUsersGetRequest) (*AdminUsersGetResponse, error)
	AdminPostCategories(context.Context, *AdminCategoryPostRequest) (*AdminCategoryPostResponese, error)
	AdminPostEditCategories(context.Context, *AdminCategoryPostEditRequest) (*AdminCategoryPostEditResponese, error)
	AdminPostDeleteCategories(context.Context, *AdminCategoryPostDeleteRequest) (*AdminCategoryPostDeleteResponese, error)
	AdminAdvertiseManagementPost(context.Context, *AdminAdvertiseManagementPostRequest) (*AdminAdvertiseManagementPostResponse, error)
	AdminAdvertiseMangementGet(context.Context, *AdminAdvertiseManagementGetRequest) (*AdminAdvertiseManagementGetResponse, error)
	AdminAdvertiseManagementPut(context.Context, *AdminAdvertiseManagementPutRequest) (*AdminAdvertiseManagementPutResponse, error)
	AdminAdvertiseManagementPostDelete(context.Context, *AdminAdvertiseManagementDeletePostRequest) (*AdminAdvertiseManagementDeletePostResponse, error)
	CategoriesGet(context.Context, *CategoriesGetRequest) (*CategoriesGetResponse, error)
	CategoryGet(context.Context, *CategoryGetRequest) (*CategoryGetResponse, error)
	StripeKeyGet(context.Context, *StripeKeyGetRequest) (*StripeKeyGetResponse, error)
	StripeSetupPost(context.Context, *StripeSetupPostRequest) (*StripeSetupPostResponse, error)
	BusinesssGet(context.Context, *BusinessesGetRequest) (*BusinessesGetResponse, error)
	AuthCheckGet(context.Context, *AuthCheckGetRequest) (*AuthCheckGetResponse, error)
	BusinessServicesPut(context.Context, *BusinessServicesPutRequest) (*BusinessServicesPutResponse, error)
	BusinessFeedbacksGet(context.Context, *BusinessFeedbacksGetRequest) (*BusinessFeedbacksGetResponse, error)
	BusinessRatingGet(context.Context, *BusinessRatingGetRequest) (*BusinessRatingGetResponse, error)
	OrdersPost(context.Context, *OrdersPostRequest) (*OrdersPostResponse, error)
	UpdateOrderConnectPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error)
	UpdateAllOrderConnectPost(context.Context, *UpdateAllOrderStatusPostRequest) (*UpdateAllOrderStatusPostResponse, error)
	UpdateOrderRejectPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error)
	UpdateOrderCancelPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error)
	UpdateOrderCompletePost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error)
	FeedbacksPost(context.Context, *FeedbacksPostRequest) (*FeedbacksPostResponse, error)
	FeedbacksPut(context.Context, *FeedbackPutRequest) (*FeedbackPutResponse, error)
	FeedbacksGet(context.Context, *FeedbackGetRequest) (*FeedbackGetResponse, error)
	AuthMailPost(context.Context, *AuthMailPostRequest) (*AuthMailPostResponse, error)
	OrdersProjectsGet(context.Context, *UserProjectsGetRequest) (*UserProjectsGetResponse, error)
	BusinessAlreadyOrderedGet(context.Context, *BusinessesAlreadyOrderedGetRequest) (*BusinessesAlreadyOrderedGetResponse, error)
	BusinessPaymentMethodPost(context.Context, *BusinessPaymentMethodPostRequest) (*BusinessPaymentMethodPostResponse, error)
	BusinessPaymentSummaryGet(context.Context, *BusinessTransactionsGetRequest) (*BusinessTransactionsGetResponse, error)
	BusinessPaymentSummaryExportGet(context.Context, *BusinessTransactionsGetRequest) (*BusinessTransactionsGetResponse, error)
	BusinessAdvertiseGet(context.Context, *AdvertiseGetRequest) (*AdvertiseGetResponse, error)
	BusinessAdvertiseDetailGet(context.Context, *AdvertiseDetailGetRequest) (*AdvertiseDetailGetResponse, error)
	BusinessAdvertiseTransactionGet(context.Context, *BusinessAdvertiseOrderGetRequest) (*BusinessAdvertiseOrderGetResponse, error)
	BusinessBuyAdvertiseValidatePost(context.Context, *BusinessValidateBuyAdvertisePostRequest) (*BusinessValidateBuyAdvertisePostResponse, error)
	BusinessBuyAdvertiseSetupPost(context.Context, *BusinessBuyAdvertiseSetupPostRequest) (*BusinessBuyAdvertiseSetupPostResponse, error)
	BusinessBuyAdvertisePost(context.Context, *BusinessBuyAdvertisePostRequest) (*BusinessBuyAdvertisePostResponse, error)
	ChatserviceConversationsPost(context.Context, *ConversationPostRequest) (*ConversationPostResponse, error)
	StatisticsGet(context.Context, *StatisticGetRequest) (*StatisticGetResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) SubscribePost(context.Context, *SubscribePostRequest) (*SubscribePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribePost not implemented")
}
func (UnimplementedApiServiceServer) UnsubscribePost(context.Context, *UnsubscribePostRequest) (*UnsubscribePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribePost not implemented")
}
func (UnimplementedApiServiceServer) AuthCredential(context.Context, *AuthCredentialRequest) (*AuthCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCredential not implemented")
}
func (UnimplementedApiServiceServer) AuthPing(context.Context, *AuthPingRequest) (*AuthPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPing not implemented")
}
func (UnimplementedApiServiceServer) AuthPasswordPost(context.Context, *AuthPasswordPostRequest) (*AuthPasswordPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPasswordPost not implemented")
}
func (UnimplementedApiServiceServer) AuthOTPPost(context.Context, *AuthOTPPostRequest) (*AuthOTPPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthOTPPost not implemented")
}
func (UnimplementedApiServiceServer) AuthResendOTP(context.Context, *AuthResendOTPPostRequest) (*AuthResendOTPPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResendOTP not implemented")
}
func (UnimplementedApiServiceServer) AuthForgotPost(context.Context, *AuthForgotPostRequest) (*AuthForgotPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthForgotPost not implemented")
}
func (UnimplementedApiServiceServer) AuthForgotReset(context.Context, *AuthForgotResetPostRequest) (*AuthForgotResetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthForgotReset not implemented")
}
func (UnimplementedApiServiceServer) AuthChangeMailAndPassPut(context.Context, *AuthChangeMailAndPassPostRequest) (*AuthChangeMailAndPassPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthChangeMailAndPassPut not implemented")
}
func (UnimplementedApiServiceServer) UserPost(context.Context, *UserPostRequest) (*UserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPost not implemented")
}
func (UnimplementedApiServiceServer) BusinessPost(context.Context, *BusinessPostRequest) (*BusinessPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPost not implemented")
}
func (UnimplementedApiServiceServer) UserGet(context.Context, *UserGetRequest) (*UserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedApiServiceServer) UserStateGet(context.Context, *UserStateGetRequest) (*UserStateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStateGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessGet(context.Context, *BusinessGetRequest) (*BusinessGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessPut(context.Context, *BusinessPutRequest) (*BusinessPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPut not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentMethodGet(context.Context, *BusinessPaymentMethodGetRequest) (*BusinessPaymentMethodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentMethodGet not implemented")
}
func (UnimplementedApiServiceServer) OrdersProjectCancel(context.Context, *CancelProjectPostRequest) (*CancelProjectPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersProjectCancel not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentMethodSetupPost(context.Context, *BusinessPaymentMethodSetupPostRequest) (*BusinessPaymentMethodSetupPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentMethodSetupPost not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentMethodDeletePost(context.Context, *BusinessPaymentMethodDeletePostRequest) (*BusinessPaymentMethodDeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentMethodDeletePost not implemented")
}
func (UnimplementedApiServiceServer) BusinessGetInvitationCode(context.Context, *BusinessInterestGetRequest) (*BusinessInvitationCodeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessGetInvitationCode not implemented")
}
func (UnimplementedApiServiceServer) BusinessVerifyRefCode(context.Context, *BusinessVerifyRefCodePutRequest) (*BusinessVerifyRefCodePutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessVerifyRefCode not implemented")
}
func (UnimplementedApiServiceServer) ContactGet(context.Context, *ContactGetRequest) (*ContactGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactGet not implemented")
}
func (UnimplementedApiServiceServer) ContactPut(context.Context, *ContactPutRequest) (*ContactPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPut not implemented")
}
func (UnimplementedApiServiceServer) UserPut(context.Context, *UserPutRequest) (*UserPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPut not implemented")
}
func (UnimplementedApiServiceServer) StatesGet(context.Context, *StatesGetRequest) (*StatesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatesGet not implemented")
}
func (UnimplementedApiServiceServer) AdminBanUserPost(context.Context, *AdminBanUserPostRequest) (*AdminBanUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBanUserPost not implemented")
}
func (UnimplementedApiServiceServer) AdminGroupGet(context.Context, *AdminGroupGetRequest) (*AdminGroupGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGroupGet not implemented")
}
func (UnimplementedApiServiceServer) AdminGroupPost(context.Context, *AdminGroupPostRequest) (*AdminGroupPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGroupPost not implemented")
}
func (UnimplementedApiServiceServer) AdminGroupPut(context.Context, *AdminGroupPutRequest) (*AdminGroupPutRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGroupPut not implemented")
}
func (UnimplementedApiServiceServer) StripePaymentMethodGet(context.Context, *StripePaymentMethodGetRequest) (*StripePaymentMethodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripePaymentMethodGet not implemented")
}
func (UnimplementedApiServiceServer) UploadUrlPost(context.Context, *UploadUrlPostRequest) (*UploadUrlPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUrlPost not implemented")
}
func (UnimplementedApiServiceServer) BusinessNearGet(context.Context, *BusinessNearGetRequest) (*BusinessNearGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessNearGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessInterestGet(context.Context, *BusinessInterestGetRequest) (*BusinessInterestGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessInterestGet not implemented")
}
func (UnimplementedApiServiceServer) OrdersGet(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessServiceGet(context.Context, *BusinessServiceGetRequest) (*BusinessServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessServiceGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessFreeContactGet(context.Context, *BusinessFreeContactGetRequest) (*BusinessFreeContactGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessFreeContactGet not implemented")
}
func (UnimplementedApiServiceServer) AdminBusinessesGet(context.Context, *AdminBusinessesGetRequest) (*AdminBusinessesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBusinessesGet not implemented")
}
func (UnimplementedApiServiceServer) AdminBusinessBanPost(context.Context, *AdminBusinessBanPostRequest) (*AdminBusinessBanPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBusinessBanPost not implemented")
}
func (UnimplementedApiServiceServer) AdminBusinessDeletePost(context.Context, *AdminBusinessDeletePostRequest) (*AdminBusinessDeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBusinessDeletePost not implemented")
}
func (UnimplementedApiServiceServer) AdminUsersDeletePost(context.Context, *AdminUsersDeletePostRequest) (*AdminUsersDeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUsersDeletePost not implemented")
}
func (UnimplementedApiServiceServer) AdminUsersUnbanPost(context.Context, *AdminUsersUnbanPostRequest) (*AdminUsersUnbanPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUsersUnbanPost not implemented")
}
func (UnimplementedApiServiceServer) AdminBusinessesUnbanPost(context.Context, *AdminBusinessesUnbanPostRequest) (*AdminBusinessesUnbanPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBusinessesUnbanPost not implemented")
}
func (UnimplementedApiServiceServer) AdminUsersGet(context.Context, *AdminUsersGetRequest) (*AdminUsersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUsersGet not implemented")
}
func (UnimplementedApiServiceServer) AdminPostCategories(context.Context, *AdminCategoryPostRequest) (*AdminCategoryPostResponese, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPostCategories not implemented")
}
func (UnimplementedApiServiceServer) AdminPostEditCategories(context.Context, *AdminCategoryPostEditRequest) (*AdminCategoryPostEditResponese, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPostEditCategories not implemented")
}
func (UnimplementedApiServiceServer) AdminPostDeleteCategories(context.Context, *AdminCategoryPostDeleteRequest) (*AdminCategoryPostDeleteResponese, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPostDeleteCategories not implemented")
}
func (UnimplementedApiServiceServer) AdminAdvertiseManagementPost(context.Context, *AdminAdvertiseManagementPostRequest) (*AdminAdvertiseManagementPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAdvertiseManagementPost not implemented")
}
func (UnimplementedApiServiceServer) AdminAdvertiseMangementGet(context.Context, *AdminAdvertiseManagementGetRequest) (*AdminAdvertiseManagementGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAdvertiseMangementGet not implemented")
}
func (UnimplementedApiServiceServer) AdminAdvertiseManagementPut(context.Context, *AdminAdvertiseManagementPutRequest) (*AdminAdvertiseManagementPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAdvertiseManagementPut not implemented")
}
func (UnimplementedApiServiceServer) AdminAdvertiseManagementPostDelete(context.Context, *AdminAdvertiseManagementDeletePostRequest) (*AdminAdvertiseManagementDeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAdvertiseManagementPostDelete not implemented")
}
func (UnimplementedApiServiceServer) CategoriesGet(context.Context, *CategoriesGetRequest) (*CategoriesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoriesGet not implemented")
}
func (UnimplementedApiServiceServer) CategoryGet(context.Context, *CategoryGetRequest) (*CategoryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryGet not implemented")
}
func (UnimplementedApiServiceServer) StripeKeyGet(context.Context, *StripeKeyGetRequest) (*StripeKeyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripeKeyGet not implemented")
}
func (UnimplementedApiServiceServer) StripeSetupPost(context.Context, *StripeSetupPostRequest) (*StripeSetupPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripeSetupPost not implemented")
}
func (UnimplementedApiServiceServer) BusinesssGet(context.Context, *BusinessesGetRequest) (*BusinessesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinesssGet not implemented")
}
func (UnimplementedApiServiceServer) AuthCheckGet(context.Context, *AuthCheckGetRequest) (*AuthCheckGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessServicesPut(context.Context, *BusinessServicesPutRequest) (*BusinessServicesPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessServicesPut not implemented")
}
func (UnimplementedApiServiceServer) BusinessFeedbacksGet(context.Context, *BusinessFeedbacksGetRequest) (*BusinessFeedbacksGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessFeedbacksGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessRatingGet(context.Context, *BusinessRatingGetRequest) (*BusinessRatingGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessRatingGet not implemented")
}
func (UnimplementedApiServiceServer) OrdersPost(context.Context, *OrdersPostRequest) (*OrdersPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersPost not implemented")
}
func (UnimplementedApiServiceServer) UpdateOrderConnectPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderConnectPost not implemented")
}
func (UnimplementedApiServiceServer) UpdateAllOrderConnectPost(context.Context, *UpdateAllOrderStatusPostRequest) (*UpdateAllOrderStatusPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllOrderConnectPost not implemented")
}
func (UnimplementedApiServiceServer) UpdateOrderRejectPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderRejectPost not implemented")
}
func (UnimplementedApiServiceServer) UpdateOrderCancelPost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderCancelPost not implemented")
}
func (UnimplementedApiServiceServer) UpdateOrderCompletePost(context.Context, *UpdateOrderStatusPostRequest) (*UpdateOrderStatusPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderCompletePost not implemented")
}
func (UnimplementedApiServiceServer) FeedbacksPost(context.Context, *FeedbacksPostRequest) (*FeedbacksPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbacksPost not implemented")
}
func (UnimplementedApiServiceServer) FeedbacksPut(context.Context, *FeedbackPutRequest) (*FeedbackPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbacksPut not implemented")
}
func (UnimplementedApiServiceServer) FeedbacksGet(context.Context, *FeedbackGetRequest) (*FeedbackGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbacksGet not implemented")
}
func (UnimplementedApiServiceServer) AuthMailPost(context.Context, *AuthMailPostRequest) (*AuthMailPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthMailPost not implemented")
}
func (UnimplementedApiServiceServer) OrdersProjectsGet(context.Context, *UserProjectsGetRequest) (*UserProjectsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersProjectsGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessAlreadyOrderedGet(context.Context, *BusinessesAlreadyOrderedGetRequest) (*BusinessesAlreadyOrderedGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessAlreadyOrderedGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentMethodPost(context.Context, *BusinessPaymentMethodPostRequest) (*BusinessPaymentMethodPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentMethodPost not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentSummaryGet(context.Context, *BusinessTransactionsGetRequest) (*BusinessTransactionsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentSummaryGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessPaymentSummaryExportGet(context.Context, *BusinessTransactionsGetRequest) (*BusinessTransactionsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPaymentSummaryExportGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessAdvertiseGet(context.Context, *AdvertiseGetRequest) (*AdvertiseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessAdvertiseGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessAdvertiseDetailGet(context.Context, *AdvertiseDetailGetRequest) (*AdvertiseDetailGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessAdvertiseDetailGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessAdvertiseTransactionGet(context.Context, *BusinessAdvertiseOrderGetRequest) (*BusinessAdvertiseOrderGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessAdvertiseTransactionGet not implemented")
}
func (UnimplementedApiServiceServer) BusinessBuyAdvertiseValidatePost(context.Context, *BusinessValidateBuyAdvertisePostRequest) (*BusinessValidateBuyAdvertisePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessBuyAdvertiseValidatePost not implemented")
}
func (UnimplementedApiServiceServer) BusinessBuyAdvertiseSetupPost(context.Context, *BusinessBuyAdvertiseSetupPostRequest) (*BusinessBuyAdvertiseSetupPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessBuyAdvertiseSetupPost not implemented")
}
func (UnimplementedApiServiceServer) BusinessBuyAdvertisePost(context.Context, *BusinessBuyAdvertisePostRequest) (*BusinessBuyAdvertisePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessBuyAdvertisePost not implemented")
}
func (UnimplementedApiServiceServer) ChatserviceConversationsPost(context.Context, *ConversationPostRequest) (*ConversationPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatserviceConversationsPost not implemented")
}
func (UnimplementedApiServiceServer) StatisticsGet(context.Context, *StatisticGetRequest) (*StatisticGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsGet not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_SubscribePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SubscribePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/SubscribePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SubscribePost(ctx, req.(*SubscribePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UnsubscribePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UnsubscribePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UnsubscribePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UnsubscribePost(ctx, req.(*UnsubscribePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthCredential(ctx, req.(*AuthCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthPing(ctx, req.(*AuthPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthPasswordPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPasswordPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthPasswordPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthPasswordPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthPasswordPost(ctx, req.(*AuthPasswordPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthOTPPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthOTPPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthOTPPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthOTPPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthOTPPost(ctx, req.(*AuthOTPPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthResendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthResendOTPPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthResendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthResendOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthResendOTP(ctx, req.(*AuthResendOTPPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthForgotPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthForgotPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthForgotPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthForgotPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthForgotPost(ctx, req.(*AuthForgotPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthForgotReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthForgotResetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthForgotReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthForgotReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthForgotReset(ctx, req.(*AuthForgotResetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthChangeMailAndPassPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthChangeMailAndPassPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthChangeMailAndPassPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthChangeMailAndPassPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthChangeMailAndPassPut(ctx, req.(*AuthChangeMailAndPassPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UserPost(ctx, req.(*UserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPost(ctx, req.(*BusinessPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UserGet(ctx, req.(*UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UserStateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UserStateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UserStateGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UserStateGet(ctx, req.(*UserStateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessGet(ctx, req.(*BusinessGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPut(ctx, req.(*BusinessPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentMethodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPaymentMethodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentMethodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentMethodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentMethodGet(ctx, req.(*BusinessPaymentMethodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_OrdersProjectCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProjectPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).OrdersProjectCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/OrdersProjectCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).OrdersProjectCancel(ctx, req.(*CancelProjectPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentMethodSetupPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPaymentMethodSetupPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentMethodSetupPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentMethodSetupPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentMethodSetupPost(ctx, req.(*BusinessPaymentMethodSetupPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentMethodDeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPaymentMethodDeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentMethodDeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentMethodDeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentMethodDeletePost(ctx, req.(*BusinessPaymentMethodDeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessGetInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessInterestGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessGetInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessGetInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessGetInvitationCode(ctx, req.(*BusinessInterestGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessVerifyRefCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessVerifyRefCodePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessVerifyRefCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessVerifyRefCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessVerifyRefCode(ctx, req.(*BusinessVerifyRefCodePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ContactGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ContactGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/ContactGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ContactGet(ctx, req.(*ContactGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ContactPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ContactPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/ContactPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ContactPut(ctx, req.(*ContactPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UserPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UserPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UserPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UserPut(ctx, req.(*UserPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StatesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StatesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/StatesGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StatesGet(ctx, req.(*StatesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminBanUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBanUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminBanUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminBanUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminBanUserPost(ctx, req.(*AdminBanUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminGroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGroupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminGroupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminGroupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminGroupGet(ctx, req.(*AdminGroupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminGroupPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGroupPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminGroupPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminGroupPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminGroupPost(ctx, req.(*AdminGroupPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminGroupPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGroupPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminGroupPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminGroupPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminGroupPut(ctx, req.(*AdminGroupPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StripePaymentMethodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripePaymentMethodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StripePaymentMethodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/StripePaymentMethodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StripePaymentMethodGet(ctx, req.(*StripePaymentMethodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UploadUrlPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUrlPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UploadUrlPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UploadUrlPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UploadUrlPost(ctx, req.(*UploadUrlPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessNearGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessNearGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessNearGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessNearGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessNearGet(ctx, req.(*BusinessNearGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessInterestGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessInterestGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessInterestGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessInterestGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessInterestGet(ctx, req.(*BusinessInterestGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_OrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).OrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/OrdersGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).OrdersGet(ctx, req.(*OrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessServiceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessServiceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessServiceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessServiceGet(ctx, req.(*BusinessServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessFreeContactGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessFreeContactGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessFreeContactGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessFreeContactGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessFreeContactGet(ctx, req.(*BusinessFreeContactGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminBusinessesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBusinessesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminBusinessesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminBusinessesGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminBusinessesGet(ctx, req.(*AdminBusinessesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminBusinessBanPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBusinessBanPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminBusinessBanPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminBusinessBanPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminBusinessBanPost(ctx, req.(*AdminBusinessBanPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminBusinessDeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBusinessDeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminBusinessDeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminBusinessDeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminBusinessDeletePost(ctx, req.(*AdminBusinessDeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminUsersDeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUsersDeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminUsersDeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminUsersDeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminUsersDeletePost(ctx, req.(*AdminUsersDeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminUsersUnbanPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUsersUnbanPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminUsersUnbanPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminUsersUnbanPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminUsersUnbanPost(ctx, req.(*AdminUsersUnbanPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminBusinessesUnbanPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBusinessesUnbanPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminBusinessesUnbanPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminBusinessesUnbanPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminBusinessesUnbanPost(ctx, req.(*AdminBusinessesUnbanPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminUsersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUsersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminUsersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminUsersGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminUsersGet(ctx, req.(*AdminUsersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminPostCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCategoryPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminPostCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminPostCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminPostCategories(ctx, req.(*AdminCategoryPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminPostEditCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCategoryPostEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminPostEditCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminPostEditCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminPostEditCategories(ctx, req.(*AdminCategoryPostEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminPostDeleteCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCategoryPostDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminPostDeleteCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminPostDeleteCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminPostDeleteCategories(ctx, req.(*AdminCategoryPostDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminAdvertiseManagementPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAdvertiseManagementPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminAdvertiseManagementPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPost(ctx, req.(*AdminAdvertiseManagementPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminAdvertiseMangementGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAdvertiseManagementGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminAdvertiseMangementGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminAdvertiseMangementGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminAdvertiseMangementGet(ctx, req.(*AdminAdvertiseManagementGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminAdvertiseManagementPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAdvertiseManagementPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminAdvertiseManagementPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPut(ctx, req.(*AdminAdvertiseManagementPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AdminAdvertiseManagementPostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAdvertiseManagementDeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AdminAdvertiseManagementPostDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AdminAdvertiseManagementPostDelete(ctx, req.(*AdminAdvertiseManagementDeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CategoriesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CategoriesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/CategoriesGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CategoriesGet(ctx, req.(*CategoriesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CategoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CategoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/CategoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CategoryGet(ctx, req.(*CategoryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StripeKeyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeKeyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StripeKeyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/StripeKeyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StripeKeyGet(ctx, req.(*StripeKeyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StripeSetupPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeSetupPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StripeSetupPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/StripeSetupPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StripeSetupPost(ctx, req.(*StripeSetupPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinesssGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinesssGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinesssGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinesssGet(ctx, req.(*BusinessesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthCheckGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCheckGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthCheckGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthCheckGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthCheckGet(ctx, req.(*AuthCheckGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessServicesPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessServicesPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessServicesPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessServicesPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessServicesPut(ctx, req.(*BusinessServicesPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessFeedbacksGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessFeedbacksGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessFeedbacksGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessFeedbacksGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessFeedbacksGet(ctx, req.(*BusinessFeedbacksGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessRatingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRatingGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessRatingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessRatingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessRatingGet(ctx, req.(*BusinessRatingGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_OrdersPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).OrdersPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/OrdersPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).OrdersPost(ctx, req.(*OrdersPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateOrderConnectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateOrderConnectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UpdateOrderConnectPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateOrderConnectPost(ctx, req.(*UpdateOrderStatusPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateAllOrderConnectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllOrderStatusPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateAllOrderConnectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UpdateAllOrderConnectPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateAllOrderConnectPost(ctx, req.(*UpdateAllOrderStatusPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateOrderRejectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateOrderRejectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UpdateOrderRejectPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateOrderRejectPost(ctx, req.(*UpdateOrderStatusPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateOrderCancelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateOrderCancelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UpdateOrderCancelPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateOrderCancelPost(ctx, req.(*UpdateOrderStatusPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateOrderCompletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateOrderCompletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/UpdateOrderCompletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateOrderCompletePost(ctx, req.(*UpdateOrderStatusPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_FeedbacksPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbacksPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).FeedbacksPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/FeedbacksPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).FeedbacksPost(ctx, req.(*FeedbacksPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_FeedbacksPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).FeedbacksPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/FeedbacksPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).FeedbacksPut(ctx, req.(*FeedbackPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_FeedbacksGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).FeedbacksGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/FeedbacksGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).FeedbacksGet(ctx, req.(*FeedbackGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AuthMailPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMailPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AuthMailPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/AuthMailPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AuthMailPost(ctx, req.(*AuthMailPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_OrdersProjectsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProjectsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).OrdersProjectsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/OrdersProjectsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).OrdersProjectsGet(ctx, req.(*UserProjectsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessAlreadyOrderedGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessesAlreadyOrderedGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessAlreadyOrderedGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessAlreadyOrderedGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessAlreadyOrderedGet(ctx, req.(*BusinessesAlreadyOrderedGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentMethodPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessPaymentMethodPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentMethodPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentMethodPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentMethodPost(ctx, req.(*BusinessPaymentMethodPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentSummaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessTransactionsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentSummaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentSummaryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentSummaryGet(ctx, req.(*BusinessTransactionsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessPaymentSummaryExportGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessTransactionsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessPaymentSummaryExportGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessPaymentSummaryExportGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessPaymentSummaryExportGet(ctx, req.(*BusinessTransactionsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessAdvertiseGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessAdvertiseGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessAdvertiseGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessAdvertiseGet(ctx, req.(*AdvertiseGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessAdvertiseDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseDetailGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessAdvertiseDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessAdvertiseDetailGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessAdvertiseDetailGet(ctx, req.(*AdvertiseDetailGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessAdvertiseTransactionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessAdvertiseOrderGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessAdvertiseTransactionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessAdvertiseTransactionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessAdvertiseTransactionGet(ctx, req.(*BusinessAdvertiseOrderGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessBuyAdvertiseValidatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessValidateBuyAdvertisePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessBuyAdvertiseValidatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessBuyAdvertiseValidatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessBuyAdvertiseValidatePost(ctx, req.(*BusinessValidateBuyAdvertisePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessBuyAdvertiseSetupPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBuyAdvertiseSetupPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessBuyAdvertiseSetupPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessBuyAdvertiseSetupPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessBuyAdvertiseSetupPost(ctx, req.(*BusinessBuyAdvertiseSetupPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BusinessBuyAdvertisePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBuyAdvertisePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BusinessBuyAdvertisePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/BusinessBuyAdvertisePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BusinessBuyAdvertisePost(ctx, req.(*BusinessBuyAdvertisePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChatserviceConversationsPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChatserviceConversationsPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/ChatserviceConversationsPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChatserviceConversationsPost(ctx, req.(*ConversationPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StatisticsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StatisticsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.ApiService/StatisticsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StatisticsGet(ctx, req.(*StatisticGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiservice.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribePost",
			Handler:    _ApiService_SubscribePost_Handler,
		},
		{
			MethodName: "UnsubscribePost",
			Handler:    _ApiService_UnsubscribePost_Handler,
		},
		{
			MethodName: "AuthCredential",
			Handler:    _ApiService_AuthCredential_Handler,
		},
		{
			MethodName: "AuthPing",
			Handler:    _ApiService_AuthPing_Handler,
		},
		{
			MethodName: "AuthPasswordPost",
			Handler:    _ApiService_AuthPasswordPost_Handler,
		},
		{
			MethodName: "AuthOTPPost",
			Handler:    _ApiService_AuthOTPPost_Handler,
		},
		{
			MethodName: "AuthResendOTP",
			Handler:    _ApiService_AuthResendOTP_Handler,
		},
		{
			MethodName: "AuthForgotPost",
			Handler:    _ApiService_AuthForgotPost_Handler,
		},
		{
			MethodName: "AuthForgotReset",
			Handler:    _ApiService_AuthForgotReset_Handler,
		},
		{
			MethodName: "AuthChangeMailAndPassPut",
			Handler:    _ApiService_AuthChangeMailAndPassPut_Handler,
		},
		{
			MethodName: "UserPost",
			Handler:    _ApiService_UserPost_Handler,
		},
		{
			MethodName: "BusinessPost",
			Handler:    _ApiService_BusinessPost_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _ApiService_UserGet_Handler,
		},
		{
			MethodName: "UserStateGet",
			Handler:    _ApiService_UserStateGet_Handler,
		},
		{
			MethodName: "BusinessGet",
			Handler:    _ApiService_BusinessGet_Handler,
		},
		{
			MethodName: "BusinessPut",
			Handler:    _ApiService_BusinessPut_Handler,
		},
		{
			MethodName: "BusinessPaymentMethodGet",
			Handler:    _ApiService_BusinessPaymentMethodGet_Handler,
		},
		{
			MethodName: "OrdersProjectCancel",
			Handler:    _ApiService_OrdersProjectCancel_Handler,
		},
		{
			MethodName: "BusinessPaymentMethodSetupPost",
			Handler:    _ApiService_BusinessPaymentMethodSetupPost_Handler,
		},
		{
			MethodName: "BusinessPaymentMethodDeletePost",
			Handler:    _ApiService_BusinessPaymentMethodDeletePost_Handler,
		},
		{
			MethodName: "BusinessGetInvitationCode",
			Handler:    _ApiService_BusinessGetInvitationCode_Handler,
		},
		{
			MethodName: "BusinessVerifyRefCode",
			Handler:    _ApiService_BusinessVerifyRefCode_Handler,
		},
		{
			MethodName: "ContactGet",
			Handler:    _ApiService_ContactGet_Handler,
		},
		{
			MethodName: "ContactPut",
			Handler:    _ApiService_ContactPut_Handler,
		},
		{
			MethodName: "UserPut",
			Handler:    _ApiService_UserPut_Handler,
		},
		{
			MethodName: "StatesGet",
			Handler:    _ApiService_StatesGet_Handler,
		},
		{
			MethodName: "AdminBanUserPost",
			Handler:    _ApiService_AdminBanUserPost_Handler,
		},
		{
			MethodName: "AdminGroupGet",
			Handler:    _ApiService_AdminGroupGet_Handler,
		},
		{
			MethodName: "AdminGroupPost",
			Handler:    _ApiService_AdminGroupPost_Handler,
		},
		{
			MethodName: "AdminGroupPut",
			Handler:    _ApiService_AdminGroupPut_Handler,
		},
		{
			MethodName: "StripePaymentMethodGet",
			Handler:    _ApiService_StripePaymentMethodGet_Handler,
		},
		{
			MethodName: "UploadUrlPost",
			Handler:    _ApiService_UploadUrlPost_Handler,
		},
		{
			MethodName: "BusinessNearGet",
			Handler:    _ApiService_BusinessNearGet_Handler,
		},
		{
			MethodName: "BusinessInterestGet",
			Handler:    _ApiService_BusinessInterestGet_Handler,
		},
		{
			MethodName: "OrdersGet",
			Handler:    _ApiService_OrdersGet_Handler,
		},
		{
			MethodName: "BusinessServiceGet",
			Handler:    _ApiService_BusinessServiceGet_Handler,
		},
		{
			MethodName: "BusinessFreeContactGet",
			Handler:    _ApiService_BusinessFreeContactGet_Handler,
		},
		{
			MethodName: "AdminBusinessesGet",
			Handler:    _ApiService_AdminBusinessesGet_Handler,
		},
		{
			MethodName: "AdminBusinessBanPost",
			Handler:    _ApiService_AdminBusinessBanPost_Handler,
		},
		{
			MethodName: "AdminBusinessDeletePost",
			Handler:    _ApiService_AdminBusinessDeletePost_Handler,
		},
		{
			MethodName: "AdminUsersDeletePost",
			Handler:    _ApiService_AdminUsersDeletePost_Handler,
		},
		{
			MethodName: "AdminUsersUnbanPost",
			Handler:    _ApiService_AdminUsersUnbanPost_Handler,
		},
		{
			MethodName: "AdminBusinessesUnbanPost",
			Handler:    _ApiService_AdminBusinessesUnbanPost_Handler,
		},
		{
			MethodName: "AdminUsersGet",
			Handler:    _ApiService_AdminUsersGet_Handler,
		},
		{
			MethodName: "AdminPostCategories",
			Handler:    _ApiService_AdminPostCategories_Handler,
		},
		{
			MethodName: "AdminPostEditCategories",
			Handler:    _ApiService_AdminPostEditCategories_Handler,
		},
		{
			MethodName: "AdminPostDeleteCategories",
			Handler:    _ApiService_AdminPostDeleteCategories_Handler,
		},
		{
			MethodName: "AdminAdvertiseManagementPost",
			Handler:    _ApiService_AdminAdvertiseManagementPost_Handler,
		},
		{
			MethodName: "AdminAdvertiseMangementGet",
			Handler:    _ApiService_AdminAdvertiseMangementGet_Handler,
		},
		{
			MethodName: "AdminAdvertiseManagementPut",
			Handler:    _ApiService_AdminAdvertiseManagementPut_Handler,
		},
		{
			MethodName: "AdminAdvertiseManagementPostDelete",
			Handler:    _ApiService_AdminAdvertiseManagementPostDelete_Handler,
		},
		{
			MethodName: "CategoriesGet",
			Handler:    _ApiService_CategoriesGet_Handler,
		},
		{
			MethodName: "CategoryGet",
			Handler:    _ApiService_CategoryGet_Handler,
		},
		{
			MethodName: "StripeKeyGet",
			Handler:    _ApiService_StripeKeyGet_Handler,
		},
		{
			MethodName: "StripeSetupPost",
			Handler:    _ApiService_StripeSetupPost_Handler,
		},
		{
			MethodName: "BusinesssGet",
			Handler:    _ApiService_BusinesssGet_Handler,
		},
		{
			MethodName: "AuthCheckGet",
			Handler:    _ApiService_AuthCheckGet_Handler,
		},
		{
			MethodName: "BusinessServicesPut",
			Handler:    _ApiService_BusinessServicesPut_Handler,
		},
		{
			MethodName: "BusinessFeedbacksGet",
			Handler:    _ApiService_BusinessFeedbacksGet_Handler,
		},
		{
			MethodName: "BusinessRatingGet",
			Handler:    _ApiService_BusinessRatingGet_Handler,
		},
		{
			MethodName: "OrdersPost",
			Handler:    _ApiService_OrdersPost_Handler,
		},
		{
			MethodName: "UpdateOrderConnectPost",
			Handler:    _ApiService_UpdateOrderConnectPost_Handler,
		},
		{
			MethodName: "UpdateAllOrderConnectPost",
			Handler:    _ApiService_UpdateAllOrderConnectPost_Handler,
		},
		{
			MethodName: "UpdateOrderRejectPost",
			Handler:    _ApiService_UpdateOrderRejectPost_Handler,
		},
		{
			MethodName: "UpdateOrderCancelPost",
			Handler:    _ApiService_UpdateOrderCancelPost_Handler,
		},
		{
			MethodName: "UpdateOrderCompletePost",
			Handler:    _ApiService_UpdateOrderCompletePost_Handler,
		},
		{
			MethodName: "FeedbacksPost",
			Handler:    _ApiService_FeedbacksPost_Handler,
		},
		{
			MethodName: "FeedbacksPut",
			Handler:    _ApiService_FeedbacksPut_Handler,
		},
		{
			MethodName: "FeedbacksGet",
			Handler:    _ApiService_FeedbacksGet_Handler,
		},
		{
			MethodName: "AuthMailPost",
			Handler:    _ApiService_AuthMailPost_Handler,
		},
		{
			MethodName: "OrdersProjectsGet",
			Handler:    _ApiService_OrdersProjectsGet_Handler,
		},
		{
			MethodName: "BusinessAlreadyOrderedGet",
			Handler:    _ApiService_BusinessAlreadyOrderedGet_Handler,
		},
		{
			MethodName: "BusinessPaymentMethodPost",
			Handler:    _ApiService_BusinessPaymentMethodPost_Handler,
		},
		{
			MethodName: "BusinessPaymentSummaryGet",
			Handler:    _ApiService_BusinessPaymentSummaryGet_Handler,
		},
		{
			MethodName: "BusinessPaymentSummaryExportGet",
			Handler:    _ApiService_BusinessPaymentSummaryExportGet_Handler,
		},
		{
			MethodName: "BusinessAdvertiseGet",
			Handler:    _ApiService_BusinessAdvertiseGet_Handler,
		},
		{
			MethodName: "BusinessAdvertiseDetailGet",
			Handler:    _ApiService_BusinessAdvertiseDetailGet_Handler,
		},
		{
			MethodName: "BusinessAdvertiseTransactionGet",
			Handler:    _ApiService_BusinessAdvertiseTransactionGet_Handler,
		},
		{
			MethodName: "BusinessBuyAdvertiseValidatePost",
			Handler:    _ApiService_BusinessBuyAdvertiseValidatePost_Handler,
		},
		{
			MethodName: "BusinessBuyAdvertiseSetupPost",
			Handler:    _ApiService_BusinessBuyAdvertiseSetupPost_Handler,
		},
		{
			MethodName: "BusinessBuyAdvertisePost",
			Handler:    _ApiService_BusinessBuyAdvertisePost_Handler,
		},
		{
			MethodName: "ChatserviceConversationsPost",
			Handler:    _ApiService_ChatserviceConversationsPost_Handler,
		},
		{
			MethodName: "StatisticsGet",
			Handler:    _ApiService_StatisticsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiservice.proto",
}
