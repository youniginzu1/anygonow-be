// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: apiservice.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	c "github.com/aqaurius6666/apiservice/src/internal/var/c"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = c.ORDER_STATUS(0)
)

// Validate checks the field values on SubscribePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribePostRequestMultiError, or nil if none found.
func (m *SubscribePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return SubscribePostRequestMultiError(errors)
	}

	return nil
}

// SubscribePostRequestMultiError is an error wrapping multiple validation
// errors returned by SubscribePostRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePostRequestMultiError) AllErrors() []error { return m }

// SubscribePostRequestValidationError is the validation error returned by
// SubscribePostRequest.Validate if the designated constraints aren't met.
type SubscribePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePostRequestValidationError) ErrorName() string {
	return "SubscribePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePostRequestValidationError{}

// Validate checks the field values on SubscribePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribePostResponseMultiError, or nil if none found.
func (m *SubscribePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribePostResponseMultiError(errors)
	}

	return nil
}

// SubscribePostResponseMultiError is an error wrapping multiple validation
// errors returned by SubscribePostResponse.ValidateAll() if the designated
// constraints aren't met.
type SubscribePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePostResponseMultiError) AllErrors() []error { return m }

// SubscribePostResponseValidationError is the validation error returned by
// SubscribePostResponse.Validate if the designated constraints aren't met.
type SubscribePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePostResponseValidationError) ErrorName() string {
	return "SubscribePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePostResponseValidationError{}

// Validate checks the field values on UnsubscribePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribePostRequestMultiError, or nil if none found.
func (m *UnsubscribePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return UnsubscribePostRequestMultiError(errors)
	}

	return nil
}

// UnsubscribePostRequestMultiError is an error wrapping multiple validation
// errors returned by UnsubscribePostRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribePostRequestMultiError) AllErrors() []error { return m }

// UnsubscribePostRequestValidationError is the validation error returned by
// UnsubscribePostRequest.Validate if the designated constraints aren't met.
type UnsubscribePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribePostRequestValidationError) ErrorName() string {
	return "UnsubscribePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribePostRequestValidationError{}

// Validate checks the field values on UnsubscribePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribePostResponseMultiError, or nil if none found.
func (m *UnsubscribePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsubscribePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsubscribePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsubscribePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsubscribePostResponseMultiError(errors)
	}

	return nil
}

// UnsubscribePostResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribePostResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribePostResponseMultiError) AllErrors() []error { return m }

// UnsubscribePostResponseValidationError is the validation error returned by
// UnsubscribePostResponse.Validate if the designated constraints aren't met.
type UnsubscribePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribePostResponseValidationError) ErrorName() string {
	return "UnsubscribePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribePostResponseValidationError{}

// Validate checks the field values on ConversationPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConversationPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConversationPostRequestMultiError, or nil if none found.
func (m *ConversationPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return ConversationPostRequestMultiError(errors)
	}

	return nil
}

// ConversationPostRequestMultiError is an error wrapping multiple validation
// errors returned by ConversationPostRequest.ValidateAll() if the designated
// constraints aren't met.
type ConversationPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationPostRequestMultiError) AllErrors() []error { return m }

// ConversationPostRequestValidationError is the validation error returned by
// ConversationPostRequest.Validate if the designated constraints aren't met.
type ConversationPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationPostRequestValidationError) ErrorName() string {
	return "ConversationPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConversationPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationPostRequestValidationError{}

// Validate checks the field values on ConversationPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConversationPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConversationPostResponseMultiError, or nil if none found.
func (m *ConversationPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConversationPostResponseMultiError(errors)
	}

	return nil
}

// ConversationPostResponseMultiError is an error wrapping multiple validation
// errors returned by ConversationPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ConversationPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationPostResponseMultiError) AllErrors() []error { return m }

// ConversationPostResponseValidationError is the validation error returned by
// ConversationPostResponse.Validate if the designated constraints aren't met.
type ConversationPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationPostResponseValidationError) ErrorName() string {
	return "ConversationPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConversationPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationPostResponseValidationError{}

// Validate checks the field values on Conversation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conversation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conversation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConversationMultiError, or
// nil if none found.
func (m *Conversation) ValidateAll() error {
	return m.validate(true)
}

func (m *Conversation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LastChat

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConversationValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConversationValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConversationValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConversationMultiError(errors)
	}

	return nil
}

// ConversationMultiError is an error wrapping multiple validation errors
// returned by Conversation.ValidateAll() if the designated constraints aren't met.
type ConversationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationMultiError) AllErrors() []error { return m }

// ConversationValidationError is the validation error returned by
// Conversation.Validate if the designated constraints aren't met.
type ConversationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationValidationError) ErrorName() string { return "ConversationValidationError" }

// Error satisfies the builtin error interface
func (e ConversationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationValidationError{}

// Validate checks the field values on ServiceGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceGroupMultiError, or
// nil if none found.
func (m *ServiceGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return ServiceGroupMultiError(errors)
	}

	return nil
}

// ServiceGroupMultiError is an error wrapping multiple validation errors
// returned by ServiceGroup.ValidateAll() if the designated constraints aren't met.
type ServiceGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGroupMultiError) AllErrors() []error { return m }

// ServiceGroupValidationError is the validation error returned by
// ServiceGroup.Validate if the designated constraints aren't met.
type ServiceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGroupValidationError) ErrorName() string { return "ServiceGroupValidationError" }

// Error satisfies the builtin error interface
func (e ServiceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGroupValidationError{}

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupMultiError, or nil if none found.
func (m *Group) ValidateAll() error {
	return m.validate(true)
}

func (m *Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Fee

	for idx, item := range m.GetServiceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupValidationError{
					field:  fmt.Sprintf("ServiceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupMultiError(errors)
	}

	return nil
}

// GroupMultiError is an error wrapping multiple validation errors returned by
// Group.ValidateAll() if the designated constraints aren't met.
type GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMultiError) AllErrors() []error { return m }

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}

// Validate checks the field values on Feedback with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Feedback) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Feedback with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedbackMultiError, or nil
// if none found.
func (m *Feedback) ValidateAll() error {
	return m.validate(true)
}

func (m *Feedback) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	// no validation rules for Comment

	// no validation rules for CreatedAt

	// no validation rules for CustomerName

	// no validation rules for Image

	// no validation rules for ServiceOrder

	if len(errors) > 0 {
		return FeedbackMultiError(errors)
	}

	return nil
}

// FeedbackMultiError is an error wrapping multiple validation errors returned
// by Feedback.ValidateAll() if the designated constraints aren't met.
type FeedbackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackMultiError) AllErrors() []error { return m }

// FeedbackValidationError is the validation error returned by
// Feedback.Validate if the designated constraints aren't met.
type FeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackValidationError) ErrorName() string { return "FeedbackValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentMethodId

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on Rating with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rating) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rating with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RatingMultiError, or nil if none found.
func (m *Rating) ValidateAll() error {
	return m.validate(true)
}

func (m *Rating) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	// no validation rules for Review

	// no validation rules for Request

	if len(errors) > 0 {
		return RatingMultiError(errors)
	}

	return nil
}

// RatingMultiError is an error wrapping multiple validation errors returned by
// Rating.ValidateAll() if the designated constraints aren't met.
type RatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RatingMultiError) AllErrors() []error { return m }

// RatingValidationError is the validation error returned by Rating.Validate if
// the designated constraints aren't met.
type RatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingValidationError) ErrorName() string { return "RatingValidationError" }

// Error satisfies the builtin error interface
func (e RatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingValidationError{}

// Validate checks the field values on BusinessRating with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessRating) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessRating with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessRatingMultiError,
// or nil if none found.
func (m *BusinessRating) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessRating) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessRatingValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessRatingValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessRatingValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRating()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessRatingValidationError{
					field:  "Rating",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessRatingValidationError{
					field:  "Rating",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRating()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessRatingValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessRatingMultiError(errors)
	}

	return nil
}

// BusinessRatingMultiError is an error wrapping multiple validation errors
// returned by BusinessRating.ValidateAll() if the designated constraints
// aren't met.
type BusinessRatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessRatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessRatingMultiError) AllErrors() []error { return m }

// BusinessRatingValidationError is the validation error returned by
// BusinessRating.Validate if the designated constraints aren't met.
type BusinessRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessRatingValidationError) ErrorName() string { return "BusinessRatingValidationError" }

// Error satisfies the builtin error interface
func (e BusinessRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessRatingValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CustomerId

	// no validation rules for BusinessId

	// no validation rules for ConversationId

	// no validation rules for ServiceId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Status

	// no validation rules for CustomerPhone

	// no validation rules for CustomerZipcode

	// no validation rules for CustomerMessage

	// no validation rules for ServiceName

	// no validation rules for Image

	// no validation rules for Fee

	// no validation rules for BusinessLogo

	// no validation rules for BusinessBanner

	// no validation rules for BusinessName

	// no validation rules for CustomerName

	// no validation rules for IsReviewed

	// no validation rules for CategoryId

	// no validation rules for CustomerMail

	// no validation rules for HandymanMail

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on PaymentMethodInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodInfoMultiError, or nil if none found.
func (m *PaymentMethodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardType

	// no validation rules for Last4

	// no validation rules for ExpireDate

	// no validation rules for OwnerName

	if len(errors) > 0 {
		return PaymentMethodInfoMultiError(errors)
	}

	return nil
}

// PaymentMethodInfoMultiError is an error wrapping multiple validation errors
// returned by PaymentMethodInfo.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodInfoMultiError) AllErrors() []error { return m }

// PaymentMethodInfoValidationError is the validation error returned by
// PaymentMethodInfo.Validate if the designated constraints aren't met.
type PaymentMethodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodInfoValidationError) ErrorName() string {
	return "PaymentMethodInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodInfoValidationError{}

// Validate checks the field values on StripePaymentMethodGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripePaymentMethodGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodGetRequestMultiError, or nil if none found.
func (m *StripePaymentMethodGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return StripePaymentMethodGetRequestMultiError(errors)
	}

	return nil
}

// StripePaymentMethodGetRequestMultiError is an error wrapping multiple
// validation errors returned by StripePaymentMethodGetRequest.ValidateAll()
// if the designated constraints aren't met.
type StripePaymentMethodGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodGetRequestMultiError) AllErrors() []error { return m }

// StripePaymentMethodGetRequestValidationError is the validation error
// returned by StripePaymentMethodGetRequest.Validate if the designated
// constraints aren't met.
type StripePaymentMethodGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodGetRequestValidationError) ErrorName() string {
	return "StripePaymentMethodGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodGetRequestValidationError{}

// Validate checks the field values on StripePaymentMethodGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripePaymentMethodGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodGetResponseMultiError, or nil if none found.
func (m *StripePaymentMethodGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StripePaymentMethodGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StripePaymentMethodGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StripePaymentMethodGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StripePaymentMethodGetResponseMultiError(errors)
	}

	return nil
}

// StripePaymentMethodGetResponseMultiError is an error wrapping multiple
// validation errors returned by StripePaymentMethodGetResponse.ValidateAll()
// if the designated constraints aren't met.
type StripePaymentMethodGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodGetResponseMultiError) AllErrors() []error { return m }

// StripePaymentMethodGetResponseValidationError is the validation error
// returned by StripePaymentMethodGetResponse.Validate if the designated
// constraints aren't met.
type StripePaymentMethodGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodGetResponseValidationError) ErrorName() string {
	return "StripePaymentMethodGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodGetResponseValidationError{}

// Validate checks the field values on BusinessPaymentMethodSetupPostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodSetupPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodSetupPostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodSetupPostRequestMultiError, or nil if none found.
func (m *BusinessPaymentMethodSetupPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodSetupPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessPaymentMethodSetupPostRequestMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodSetupPostRequestMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodSetupPostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodSetupPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodSetupPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodSetupPostRequestMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodSetupPostRequestValidationError is the validation error
// returned by BusinessPaymentMethodSetupPostRequest.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodSetupPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodSetupPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodSetupPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodSetupPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodSetupPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodSetupPostRequestValidationError) ErrorName() string {
	return "BusinessPaymentMethodSetupPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodSetupPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodSetupPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodSetupPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodSetupPostRequestValidationError{}

// Validate checks the field values on BusinessPaymentMethodSetupPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodSetupPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodSetupPostResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessPaymentMethodSetupPostResponseMultiError, or nil if none found.
func (m *BusinessPaymentMethodSetupPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodSetupPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPaymentMethodSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPaymentMethodSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPaymentMethodSetupPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPaymentMethodSetupPostResponseMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodSetupPostResponseMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodSetupPostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodSetupPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodSetupPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodSetupPostResponseMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodSetupPostResponseValidationError is the validation
// error returned by BusinessPaymentMethodSetupPostResponse.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodSetupPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodSetupPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodSetupPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodSetupPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodSetupPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodSetupPostResponseValidationError) ErrorName() string {
	return "BusinessPaymentMethodSetupPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodSetupPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodSetupPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodSetupPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodSetupPostResponseValidationError{}

// Validate checks the field values on BusinessPaymentMethodDeletePostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodDeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodDeletePostRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessPaymentMethodDeletePostRequestMultiError, or nil if none found.
func (m *BusinessPaymentMethodDeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodDeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessPaymentMethodDeletePostRequestMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodDeletePostRequestMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodDeletePostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodDeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodDeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodDeletePostRequestMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodDeletePostRequestValidationError is the validation
// error returned by BusinessPaymentMethodDeletePostRequest.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodDeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodDeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodDeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodDeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodDeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodDeletePostRequestValidationError) ErrorName() string {
	return "BusinessPaymentMethodDeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodDeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodDeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodDeletePostRequestValidationError{}

// Validate checks the field values on BusinessPaymentMethodDeletePostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodDeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodDeletePostResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessPaymentMethodDeletePostResponseMultiError, or nil if none found.
func (m *BusinessPaymentMethodDeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodDeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPaymentMethodDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPaymentMethodDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPaymentMethodDeletePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPaymentMethodDeletePostResponseMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodDeletePostResponseMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodDeletePostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodDeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodDeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodDeletePostResponseMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodDeletePostResponseValidationError is the validation
// error returned by BusinessPaymentMethodDeletePostResponse.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodDeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodDeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodDeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodDeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodDeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodDeletePostResponseValidationError) ErrorName() string {
	return "BusinessPaymentMethodDeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodDeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodDeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodDeletePostResponseValidationError{}

// Validate checks the field values on UserProjectsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserProjectsGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProjectsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProjectsGetRequestMultiError, or nil if none found.
func (m *UserProjectsGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProjectsGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return UserProjectsGetRequestMultiError(errors)
	}

	return nil
}

// UserProjectsGetRequestMultiError is an error wrapping multiple validation
// errors returned by UserProjectsGetRequest.ValidateAll() if the designated
// constraints aren't met.
type UserProjectsGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProjectsGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProjectsGetRequestMultiError) AllErrors() []error { return m }

// UserProjectsGetRequestValidationError is the validation error returned by
// UserProjectsGetRequest.Validate if the designated constraints aren't met.
type UserProjectsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProjectsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProjectsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProjectsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProjectsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProjectsGetRequestValidationError) ErrorName() string {
	return "UserProjectsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserProjectsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProjectsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProjectsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProjectsGetRequestValidationError{}

// Validate checks the field values on UserProjectsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserProjectsGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProjectsGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProjectsGetResponseMultiError, or nil if none found.
func (m *UserProjectsGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProjectsGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProjectsGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProjectsGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProjectsGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserProjectsGetResponseMultiError(errors)
	}

	return nil
}

// UserProjectsGetResponseMultiError is an error wrapping multiple validation
// errors returned by UserProjectsGetResponse.ValidateAll() if the designated
// constraints aren't met.
type UserProjectsGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProjectsGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProjectsGetResponseMultiError) AllErrors() []error { return m }

// UserProjectsGetResponseValidationError is the validation error returned by
// UserProjectsGetResponse.Validate if the designated constraints aren't met.
type UserProjectsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProjectsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProjectsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProjectsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProjectsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProjectsGetResponseValidationError) ErrorName() string {
	return "UserProjectsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserProjectsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProjectsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProjectsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProjectsGetResponseValidationError{}

// Validate checks the field values on CancelProjectPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProjectPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProjectPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelProjectPostRequestMultiError, or nil if none found.
func (m *CancelProjectPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProjectPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Zipcode

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return CancelProjectPostRequestMultiError(errors)
	}

	return nil
}

// CancelProjectPostRequestMultiError is an error wrapping multiple validation
// errors returned by CancelProjectPostRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelProjectPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProjectPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProjectPostRequestMultiError) AllErrors() []error { return m }

// CancelProjectPostRequestValidationError is the validation error returned by
// CancelProjectPostRequest.Validate if the designated constraints aren't met.
type CancelProjectPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProjectPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProjectPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProjectPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProjectPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProjectPostRequestValidationError) ErrorName() string {
	return "CancelProjectPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProjectPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProjectPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProjectPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProjectPostRequestValidationError{}

// Validate checks the field values on CancelProjectPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProjectPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProjectPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelProjectPostResponseMultiError, or nil if none found.
func (m *CancelProjectPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProjectPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelProjectPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelProjectPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelProjectPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelProjectPostResponseMultiError(errors)
	}

	return nil
}

// CancelProjectPostResponseMultiError is an error wrapping multiple validation
// errors returned by CancelProjectPostResponse.ValidateAll() if the
// designated constraints aren't met.
type CancelProjectPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProjectPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProjectPostResponseMultiError) AllErrors() []error { return m }

// CancelProjectPostResponseValidationError is the validation error returned by
// CancelProjectPostResponse.Validate if the designated constraints aren't met.
type CancelProjectPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProjectPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProjectPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProjectPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProjectPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProjectPostResponseValidationError) ErrorName() string {
	return "CancelProjectPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProjectPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProjectPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProjectPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProjectPostResponseValidationError{}

// Validate checks the field values on AdminCategoryPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCategoryPostRequestMultiError, or nil if none found.
func (m *AdminCategoryPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Name

	// no validation rules for Image

	if len(errors) > 0 {
		return AdminCategoryPostRequestMultiError(errors)
	}

	return nil
}

// AdminCategoryPostRequestMultiError is an error wrapping multiple validation
// errors returned by AdminCategoryPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminCategoryPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostRequestMultiError) AllErrors() []error { return m }

// AdminCategoryPostRequestValidationError is the validation error returned by
// AdminCategoryPostRequest.Validate if the designated constraints aren't met.
type AdminCategoryPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostRequestValidationError) ErrorName() string {
	return "AdminCategoryPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostRequestValidationError{}

// Validate checks the field values on AdminCategoryPostResponese with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostResponese) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostResponese with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCategoryPostResponeseMultiError, or nil if none found.
func (m *AdminCategoryPostResponese) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostResponese) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCategoryPostResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCategoryPostResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCategoryPostResponeseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminCategoryPostResponeseMultiError(errors)
	}

	return nil
}

// AdminCategoryPostResponeseMultiError is an error wrapping multiple
// validation errors returned by AdminCategoryPostResponese.ValidateAll() if
// the designated constraints aren't met.
type AdminCategoryPostResponeseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostResponeseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostResponeseMultiError) AllErrors() []error { return m }

// AdminCategoryPostResponeseValidationError is the validation error returned
// by AdminCategoryPostResponese.Validate if the designated constraints aren't met.
type AdminCategoryPostResponeseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostResponeseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostResponeseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostResponeseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostResponeseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostResponeseValidationError) ErrorName() string {
	return "AdminCategoryPostResponeseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostResponeseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostResponese.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostResponeseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostResponeseValidationError{}

// Validate checks the field values on AdminCategoryPostEditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostEditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCategoryPostEditRequestMultiError, or nil if none found.
func (m *AdminCategoryPostEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Fee

	// no validation rules for Url

	if len(errors) > 0 {
		return AdminCategoryPostEditRequestMultiError(errors)
	}

	return nil
}

// AdminCategoryPostEditRequestMultiError is an error wrapping multiple
// validation errors returned by AdminCategoryPostEditRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminCategoryPostEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostEditRequestMultiError) AllErrors() []error { return m }

// AdminCategoryPostEditRequestValidationError is the validation error returned
// by AdminCategoryPostEditRequest.Validate if the designated constraints
// aren't met.
type AdminCategoryPostEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostEditRequestValidationError) ErrorName() string {
	return "AdminCategoryPostEditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostEditRequestValidationError{}

// Validate checks the field values on AdminCategoryPostEditResponese with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostEditResponese) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostEditResponese with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostEditResponeseMultiError, or nil if none found.
func (m *AdminCategoryPostEditResponese) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostEditResponese) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCategoryPostEditResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCategoryPostEditResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCategoryPostEditResponeseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminCategoryPostEditResponeseMultiError(errors)
	}

	return nil
}

// AdminCategoryPostEditResponeseMultiError is an error wrapping multiple
// validation errors returned by AdminCategoryPostEditResponese.ValidateAll()
// if the designated constraints aren't met.
type AdminCategoryPostEditResponeseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostEditResponeseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostEditResponeseMultiError) AllErrors() []error { return m }

// AdminCategoryPostEditResponeseValidationError is the validation error
// returned by AdminCategoryPostEditResponese.Validate if the designated
// constraints aren't met.
type AdminCategoryPostEditResponeseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostEditResponeseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostEditResponeseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostEditResponeseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostEditResponeseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostEditResponeseValidationError) ErrorName() string {
	return "AdminCategoryPostEditResponeseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostEditResponeseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostEditResponese.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostEditResponeseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostEditResponeseValidationError{}

// Validate checks the field values on AdminCategoryPostDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostDeleteRequestMultiError, or nil if none found.
func (m *AdminCategoryPostDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return AdminCategoryPostDeleteRequestMultiError(errors)
	}

	return nil
}

// AdminCategoryPostDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by AdminCategoryPostDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminCategoryPostDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostDeleteRequestMultiError) AllErrors() []error { return m }

// AdminCategoryPostDeleteRequestValidationError is the validation error
// returned by AdminCategoryPostDeleteRequest.Validate if the designated
// constraints aren't met.
type AdminCategoryPostDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostDeleteRequestValidationError) ErrorName() string {
	return "AdminCategoryPostDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostDeleteRequestValidationError{}

// Validate checks the field values on AdminCategoryPostDeleteResponese with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminCategoryPostDeleteResponese) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostDeleteResponese with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostDeleteResponeseMultiError, or nil if none found.
func (m *AdminCategoryPostDeleteResponese) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostDeleteResponese) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCategoryPostDeleteResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCategoryPostDeleteResponeseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCategoryPostDeleteResponeseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminCategoryPostDeleteResponeseMultiError(errors)
	}

	return nil
}

// AdminCategoryPostDeleteResponeseMultiError is an error wrapping multiple
// validation errors returned by
// AdminCategoryPostDeleteResponese.ValidateAll() if the designated
// constraints aren't met.
type AdminCategoryPostDeleteResponeseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostDeleteResponeseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostDeleteResponeseMultiError) AllErrors() []error { return m }

// AdminCategoryPostDeleteResponeseValidationError is the validation error
// returned by AdminCategoryPostDeleteResponese.Validate if the designated
// constraints aren't met.
type AdminCategoryPostDeleteResponeseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostDeleteResponeseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostDeleteResponeseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostDeleteResponeseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostDeleteResponeseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostDeleteResponeseValidationError) ErrorName() string {
	return "AdminCategoryPostDeleteResponeseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostDeleteResponeseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostDeleteResponese.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostDeleteResponeseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostDeleteResponeseValidationError{}

// Validate checks the field values on AdminGroupGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupGetRequestMultiError, or nil if none found.
func (m *AdminGroupGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return AdminGroupGetRequestMultiError(errors)
	}

	return nil
}

// AdminGroupGetRequestMultiError is an error wrapping multiple validation
// errors returned by AdminGroupGetRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupGetRequestMultiError) AllErrors() []error { return m }

// AdminGroupGetRequestValidationError is the validation error returned by
// AdminGroupGetRequest.Validate if the designated constraints aren't met.
type AdminGroupGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupGetRequestValidationError) ErrorName() string {
	return "AdminGroupGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupGetRequestValidationError{}

// Validate checks the field values on AdminGroupGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupGetResponseMultiError, or nil if none found.
func (m *AdminGroupGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminGroupGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminGroupGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminGroupGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminGroupGetResponseMultiError(errors)
	}

	return nil
}

// AdminGroupGetResponseMultiError is an error wrapping multiple validation
// errors returned by AdminGroupGetResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupGetResponseMultiError) AllErrors() []error { return m }

// AdminGroupGetResponseValidationError is the validation error returned by
// AdminGroupGetResponse.Validate if the designated constraints aren't met.
type AdminGroupGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupGetResponseValidationError) ErrorName() string {
	return "AdminGroupGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupGetResponseValidationError{}

// Validate checks the field values on AdminGroupPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPostRequestMultiError, or nil if none found.
func (m *AdminGroupPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Name

	// no validation rules for Fee

	if len(errors) > 0 {
		return AdminGroupPostRequestMultiError(errors)
	}

	return nil
}

// AdminGroupPostRequestMultiError is an error wrapping multiple validation
// errors returned by AdminGroupPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPostRequestMultiError) AllErrors() []error { return m }

// AdminGroupPostRequestValidationError is the validation error returned by
// AdminGroupPostRequest.Validate if the designated constraints aren't met.
type AdminGroupPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPostRequestValidationError) ErrorName() string {
	return "AdminGroupPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPostRequestValidationError{}

// Validate checks the field values on AdminGroupPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPostResponseMultiError, or nil if none found.
func (m *AdminGroupPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminGroupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminGroupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminGroupPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminGroupPostResponseMultiError(errors)
	}

	return nil
}

// AdminGroupPostResponseMultiError is an error wrapping multiple validation
// errors returned by AdminGroupPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPostResponseMultiError) AllErrors() []error { return m }

// AdminGroupPostResponseValidationError is the validation error returned by
// AdminGroupPostResponse.Validate if the designated constraints aren't met.
type AdminGroupPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPostResponseValidationError) ErrorName() string {
	return "AdminGroupPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPostResponseValidationError{}

// Validate checks the field values on AdminGroupPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPutRequestMultiError, or nil if none found.
func (m *AdminGroupPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Name

	// no validation rules for Fee

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminGroupPutRequestMultiError(errors)
	}

	return nil
}

// AdminGroupPutRequestMultiError is an error wrapping multiple validation
// errors returned by AdminGroupPutRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPutRequestMultiError) AllErrors() []error { return m }

// AdminGroupPutRequestValidationError is the validation error returned by
// AdminGroupPutRequest.Validate if the designated constraints aren't met.
type AdminGroupPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPutRequestValidationError) ErrorName() string {
	return "AdminGroupPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPutRequestValidationError{}

// Validate checks the field values on AdminGroupPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPutResponseMultiError, or nil if none found.
func (m *AdminGroupPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminGroupPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminGroupPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminGroupPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminGroupPutResponseMultiError(errors)
	}

	return nil
}

// AdminGroupPutResponseMultiError is an error wrapping multiple validation
// errors returned by AdminGroupPutResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminGroupPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPutResponseMultiError) AllErrors() []error { return m }

// AdminGroupPutResponseValidationError is the validation error returned by
// AdminGroupPutResponse.Validate if the designated constraints aren't met.
type AdminGroupPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPutResponseValidationError) ErrorName() string {
	return "AdminGroupPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPutResponseValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Zipcode

	// no validation rules for Total

	// no validation rules for Image

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on AuthMailPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthMailPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthMailPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthMailPostRequestMultiError, or nil if none found.
func (m *AuthMailPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthMailPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mail

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AuthMailPostRequestMultiError(errors)
	}

	return nil
}

// AuthMailPostRequestMultiError is an error wrapping multiple validation
// errors returned by AuthMailPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthMailPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMailPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMailPostRequestMultiError) AllErrors() []error { return m }

// AuthMailPostRequestValidationError is the validation error returned by
// AuthMailPostRequest.Validate if the designated constraints aren't met.
type AuthMailPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthMailPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthMailPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthMailPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthMailPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthMailPostRequestValidationError) ErrorName() string {
	return "AuthMailPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthMailPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthMailPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthMailPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthMailPostRequestValidationError{}

// Validate checks the field values on AuthMailPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthMailPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthMailPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthMailPostResponseMultiError, or nil if none found.
func (m *AuthMailPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthMailPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthMailPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthMailPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthMailPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthMailPostResponseMultiError(errors)
	}

	return nil
}

// AuthMailPostResponseMultiError is an error wrapping multiple validation
// errors returned by AuthMailPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthMailPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMailPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMailPostResponseMultiError) AllErrors() []error { return m }

// AuthMailPostResponseValidationError is the validation error returned by
// AuthMailPostResponse.Validate if the designated constraints aren't met.
type AuthMailPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthMailPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthMailPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthMailPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthMailPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthMailPostResponseValidationError) ErrorName() string {
	return "AuthMailPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthMailPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthMailPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthMailPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthMailPostResponseValidationError{}

// Validate checks the field values on StripeSetupPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeSetupPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeSetupPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeSetupPostRequestMultiError, or nil if none found.
func (m *StripeSetupPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeSetupPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return StripeSetupPostRequestMultiError(errors)
	}

	return nil
}

// StripeSetupPostRequestMultiError is an error wrapping multiple validation
// errors returned by StripeSetupPostRequest.ValidateAll() if the designated
// constraints aren't met.
type StripeSetupPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeSetupPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeSetupPostRequestMultiError) AllErrors() []error { return m }

// StripeSetupPostRequestValidationError is the validation error returned by
// StripeSetupPostRequest.Validate if the designated constraints aren't met.
type StripeSetupPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeSetupPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeSetupPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeSetupPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeSetupPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeSetupPostRequestValidationError) ErrorName() string {
	return "StripeSetupPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StripeSetupPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeSetupPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeSetupPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeSetupPostRequestValidationError{}

// Validate checks the field values on StripeSetupPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeSetupPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeSetupPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeSetupPostResponseMultiError, or nil if none found.
func (m *StripeSetupPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeSetupPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StripeSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StripeSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StripeSetupPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StripeSetupPostResponseMultiError(errors)
	}

	return nil
}

// StripeSetupPostResponseMultiError is an error wrapping multiple validation
// errors returned by StripeSetupPostResponse.ValidateAll() if the designated
// constraints aren't met.
type StripeSetupPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeSetupPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeSetupPostResponseMultiError) AllErrors() []error { return m }

// StripeSetupPostResponseValidationError is the validation error returned by
// StripeSetupPostResponse.Validate if the designated constraints aren't met.
type StripeSetupPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeSetupPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeSetupPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeSetupPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeSetupPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeSetupPostResponseValidationError) ErrorName() string {
	return "StripeSetupPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StripeSetupPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeSetupPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeSetupPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeSetupPostResponseValidationError{}

// Validate checks the field values on BusinessPaymentMethodGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPaymentMethodGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodGetRequestMultiError, or nil if none found.
func (m *BusinessPaymentMethodGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessPaymentMethodGetRequestMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodGetRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessPaymentMethodGetRequest.ValidateAll()
// if the designated constraints aren't met.
type BusinessPaymentMethodGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodGetRequestMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodGetRequestValidationError is the validation error
// returned by BusinessPaymentMethodGetRequest.Validate if the designated
// constraints aren't met.
type BusinessPaymentMethodGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodGetRequestValidationError) ErrorName() string {
	return "BusinessPaymentMethodGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodGetRequestValidationError{}

// Validate checks the field values on BusinessPaymentMethodGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessPaymentMethodGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodGetResponseMultiError, or nil if none found.
func (m *BusinessPaymentMethodGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPaymentMethodGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPaymentMethodGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPaymentMethodGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPaymentMethodGetResponseMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessPaymentMethodGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodGetResponseMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodGetResponseValidationError is the validation error
// returned by BusinessPaymentMethodGetResponse.Validate if the designated
// constraints aren't met.
type BusinessPaymentMethodGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodGetResponseValidationError) ErrorName() string {
	return "BusinessPaymentMethodGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodGetResponseValidationError{}

// Validate checks the field values on BusinessPaymentMethodPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessPaymentMethodPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodPostRequestMultiError, or nil if none found.
func (m *BusinessPaymentMethodPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for PaymentMethodId

	if len(errors) > 0 {
		return BusinessPaymentMethodPostRequestMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodPostRequestMultiError is an error wrapping multiple
// validation errors returned by
// BusinessPaymentMethodPostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodPostRequestMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodPostRequestValidationError is the validation error
// returned by BusinessPaymentMethodPostRequest.Validate if the designated
// constraints aren't met.
type BusinessPaymentMethodPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodPostRequestValidationError) ErrorName() string {
	return "BusinessPaymentMethodPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodPostRequestValidationError{}

// Validate checks the field values on BusinessPaymentMethodPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessPaymentMethodPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodPostResponseMultiError, or nil if none found.
func (m *BusinessPaymentMethodPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPaymentMethodPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPaymentMethodPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPaymentMethodPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPaymentMethodPostResponseMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodPostResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessPaymentMethodPostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodPostResponseMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodPostResponseValidationError is the validation error
// returned by BusinessPaymentMethodPostResponse.Validate if the designated
// constraints aren't met.
type BusinessPaymentMethodPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodPostResponseValidationError) ErrorName() string {
	return "BusinessPaymentMethodPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodPostResponseValidationError{}

// Validate checks the field values on StripePaymentMethodPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripePaymentMethodPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodPostRequestMultiError, or nil if none found.
func (m *StripePaymentMethodPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for PaymentMethodId

	if len(errors) > 0 {
		return StripePaymentMethodPostRequestMultiError(errors)
	}

	return nil
}

// StripePaymentMethodPostRequestMultiError is an error wrapping multiple
// validation errors returned by StripePaymentMethodPostRequest.ValidateAll()
// if the designated constraints aren't met.
type StripePaymentMethodPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodPostRequestMultiError) AllErrors() []error { return m }

// StripePaymentMethodPostRequestValidationError is the validation error
// returned by StripePaymentMethodPostRequest.Validate if the designated
// constraints aren't met.
type StripePaymentMethodPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodPostRequestValidationError) ErrorName() string {
	return "StripePaymentMethodPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodPostRequestValidationError{}

// Validate checks the field values on StripePaymentMethodPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripePaymentMethodPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodPostResponseMultiError, or nil if none found.
func (m *StripePaymentMethodPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StripePaymentMethodPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StripePaymentMethodPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StripePaymentMethodPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StripePaymentMethodPostResponseMultiError(errors)
	}

	return nil
}

// StripePaymentMethodPostResponseMultiError is an error wrapping multiple
// validation errors returned by StripePaymentMethodPostResponse.ValidateAll()
// if the designated constraints aren't met.
type StripePaymentMethodPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodPostResponseMultiError) AllErrors() []error { return m }

// StripePaymentMethodPostResponseValidationError is the validation error
// returned by StripePaymentMethodPostResponse.Validate if the designated
// constraints aren't met.
type StripePaymentMethodPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodPostResponseValidationError) ErrorName() string {
	return "StripePaymentMethodPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodPostResponseValidationError{}

// Validate checks the field values on StripeKeyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeKeyGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeKeyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeKeyGetRequestMultiError, or nil if none found.
func (m *StripeKeyGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeKeyGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StripeKeyGetRequestMultiError(errors)
	}

	return nil
}

// StripeKeyGetRequestMultiError is an error wrapping multiple validation
// errors returned by StripeKeyGetRequest.ValidateAll() if the designated
// constraints aren't met.
type StripeKeyGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeKeyGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeKeyGetRequestMultiError) AllErrors() []error { return m }

// StripeKeyGetRequestValidationError is the validation error returned by
// StripeKeyGetRequest.Validate if the designated constraints aren't met.
type StripeKeyGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeKeyGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeKeyGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeKeyGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeKeyGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeKeyGetRequestValidationError) ErrorName() string {
	return "StripeKeyGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StripeKeyGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeKeyGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeKeyGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeKeyGetRequestValidationError{}

// Validate checks the field values on StripeKeyGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeKeyGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeKeyGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeKeyGetResponseMultiError, or nil if none found.
func (m *StripeKeyGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeKeyGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StripeKeyGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StripeKeyGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StripeKeyGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StripeKeyGetResponseMultiError(errors)
	}

	return nil
}

// StripeKeyGetResponseMultiError is an error wrapping multiple validation
// errors returned by StripeKeyGetResponse.ValidateAll() if the designated
// constraints aren't met.
type StripeKeyGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeKeyGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeKeyGetResponseMultiError) AllErrors() []error { return m }

// StripeKeyGetResponseValidationError is the validation error returned by
// StripeKeyGetResponse.Validate if the designated constraints aren't met.
type StripeKeyGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeKeyGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeKeyGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeKeyGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeKeyGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeKeyGetResponseValidationError) ErrorName() string {
	return "StripeKeyGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StripeKeyGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeKeyGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeKeyGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeKeyGetResponseValidationError{}

// Validate checks the field values on FeedbacksPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbacksPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbacksPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbacksPostRequestMultiError, or nil if none found.
func (m *FeedbacksPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbacksPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for OrderId

	// no validation rules for Rate

	// no validation rules for Comment

	// no validation rules for ServiceId

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return FeedbacksPostRequestMultiError(errors)
	}

	return nil
}

// FeedbacksPostRequestMultiError is an error wrapping multiple validation
// errors returned by FeedbacksPostRequest.ValidateAll() if the designated
// constraints aren't met.
type FeedbacksPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbacksPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbacksPostRequestMultiError) AllErrors() []error { return m }

// FeedbacksPostRequestValidationError is the validation error returned by
// FeedbacksPostRequest.Validate if the designated constraints aren't met.
type FeedbacksPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbacksPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbacksPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbacksPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbacksPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbacksPostRequestValidationError) ErrorName() string {
	return "FeedbacksPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbacksPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbacksPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbacksPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbacksPostRequestValidationError{}

// Validate checks the field values on FeedbacksPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbacksPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbacksPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbacksPostResponseMultiError, or nil if none found.
func (m *FeedbacksPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbacksPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbacksPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbacksPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbacksPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbacksPostResponseMultiError(errors)
	}

	return nil
}

// FeedbacksPostResponseMultiError is an error wrapping multiple validation
// errors returned by FeedbacksPostResponse.ValidateAll() if the designated
// constraints aren't met.
type FeedbacksPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbacksPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbacksPostResponseMultiError) AllErrors() []error { return m }

// FeedbacksPostResponseValidationError is the validation error returned by
// FeedbacksPostResponse.Validate if the designated constraints aren't met.
type FeedbacksPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbacksPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbacksPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbacksPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbacksPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbacksPostResponseValidationError) ErrorName() string {
	return "FeedbacksPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbacksPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbacksPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbacksPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbacksPostResponseValidationError{}

// Validate checks the field values on FeedbackPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackPutRequestMultiError, or nil if none found.
func (m *FeedbackPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	// no validation rules for Rate

	// no validation rules for Comment

	if len(errors) > 0 {
		return FeedbackPutRequestMultiError(errors)
	}

	return nil
}

// FeedbackPutRequestMultiError is an error wrapping multiple validation errors
// returned by FeedbackPutRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedbackPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackPutRequestMultiError) AllErrors() []error { return m }

// FeedbackPutRequestValidationError is the validation error returned by
// FeedbackPutRequest.Validate if the designated constraints aren't met.
type FeedbackPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackPutRequestValidationError) ErrorName() string {
	return "FeedbackPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackPutRequestValidationError{}

// Validate checks the field values on FeedbackPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackPutResponseMultiError, or nil if none found.
func (m *FeedbackPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbackPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbackPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbackPutResponseMultiError(errors)
	}

	return nil
}

// FeedbackPutResponseMultiError is an error wrapping multiple validation
// errors returned by FeedbackPutResponse.ValidateAll() if the designated
// constraints aren't met.
type FeedbackPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackPutResponseMultiError) AllErrors() []error { return m }

// FeedbackPutResponseValidationError is the validation error returned by
// FeedbackPutResponse.Validate if the designated constraints aren't met.
type FeedbackPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackPutResponseValidationError) ErrorName() string {
	return "FeedbackPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackPutResponseValidationError{}

// Validate checks the field values on FeedbackGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackGetRequestMultiError, or nil if none found.
func (m *FeedbackGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return FeedbackGetRequestMultiError(errors)
	}

	return nil
}

// FeedbackGetRequestMultiError is an error wrapping multiple validation errors
// returned by FeedbackGetRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedbackGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackGetRequestMultiError) AllErrors() []error { return m }

// FeedbackGetRequestValidationError is the validation error returned by
// FeedbackGetRequest.Validate if the designated constraints aren't met.
type FeedbackGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackGetRequestValidationError) ErrorName() string {
	return "FeedbackGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackGetRequestValidationError{}

// Validate checks the field values on FeedbackGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackGetResponseMultiError, or nil if none found.
func (m *FeedbackGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbackGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbackGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbackGetResponseMultiError(errors)
	}

	return nil
}

// FeedbackGetResponseMultiError is an error wrapping multiple validation
// errors returned by FeedbackGetResponse.ValidateAll() if the designated
// constraints aren't met.
type FeedbackGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackGetResponseMultiError) AllErrors() []error { return m }

// FeedbackGetResponseValidationError is the validation error returned by
// FeedbackGetResponse.Validate if the designated constraints aren't met.
type FeedbackGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackGetResponseValidationError) ErrorName() string {
	return "FeedbackGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackGetResponseValidationError{}

// Validate checks the field values on UpdateOrderStatusPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusPostRequestMultiError, or nil if none found.
func (m *UpdateOrderStatusPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for OrderId

	// no validation rules for XRole

	if len(errors) > 0 {
		return UpdateOrderStatusPostRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusPostRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderStatusPostRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrderStatusPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusPostRequestMultiError) AllErrors() []error { return m }

// UpdateOrderStatusPostRequestValidationError is the validation error returned
// by UpdateOrderStatusPostRequest.Validate if the designated constraints
// aren't met.
type UpdateOrderStatusPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusPostRequestValidationError) ErrorName() string {
	return "UpdateOrderStatusPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusPostRequestValidationError{}

// Validate checks the field values on UpdateOrderStatusPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusPostResponseMultiError, or nil if none found.
func (m *UpdateOrderStatusPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderStatusPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderStatusPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderStatusPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrderStatusPostResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusPostResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderStatusPostResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrderStatusPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusPostResponseMultiError) AllErrors() []error { return m }

// UpdateOrderStatusPostResponseValidationError is the validation error
// returned by UpdateOrderStatusPostResponse.Validate if the designated
// constraints aren't met.
type UpdateOrderStatusPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusPostResponseValidationError) ErrorName() string {
	return "UpdateOrderStatusPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusPostResponseValidationError{}

// Validate checks the field values on UpdateAllOrderStatusPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAllOrderStatusPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAllOrderStatusPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAllOrderStatusPostRequestMultiError, or nil if none found.
func (m *UpdateAllOrderStatusPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAllOrderStatusPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for XRole

	if len(errors) > 0 {
		return UpdateAllOrderStatusPostRequestMultiError(errors)
	}

	return nil
}

// UpdateAllOrderStatusPostRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAllOrderStatusPostRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAllOrderStatusPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAllOrderStatusPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAllOrderStatusPostRequestMultiError) AllErrors() []error { return m }

// UpdateAllOrderStatusPostRequestValidationError is the validation error
// returned by UpdateAllOrderStatusPostRequest.Validate if the designated
// constraints aren't met.
type UpdateAllOrderStatusPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAllOrderStatusPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAllOrderStatusPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAllOrderStatusPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAllOrderStatusPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAllOrderStatusPostRequestValidationError) ErrorName() string {
	return "UpdateAllOrderStatusPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAllOrderStatusPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAllOrderStatusPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAllOrderStatusPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAllOrderStatusPostRequestValidationError{}

// Validate checks the field values on UpdateAllOrderStatusPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateAllOrderStatusPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAllOrderStatusPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAllOrderStatusPostResponseMultiError, or nil if none found.
func (m *UpdateAllOrderStatusPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAllOrderStatusPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAllOrderStatusPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAllOrderStatusPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAllOrderStatusPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAllOrderStatusPostResponseMultiError(errors)
	}

	return nil
}

// UpdateAllOrderStatusPostResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAllOrderStatusPostResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAllOrderStatusPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAllOrderStatusPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAllOrderStatusPostResponseMultiError) AllErrors() []error { return m }

// UpdateAllOrderStatusPostResponseValidationError is the validation error
// returned by UpdateAllOrderStatusPostResponse.Validate if the designated
// constraints aren't met.
type UpdateAllOrderStatusPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAllOrderStatusPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAllOrderStatusPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAllOrderStatusPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAllOrderStatusPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAllOrderStatusPostResponseValidationError) ErrorName() string {
	return "UpdateAllOrderStatusPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAllOrderStatusPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAllOrderStatusPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAllOrderStatusPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAllOrderStatusPostResponseValidationError{}

// Validate checks the field values on CategoryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetRequestMultiError, or nil if none found.
func (m *CategoryGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryGetRequestMultiError(errors)
	}

	return nil
}

// CategoryGetRequestMultiError is an error wrapping multiple validation errors
// returned by CategoryGetRequest.ValidateAll() if the designated constraints
// aren't met.
type CategoryGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetRequestMultiError) AllErrors() []error { return m }

// CategoryGetRequestValidationError is the validation error returned by
// CategoryGetRequest.Validate if the designated constraints aren't met.
type CategoryGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetRequestValidationError) ErrorName() string {
	return "CategoryGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetRequestValidationError{}

// Validate checks the field values on CategoryGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetResponseMultiError, or nil if none found.
func (m *CategoryGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryGetResponseMultiError(errors)
	}

	return nil
}

// CategoryGetResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetResponseMultiError) AllErrors() []error { return m }

// CategoryGetResponseValidationError is the validation error returned by
// CategoryGetResponse.Validate if the designated constraints aren't met.
type CategoryGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetResponseValidationError) ErrorName() string {
	return "CategoryGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetResponseValidationError{}

// Validate checks the field values on OrdersPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrdersPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersPostRequestMultiError, or nil if none found.
func (m *OrdersPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Zipcode

	// no validation rules for XUserId

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return OrdersPostRequestMultiError(errors)
	}

	return nil
}

// OrdersPostRequestMultiError is an error wrapping multiple validation errors
// returned by OrdersPostRequest.ValidateAll() if the designated constraints
// aren't met.
type OrdersPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersPostRequestMultiError) AllErrors() []error { return m }

// OrdersPostRequestValidationError is the validation error returned by
// OrdersPostRequest.Validate if the designated constraints aren't met.
type OrdersPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersPostRequestValidationError) ErrorName() string {
	return "OrdersPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrdersPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersPostRequestValidationError{}

// Validate checks the field values on OrdersPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrdersPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersPostResponseMultiError, or nil if none found.
func (m *OrdersPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrdersPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrdersPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrdersPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrdersPostResponseMultiError(errors)
	}

	return nil
}

// OrdersPostResponseMultiError is an error wrapping multiple validation errors
// returned by OrdersPostResponse.ValidateAll() if the designated constraints
// aren't met.
type OrdersPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersPostResponseMultiError) AllErrors() []error { return m }

// OrdersPostResponseValidationError is the validation error returned by
// OrdersPostResponse.Validate if the designated constraints aren't met.
type OrdersPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersPostResponseValidationError) ErrorName() string {
	return "OrdersPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrdersPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersPostResponseValidationError{}

// Validate checks the field values on BusinessRatingGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessRatingGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessRatingGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessRatingGetRequestMultiError, or nil if none found.
func (m *BusinessRatingGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessRatingGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BusinessRatingGetRequestMultiError(errors)
	}

	return nil
}

// BusinessRatingGetRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessRatingGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessRatingGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessRatingGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessRatingGetRequestMultiError) AllErrors() []error { return m }

// BusinessRatingGetRequestValidationError is the validation error returned by
// BusinessRatingGetRequest.Validate if the designated constraints aren't met.
type BusinessRatingGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessRatingGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessRatingGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessRatingGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessRatingGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessRatingGetRequestValidationError) ErrorName() string {
	return "BusinessRatingGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessRatingGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessRatingGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessRatingGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessRatingGetRequestValidationError{}

// Validate checks the field values on BusinessRatingGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessRatingGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessRatingGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessRatingGetResponseMultiError, or nil if none found.
func (m *BusinessRatingGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessRatingGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessRatingGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessRatingGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessRatingGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessRatingGetResponseMultiError(errors)
	}

	return nil
}

// BusinessRatingGetResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessRatingGetResponse.ValidateAll() if the
// designated constraints aren't met.
type BusinessRatingGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessRatingGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessRatingGetResponseMultiError) AllErrors() []error { return m }

// BusinessRatingGetResponseValidationError is the validation error returned by
// BusinessRatingGetResponse.Validate if the designated constraints aren't met.
type BusinessRatingGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessRatingGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessRatingGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessRatingGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessRatingGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessRatingGetResponseValidationError) ErrorName() string {
	return "BusinessRatingGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessRatingGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessRatingGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessRatingGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessRatingGetResponseValidationError{}

// Validate checks the field values on BusinessFeedbacksGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessFeedbacksGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFeedbacksGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessFeedbacksGetRequestMultiError, or nil if none found.
func (m *BusinessFeedbacksGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFeedbacksGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for Rate

	if len(errors) > 0 {
		return BusinessFeedbacksGetRequestMultiError(errors)
	}

	return nil
}

// BusinessFeedbacksGetRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessFeedbacksGetRequest.ValidateAll() if
// the designated constraints aren't met.
type BusinessFeedbacksGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFeedbacksGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFeedbacksGetRequestMultiError) AllErrors() []error { return m }

// BusinessFeedbacksGetRequestValidationError is the validation error returned
// by BusinessFeedbacksGetRequest.Validate if the designated constraints
// aren't met.
type BusinessFeedbacksGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFeedbacksGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFeedbacksGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFeedbacksGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFeedbacksGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFeedbacksGetRequestValidationError) ErrorName() string {
	return "BusinessFeedbacksGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFeedbacksGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFeedbacksGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFeedbacksGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFeedbacksGetRequestValidationError{}

// Validate checks the field values on BusinessFeedbacksGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessFeedbacksGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFeedbacksGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessFeedbacksGetResponseMultiError, or nil if none found.
func (m *BusinessFeedbacksGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFeedbacksGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessFeedbacksGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessFeedbacksGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessFeedbacksGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessFeedbacksGetResponseMultiError(errors)
	}

	return nil
}

// BusinessFeedbacksGetResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessFeedbacksGetResponse.ValidateAll() if
// the designated constraints aren't met.
type BusinessFeedbacksGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFeedbacksGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFeedbacksGetResponseMultiError) AllErrors() []error { return m }

// BusinessFeedbacksGetResponseValidationError is the validation error returned
// by BusinessFeedbacksGetResponse.Validate if the designated constraints
// aren't met.
type BusinessFeedbacksGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFeedbacksGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFeedbacksGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFeedbacksGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFeedbacksGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFeedbacksGetResponseValidationError) ErrorName() string {
	return "BusinessFeedbacksGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFeedbacksGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFeedbacksGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFeedbacksGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFeedbacksGetResponseValidationError{}

// Validate checks the field values on BusinessServicesPutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessServicesPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServicesPutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessServicesPutRequestMultiError, or nil if none found.
func (m *BusinessServicesPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServicesPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessServicesPutRequestMultiError(errors)
	}

	return nil
}

// BusinessServicesPutRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessServicesPutRequest.ValidateAll() if
// the designated constraints aren't met.
type BusinessServicesPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServicesPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServicesPutRequestMultiError) AllErrors() []error { return m }

// BusinessServicesPutRequestValidationError is the validation error returned
// by BusinessServicesPutRequest.Validate if the designated constraints aren't met.
type BusinessServicesPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServicesPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServicesPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServicesPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServicesPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServicesPutRequestValidationError) ErrorName() string {
	return "BusinessServicesPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServicesPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServicesPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServicesPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServicesPutRequestValidationError{}

// Validate checks the field values on BusinessServicesPutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessServicesPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServicesPutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessServicesPutResponseMultiError, or nil if none found.
func (m *BusinessServicesPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServicesPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessServicesPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessServicesPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessServicesPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessServicesPutResponseMultiError(errors)
	}

	return nil
}

// BusinessServicesPutResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessServicesPutResponse.ValidateAll() if
// the designated constraints aren't met.
type BusinessServicesPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServicesPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServicesPutResponseMultiError) AllErrors() []error { return m }

// BusinessServicesPutResponseValidationError is the validation error returned
// by BusinessServicesPutResponse.Validate if the designated constraints
// aren't met.
type BusinessServicesPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServicesPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServicesPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServicesPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServicesPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServicesPutResponseValidationError) ErrorName() string {
	return "BusinessServicesPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServicesPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServicesPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServicesPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServicesPutResponseValidationError{}

// Validate checks the field values on CategoriesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoriesGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoriesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoriesGetRequestMultiError, or nil if none found.
func (m *CategoriesGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoriesGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Name

	if len(errors) > 0 {
		return CategoriesGetRequestMultiError(errors)
	}

	return nil
}

// CategoriesGetRequestMultiError is an error wrapping multiple validation
// errors returned by CategoriesGetRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoriesGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesGetRequestMultiError) AllErrors() []error { return m }

// CategoriesGetRequestValidationError is the validation error returned by
// CategoriesGetRequest.Validate if the designated constraints aren't met.
type CategoriesGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesGetRequestValidationError) ErrorName() string {
	return "CategoriesGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoriesGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoriesGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesGetRequestValidationError{}

// Validate checks the field values on CategoriesGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoriesGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoriesGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoriesGetResponseMultiError, or nil if none found.
func (m *CategoriesGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoriesGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoriesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoriesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoriesGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoriesGetResponseMultiError(errors)
	}

	return nil
}

// CategoriesGetResponseMultiError is an error wrapping multiple validation
// errors returned by CategoriesGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoriesGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesGetResponseMultiError) AllErrors() []error { return m }

// CategoriesGetResponseValidationError is the validation error returned by
// CategoriesGetResponse.Validate if the designated constraints aren't met.
type CategoriesGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesGetResponseValidationError) ErrorName() string {
	return "CategoriesGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoriesGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoriesGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesGetResponseValidationError{}

// Validate checks the field values on BusinessesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessesGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessesGetRequestMultiError, or nil if none found.
func (m *BusinessesGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	// no validation rules for Zipcode

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for Mail

	// no validation rules for Phone

	// no validation rules for Query

	if len(errors) > 0 {
		return BusinessesGetRequestMultiError(errors)
	}

	return nil
}

// BusinessesGetRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessesGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessesGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesGetRequestMultiError) AllErrors() []error { return m }

// BusinessesGetRequestValidationError is the validation error returned by
// BusinessesGetRequest.Validate if the designated constraints aren't met.
type BusinessesGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesGetRequestValidationError) ErrorName() string {
	return "BusinessesGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesGetRequestValidationError{}

// Validate checks the field values on BusinessesGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessesGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessesGetResponseMultiError, or nil if none found.
func (m *BusinessesGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessesGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessesGetResponseMultiError(errors)
	}

	return nil
}

// BusinessesGetResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessesGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessesGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesGetResponseMultiError) AllErrors() []error { return m }

// BusinessesGetResponseValidationError is the validation error returned by
// BusinessesGetResponse.Validate if the designated constraints aren't met.
type BusinessesGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesGetResponseValidationError) ErrorName() string {
	return "BusinessesGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesGetResponseValidationError{}

// Validate checks the field values on AuthCheckGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCheckGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCheckGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCheckGetRequestMultiError, or nil if none found.
func (m *AuthCheckGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCheckGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	if len(errors) > 0 {
		return AuthCheckGetRequestMultiError(errors)
	}

	return nil
}

// AuthCheckGetRequestMultiError is an error wrapping multiple validation
// errors returned by AuthCheckGetRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthCheckGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCheckGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCheckGetRequestMultiError) AllErrors() []error { return m }

// AuthCheckGetRequestValidationError is the validation error returned by
// AuthCheckGetRequest.Validate if the designated constraints aren't met.
type AuthCheckGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCheckGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCheckGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCheckGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCheckGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCheckGetRequestValidationError) ErrorName() string {
	return "AuthCheckGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCheckGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCheckGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCheckGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCheckGetRequestValidationError{}

// Validate checks the field values on AuthCheckGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCheckGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCheckGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCheckGetResponseMultiError, or nil if none found.
func (m *AuthCheckGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCheckGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthCheckGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthCheckGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthCheckGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthCheckGetResponseMultiError(errors)
	}

	return nil
}

// AuthCheckGetResponseMultiError is an error wrapping multiple validation
// errors returned by AuthCheckGetResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthCheckGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCheckGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCheckGetResponseMultiError) AllErrors() []error { return m }

// AuthCheckGetResponseValidationError is the validation error returned by
// AuthCheckGetResponse.Validate if the designated constraints aren't met.
type AuthCheckGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCheckGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCheckGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCheckGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCheckGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCheckGetResponseValidationError) ErrorName() string {
	return "AuthCheckGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCheckGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCheckGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCheckGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCheckGetResponseValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for Total

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for TotalProvider

	// no validation rules for Fee

	// no validation rules for Image

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on BusinessServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessServiceGetRequestMultiError, or nil if none found.
func (m *BusinessServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BusinessServiceGetRequestMultiError(errors)
	}

	return nil
}

// BusinessServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessServiceGetRequest.ValidateAll() if the
// designated constraints aren't met.
type BusinessServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServiceGetRequestMultiError) AllErrors() []error { return m }

// BusinessServiceGetRequestValidationError is the validation error returned by
// BusinessServiceGetRequest.Validate if the designated constraints aren't met.
type BusinessServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServiceGetRequestValidationError) ErrorName() string {
	return "BusinessServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServiceGetRequestValidationError{}

// Validate checks the field values on BusinessServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessServiceGetResponseMultiError, or nil if none found.
func (m *BusinessServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessServiceGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessServiceGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessServiceGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessServiceGetResponseMultiError(errors)
	}

	return nil
}

// BusinessServiceGetResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessServiceGetResponse.ValidateAll() if
// the designated constraints aren't met.
type BusinessServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServiceGetResponseMultiError) AllErrors() []error { return m }

// BusinessServiceGetResponseValidationError is the validation error returned
// by BusinessServiceGetResponse.Validate if the designated constraints aren't met.
type BusinessServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServiceGetResponseValidationError) ErrorName() string {
	return "BusinessServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServiceGetResponseValidationError{}

// Validate checks the field values on BusinessNearGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessNearGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessNearGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessNearGetRequestMultiError, or nil if none found.
func (m *BusinessNearGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessNearGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessNearGetRequestMultiError(errors)
	}

	return nil
}

// BusinessNearGetRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessNearGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessNearGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessNearGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessNearGetRequestMultiError) AllErrors() []error { return m }

// BusinessNearGetRequestValidationError is the validation error returned by
// BusinessNearGetRequest.Validate if the designated constraints aren't met.
type BusinessNearGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessNearGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessNearGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessNearGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessNearGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessNearGetRequestValidationError) ErrorName() string {
	return "BusinessNearGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessNearGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessNearGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessNearGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessNearGetRequestValidationError{}

// Validate checks the field values on BusinessNearGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessNearGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessNearGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessNearGetResponseMultiError, or nil if none found.
func (m *BusinessNearGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessNearGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessNearGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessNearGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessNearGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessNearGetResponseMultiError(errors)
	}

	return nil
}

// BusinessNearGetResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessNearGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessNearGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessNearGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessNearGetResponseMultiError) AllErrors() []error { return m }

// BusinessNearGetResponseValidationError is the validation error returned by
// BusinessNearGetResponse.Validate if the designated constraints aren't met.
type BusinessNearGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessNearGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessNearGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessNearGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessNearGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessNearGetResponseValidationError) ErrorName() string {
	return "BusinessNearGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessNearGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessNearGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessNearGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessNearGetResponseValidationError{}

// Validate checks the field values on OrdersGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrdersGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersGetRequestMultiError, or nil if none found.
func (m *OrdersGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Status

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for ServiceId

	// no validation rules for Zipcode

	if len(errors) > 0 {
		return OrdersGetRequestMultiError(errors)
	}

	return nil
}

// OrdersGetRequestMultiError is an error wrapping multiple validation errors
// returned by OrdersGetRequest.ValidateAll() if the designated constraints
// aren't met.
type OrdersGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersGetRequestMultiError) AllErrors() []error { return m }

// OrdersGetRequestValidationError is the validation error returned by
// OrdersGetRequest.Validate if the designated constraints aren't met.
type OrdersGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersGetRequestValidationError) ErrorName() string { return "OrdersGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrdersGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersGetRequestValidationError{}

// Validate checks the field values on OrdersGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrdersGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersGetResponseMultiError, or nil if none found.
func (m *OrdersGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrdersGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrdersGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrdersGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrdersGetResponseMultiError(errors)
	}

	return nil
}

// OrdersGetResponseMultiError is an error wrapping multiple validation errors
// returned by OrdersGetResponse.ValidateAll() if the designated constraints
// aren't met.
type OrdersGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersGetResponseMultiError) AllErrors() []error { return m }

// OrdersGetResponseValidationError is the validation error returned by
// OrdersGetResponse.Validate if the designated constraints aren't met.
type OrdersGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersGetResponseValidationError) ErrorName() string {
	return "OrdersGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrdersGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersGetResponseValidationError{}

// Validate checks the field values on BusinessInterestGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessInterestGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessInterestGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessInterestGetRequestMultiError, or nil if none found.
func (m *BusinessInterestGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInterestGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessInterestGetRequestMultiError(errors)
	}

	return nil
}

// BusinessInterestGetRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessInterestGetRequest.ValidateAll() if
// the designated constraints aren't met.
type BusinessInterestGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInterestGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInterestGetRequestMultiError) AllErrors() []error { return m }

// BusinessInterestGetRequestValidationError is the validation error returned
// by BusinessInterestGetRequest.Validate if the designated constraints aren't met.
type BusinessInterestGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInterestGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInterestGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInterestGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInterestGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInterestGetRequestValidationError) ErrorName() string {
	return "BusinessInterestGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInterestGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInterestGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInterestGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInterestGetRequestValidationError{}

// Validate checks the field values on BusinessInterestGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessInterestGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessInterestGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessInterestGetResponseMultiError, or nil if none found.
func (m *BusinessInterestGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInterestGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessInterestGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessInterestGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessInterestGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessInterestGetResponseMultiError(errors)
	}

	return nil
}

// BusinessInterestGetResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessInterestGetResponse.ValidateAll() if
// the designated constraints aren't met.
type BusinessInterestGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInterestGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInterestGetResponseMultiError) AllErrors() []error { return m }

// BusinessInterestGetResponseValidationError is the validation error returned
// by BusinessInterestGetResponse.Validate if the designated constraints
// aren't met.
type BusinessInterestGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInterestGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInterestGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInterestGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInterestGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInterestGetResponseValidationError) ErrorName() string {
	return "BusinessInterestGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInterestGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInterestGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInterestGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInterestGetResponseValidationError{}

// Validate checks the field values on UploadUrlPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadUrlPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadUrlPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadUrlPostRequestMultiError, or nil if none found.
func (m *UploadUrlPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadUrlPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Filename

	// no validation rules for ContentLength

	if len(errors) > 0 {
		return UploadUrlPostRequestMultiError(errors)
	}

	return nil
}

// UploadUrlPostRequestMultiError is an error wrapping multiple validation
// errors returned by UploadUrlPostRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadUrlPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadUrlPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadUrlPostRequestMultiError) AllErrors() []error { return m }

// UploadUrlPostRequestValidationError is the validation error returned by
// UploadUrlPostRequest.Validate if the designated constraints aren't met.
type UploadUrlPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadUrlPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadUrlPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadUrlPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadUrlPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadUrlPostRequestValidationError) ErrorName() string {
	return "UploadUrlPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadUrlPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadUrlPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadUrlPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadUrlPostRequestValidationError{}

// Validate checks the field values on UploadUrlPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadUrlPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadUrlPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadUrlPostResponseMultiError, or nil if none found.
func (m *UploadUrlPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadUrlPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadUrlPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadUrlPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadUrlPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadUrlPostResponseMultiError(errors)
	}

	return nil
}

// UploadUrlPostResponseMultiError is an error wrapping multiple validation
// errors returned by UploadUrlPostResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadUrlPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadUrlPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadUrlPostResponseMultiError) AllErrors() []error { return m }

// UploadUrlPostResponseValidationError is the validation error returned by
// UploadUrlPostResponse.Validate if the designated constraints aren't met.
type UploadUrlPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadUrlPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadUrlPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadUrlPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadUrlPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadUrlPostResponseValidationError) ErrorName() string {
	return "UploadUrlPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadUrlPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadUrlPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadUrlPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadUrlPostResponseValidationError{}

// Validate checks the field values on AdminBanUserPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBanUserPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBanUserPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBanUserPostRequestMultiError, or nil if none found.
func (m *AdminBanUserPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBanUserPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AdminBanUserPostRequestMultiError(errors)
	}

	return nil
}

// AdminBanUserPostRequestMultiError is an error wrapping multiple validation
// errors returned by AdminBanUserPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminBanUserPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBanUserPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBanUserPostRequestMultiError) AllErrors() []error { return m }

// AdminBanUserPostRequestValidationError is the validation error returned by
// AdminBanUserPostRequest.Validate if the designated constraints aren't met.
type AdminBanUserPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBanUserPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBanUserPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBanUserPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBanUserPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBanUserPostRequestValidationError) ErrorName() string {
	return "AdminBanUserPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBanUserPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBanUserPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBanUserPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBanUserPostRequestValidationError{}

// Validate checks the field values on AdminBanUserPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBanUserPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBanUserPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBanUserPostResponseMultiError, or nil if none found.
func (m *AdminBanUserPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBanUserPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBanUserPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBanUserPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBanUserPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBanUserPostResponseMultiError(errors)
	}

	return nil
}

// AdminBanUserPostResponseMultiError is an error wrapping multiple validation
// errors returned by AdminBanUserPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminBanUserPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBanUserPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBanUserPostResponseMultiError) AllErrors() []error { return m }

// AdminBanUserPostResponseValidationError is the validation error returned by
// AdminBanUserPostResponse.Validate if the designated constraints aren't met.
type AdminBanUserPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBanUserPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBanUserPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBanUserPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBanUserPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBanUserPostResponseValidationError) ErrorName() string {
	return "AdminBanUserPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBanUserPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBanUserPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBanUserPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBanUserPostResponseValidationError{}

// Validate checks the field values on AdminUsersUnbanPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersUnbanPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersUnbanPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersUnbanPostRequestMultiError, or nil if none found.
func (m *AdminUsersUnbanPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersUnbanPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AdminUsersUnbanPostRequestMultiError(errors)
	}

	return nil
}

// AdminUsersUnbanPostRequestMultiError is an error wrapping multiple
// validation errors returned by AdminUsersUnbanPostRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminUsersUnbanPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersUnbanPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersUnbanPostRequestMultiError) AllErrors() []error { return m }

// AdminUsersUnbanPostRequestValidationError is the validation error returned
// by AdminUsersUnbanPostRequest.Validate if the designated constraints aren't met.
type AdminUsersUnbanPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersUnbanPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersUnbanPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersUnbanPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersUnbanPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersUnbanPostRequestValidationError) ErrorName() string {
	return "AdminUsersUnbanPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersUnbanPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersUnbanPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersUnbanPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersUnbanPostRequestValidationError{}

// Validate checks the field values on AdminUsersUnbanPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersUnbanPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersUnbanPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersUnbanPostResponseMultiError, or nil if none found.
func (m *AdminUsersUnbanPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersUnbanPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUsersUnbanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUsersUnbanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUsersUnbanPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUsersUnbanPostResponseMultiError(errors)
	}

	return nil
}

// AdminUsersUnbanPostResponseMultiError is an error wrapping multiple
// validation errors returned by AdminUsersUnbanPostResponse.ValidateAll() if
// the designated constraints aren't met.
type AdminUsersUnbanPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersUnbanPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersUnbanPostResponseMultiError) AllErrors() []error { return m }

// AdminUsersUnbanPostResponseValidationError is the validation error returned
// by AdminUsersUnbanPostResponse.Validate if the designated constraints
// aren't met.
type AdminUsersUnbanPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersUnbanPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersUnbanPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersUnbanPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersUnbanPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersUnbanPostResponseValidationError) ErrorName() string {
	return "AdminUsersUnbanPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersUnbanPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersUnbanPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersUnbanPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersUnbanPostResponseValidationError{}

// Validate checks the field values on AdminUsersDeletePostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersDeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersDeletePostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersDeletePostRequestMultiError, or nil if none found.
func (m *AdminUsersDeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersDeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AdminUsersDeletePostRequestMultiError(errors)
	}

	return nil
}

// AdminUsersDeletePostRequestMultiError is an error wrapping multiple
// validation errors returned by AdminUsersDeletePostRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminUsersDeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersDeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersDeletePostRequestMultiError) AllErrors() []error { return m }

// AdminUsersDeletePostRequestValidationError is the validation error returned
// by AdminUsersDeletePostRequest.Validate if the designated constraints
// aren't met.
type AdminUsersDeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersDeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersDeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersDeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersDeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersDeletePostRequestValidationError) ErrorName() string {
	return "AdminUsersDeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersDeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersDeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersDeletePostRequestValidationError{}

// Validate checks the field values on AdminUsersDeletePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersDeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersDeletePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersDeletePostResponseMultiError, or nil if none found.
func (m *AdminUsersDeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersDeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUsersDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUsersDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUsersDeletePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUsersDeletePostResponseMultiError(errors)
	}

	return nil
}

// AdminUsersDeletePostResponseMultiError is an error wrapping multiple
// validation errors returned by AdminUsersDeletePostResponse.ValidateAll() if
// the designated constraints aren't met.
type AdminUsersDeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersDeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersDeletePostResponseMultiError) AllErrors() []error { return m }

// AdminUsersDeletePostResponseValidationError is the validation error returned
// by AdminUsersDeletePostResponse.Validate if the designated constraints
// aren't met.
type AdminUsersDeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersDeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersDeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersDeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersDeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersDeletePostResponseValidationError) ErrorName() string {
	return "AdminUsersDeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersDeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersDeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersDeletePostResponseValidationError{}

// Validate checks the field values on AdminBusinessesUnbanPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessesUnbanPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesUnbanPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBusinessesUnbanPostRequestMultiError, or nil if none found.
func (m *AdminBusinessesUnbanPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesUnbanPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AdminBusinessesUnbanPostRequestMultiError(errors)
	}

	return nil
}

// AdminBusinessesUnbanPostRequestMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessesUnbanPostRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminBusinessesUnbanPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesUnbanPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesUnbanPostRequestMultiError) AllErrors() []error { return m }

// AdminBusinessesUnbanPostRequestValidationError is the validation error
// returned by AdminBusinessesUnbanPostRequest.Validate if the designated
// constraints aren't met.
type AdminBusinessesUnbanPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesUnbanPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesUnbanPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesUnbanPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesUnbanPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesUnbanPostRequestValidationError) ErrorName() string {
	return "AdminBusinessesUnbanPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesUnbanPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesUnbanPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesUnbanPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesUnbanPostRequestValidationError{}

// Validate checks the field values on AdminBusinessesUnbanPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminBusinessesUnbanPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesUnbanPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBusinessesUnbanPostResponseMultiError, or nil if none found.
func (m *AdminBusinessesUnbanPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesUnbanPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBusinessesUnbanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBusinessesUnbanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBusinessesUnbanPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBusinessesUnbanPostResponseMultiError(errors)
	}

	return nil
}

// AdminBusinessesUnbanPostResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminBusinessesUnbanPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminBusinessesUnbanPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesUnbanPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesUnbanPostResponseMultiError) AllErrors() []error { return m }

// AdminBusinessesUnbanPostResponseValidationError is the validation error
// returned by AdminBusinessesUnbanPostResponse.Validate if the designated
// constraints aren't met.
type AdminBusinessesUnbanPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesUnbanPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesUnbanPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesUnbanPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesUnbanPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesUnbanPostResponseValidationError) ErrorName() string {
	return "AdminBusinessesUnbanPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesUnbanPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesUnbanPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesUnbanPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesUnbanPostResponseValidationError{}

// Validate checks the field values on AuthForgotResetPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgotResetPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotResetPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgotResetPostRequestMultiError, or nil if none found.
func (m *AuthForgotResetPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotResetPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	// no validation rules for EncryptedPrivateKey

	// no validation rules for PublicKey

	// no validation rules for Otp

	if len(errors) > 0 {
		return AuthForgotResetPostRequestMultiError(errors)
	}

	return nil
}

// AuthForgotResetPostRequestMultiError is an error wrapping multiple
// validation errors returned by AuthForgotResetPostRequest.ValidateAll() if
// the designated constraints aren't met.
type AuthForgotResetPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotResetPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotResetPostRequestMultiError) AllErrors() []error { return m }

// AuthForgotResetPostRequestValidationError is the validation error returned
// by AuthForgotResetPostRequest.Validate if the designated constraints aren't met.
type AuthForgotResetPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotResetPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotResetPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotResetPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotResetPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotResetPostRequestValidationError) ErrorName() string {
	return "AuthForgotResetPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotResetPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotResetPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotResetPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotResetPostRequestValidationError{}

// Validate checks the field values on AuthForgotResetPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgotResetPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotResetPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgotResetPostResponseMultiError, or nil if none found.
func (m *AuthForgotResetPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotResetPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthForgotResetPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthForgotResetPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthForgotResetPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthForgotResetPostResponseMultiError(errors)
	}

	return nil
}

// AuthForgotResetPostResponseMultiError is an error wrapping multiple
// validation errors returned by AuthForgotResetPostResponse.ValidateAll() if
// the designated constraints aren't met.
type AuthForgotResetPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotResetPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotResetPostResponseMultiError) AllErrors() []error { return m }

// AuthForgotResetPostResponseValidationError is the validation error returned
// by AuthForgotResetPostResponse.Validate if the designated constraints
// aren't met.
type AuthForgotResetPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotResetPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotResetPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotResetPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotResetPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotResetPostResponseValidationError) ErrorName() string {
	return "AuthForgotResetPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotResetPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotResetPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotResetPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotResetPostResponseValidationError{}

// Validate checks the field values on AuthChangeMailAndPassPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthChangeMailAndPassPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthChangeMailAndPassPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthChangeMailAndPassPostRequestMultiError, or nil if none found.
func (m *AuthChangeMailAndPassPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthChangeMailAndPassPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mail

	// no validation rules for EncryptedPrivateKey

	// no validation rules for XUserId

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return AuthChangeMailAndPassPostRequestMultiError(errors)
	}

	return nil
}

// AuthChangeMailAndPassPostRequestMultiError is an error wrapping multiple
// validation errors returned by
// AuthChangeMailAndPassPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthChangeMailAndPassPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthChangeMailAndPassPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthChangeMailAndPassPostRequestMultiError) AllErrors() []error { return m }

// AuthChangeMailAndPassPostRequestValidationError is the validation error
// returned by AuthChangeMailAndPassPostRequest.Validate if the designated
// constraints aren't met.
type AuthChangeMailAndPassPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthChangeMailAndPassPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthChangeMailAndPassPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthChangeMailAndPassPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthChangeMailAndPassPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthChangeMailAndPassPostRequestValidationError) ErrorName() string {
	return "AuthChangeMailAndPassPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthChangeMailAndPassPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthChangeMailAndPassPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthChangeMailAndPassPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthChangeMailAndPassPostRequestValidationError{}

// Validate checks the field values on AuthChangeMailAndPassPostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthChangeMailAndPassPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthChangeMailAndPassPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthChangeMailAndPassPostResponseMultiError, or nil if none found.
func (m *AuthChangeMailAndPassPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthChangeMailAndPassPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthChangeMailAndPassPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthChangeMailAndPassPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthChangeMailAndPassPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthChangeMailAndPassPostResponseMultiError(errors)
	}

	return nil
}

// AuthChangeMailAndPassPostResponseMultiError is an error wrapping multiple
// validation errors returned by
// AuthChangeMailAndPassPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthChangeMailAndPassPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthChangeMailAndPassPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthChangeMailAndPassPostResponseMultiError) AllErrors() []error { return m }

// AuthChangeMailAndPassPostResponseValidationError is the validation error
// returned by AuthChangeMailAndPassPostResponse.Validate if the designated
// constraints aren't met.
type AuthChangeMailAndPassPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthChangeMailAndPassPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthChangeMailAndPassPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthChangeMailAndPassPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthChangeMailAndPassPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthChangeMailAndPassPostResponseValidationError) ErrorName() string {
	return "AuthChangeMailAndPassPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthChangeMailAndPassPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthChangeMailAndPassPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthChangeMailAndPassPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthChangeMailAndPassPostResponseValidationError{}

// Validate checks the field values on AuthForgotPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgotPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgotPostRequestMultiError, or nil if none found.
func (m *AuthForgotPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mail

	if len(errors) > 0 {
		return AuthForgotPostRequestMultiError(errors)
	}

	return nil
}

// AuthForgotPostRequestMultiError is an error wrapping multiple validation
// errors returned by AuthForgotPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthForgotPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotPostRequestMultiError) AllErrors() []error { return m }

// AuthForgotPostRequestValidationError is the validation error returned by
// AuthForgotPostRequest.Validate if the designated constraints aren't met.
type AuthForgotPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotPostRequestValidationError) ErrorName() string {
	return "AuthForgotPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotPostRequestValidationError{}

// Validate checks the field values on AuthForgotPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgotPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgotPostResponseMultiError, or nil if none found.
func (m *AuthForgotPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthForgotPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthForgotPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthForgotPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthForgotPostResponseMultiError(errors)
	}

	return nil
}

// AuthForgotPostResponseMultiError is an error wrapping multiple validation
// errors returned by AuthForgotPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthForgotPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotPostResponseMultiError) AllErrors() []error { return m }

// AuthForgotPostResponseValidationError is the validation error returned by
// AuthForgotPostResponse.Validate if the designated constraints aren't met.
type AuthForgotPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotPostResponseValidationError) ErrorName() string {
	return "AuthForgotPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotPostResponseValidationError{}

// Validate checks the field values on AuthResendOTPPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthResendOTPPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResendOTPPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthResendOTPPostRequestMultiError, or nil if none found.
func (m *AuthResendOTPPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResendOTPPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	if len(errors) > 0 {
		return AuthResendOTPPostRequestMultiError(errors)
	}

	return nil
}

// AuthResendOTPPostRequestMultiError is an error wrapping multiple validation
// errors returned by AuthResendOTPPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthResendOTPPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResendOTPPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResendOTPPostRequestMultiError) AllErrors() []error { return m }

// AuthResendOTPPostRequestValidationError is the validation error returned by
// AuthResendOTPPostRequest.Validate if the designated constraints aren't met.
type AuthResendOTPPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResendOTPPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResendOTPPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResendOTPPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResendOTPPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResendOTPPostRequestValidationError) ErrorName() string {
	return "AuthResendOTPPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthResendOTPPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResendOTPPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResendOTPPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResendOTPPostRequestValidationError{}

// Validate checks the field values on AuthResendOTPPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthResendOTPPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResendOTPPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthResendOTPPostResponseMultiError, or nil if none found.
func (m *AuthResendOTPPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResendOTPPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthResendOTPPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthResendOTPPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthResendOTPPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthResendOTPPostResponseMultiError(errors)
	}

	return nil
}

// AuthResendOTPPostResponseMultiError is an error wrapping multiple validation
// errors returned by AuthResendOTPPostResponse.ValidateAll() if the
// designated constraints aren't met.
type AuthResendOTPPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResendOTPPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResendOTPPostResponseMultiError) AllErrors() []error { return m }

// AuthResendOTPPostResponseValidationError is the validation error returned by
// AuthResendOTPPostResponse.Validate if the designated constraints aren't met.
type AuthResendOTPPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResendOTPPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResendOTPPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResendOTPPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResendOTPPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResendOTPPostResponseValidationError) ErrorName() string {
	return "AuthResendOTPPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthResendOTPPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResendOTPPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResendOTPPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResendOTPPostResponseValidationError{}

// Validate checks the field values on AuthOTPPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOTPPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOTPPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOTPPostRequestMultiError, or nil if none found.
func (m *AuthOTPPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOTPPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	// no validation rules for Otp

	if len(errors) > 0 {
		return AuthOTPPostRequestMultiError(errors)
	}

	return nil
}

// AuthOTPPostRequestMultiError is an error wrapping multiple validation errors
// returned by AuthOTPPostRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthOTPPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOTPPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOTPPostRequestMultiError) AllErrors() []error { return m }

// AuthOTPPostRequestValidationError is the validation error returned by
// AuthOTPPostRequest.Validate if the designated constraints aren't met.
type AuthOTPPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOTPPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOTPPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOTPPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOTPPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOTPPostRequestValidationError) ErrorName() string {
	return "AuthOTPPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOTPPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOTPPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOTPPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOTPPostRequestValidationError{}

// Validate checks the field values on AuthOTPPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOTPPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOTPPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOTPPostResponseMultiError, or nil if none found.
func (m *AuthOTPPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOTPPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthOTPPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthOTPPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthOTPPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthOTPPostResponseMultiError(errors)
	}

	return nil
}

// AuthOTPPostResponseMultiError is an error wrapping multiple validation
// errors returned by AuthOTPPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthOTPPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOTPPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOTPPostResponseMultiError) AllErrors() []error { return m }

// AuthOTPPostResponseValidationError is the validation error returned by
// AuthOTPPostResponse.Validate if the designated constraints aren't met.
type AuthOTPPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOTPPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOTPPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOTPPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOTPPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOTPPostResponseValidationError) ErrorName() string {
	return "AuthOTPPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOTPPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOTPPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOTPPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOTPPostResponseValidationError{}

// Validate checks the field values on StatesGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatesGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatesGetRequestMultiError, or nil if none found.
func (m *StatesGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatesGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatesGetRequestMultiError(errors)
	}

	return nil
}

// StatesGetRequestMultiError is an error wrapping multiple validation errors
// returned by StatesGetRequest.ValidateAll() if the designated constraints
// aren't met.
type StatesGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatesGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatesGetRequestMultiError) AllErrors() []error { return m }

// StatesGetRequestValidationError is the validation error returned by
// StatesGetRequest.Validate if the designated constraints aren't met.
type StatesGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatesGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatesGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatesGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatesGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatesGetRequestValidationError) ErrorName() string { return "StatesGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatesGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatesGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatesGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatesGetRequestValidationError{}

// Validate checks the field values on StatesGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatesGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatesGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatesGetResponseMultiError, or nil if none found.
func (m *StatesGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatesGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatesGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatesGetResponseMultiError(errors)
	}

	return nil
}

// StatesGetResponseMultiError is an error wrapping multiple validation errors
// returned by StatesGetResponse.ValidateAll() if the designated constraints
// aren't met.
type StatesGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatesGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatesGetResponseMultiError) AllErrors() []error { return m }

// StatesGetResponseValidationError is the validation error returned by
// StatesGetResponse.Validate if the designated constraints aren't met.
type StatesGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatesGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatesGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatesGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatesGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatesGetResponseValidationError) ErrorName() string {
	return "StatesGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatesGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatesGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatesGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatesGetResponseValidationError{}

// Validate checks the field values on ContactGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContactGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGetRequestMultiError, or nil if none found.
func (m *ContactGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return ContactGetRequestMultiError(errors)
	}

	return nil
}

// ContactGetRequestMultiError is an error wrapping multiple validation errors
// returned by ContactGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ContactGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGetRequestMultiError) AllErrors() []error { return m }

// ContactGetRequestValidationError is the validation error returned by
// ContactGetRequest.Validate if the designated constraints aren't met.
type ContactGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGetRequestValidationError) ErrorName() string {
	return "ContactGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGetRequestValidationError{}

// Validate checks the field values on ContactGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGetResponseMultiError, or nil if none found.
func (m *ContactGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContactGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContactGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContactGetResponseMultiError(errors)
	}

	return nil
}

// ContactGetResponseMultiError is an error wrapping multiple validation errors
// returned by ContactGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ContactGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGetResponseMultiError) AllErrors() []error { return m }

// ContactGetResponseValidationError is the validation error returned by
// ContactGetResponse.Validate if the designated constraints aren't met.
type ContactGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGetResponseValidationError) ErrorName() string {
	return "ContactGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGetResponseValidationError{}

// Validate checks the field values on UserPutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPutRequestMultiError,
// or nil if none found.
func (m *UserPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	// no validation rules for Url

	// no validation rules for FirstName

	// no validation rules for LastName

	if m.GetPhone() != "" {

		if !_UserPutRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := UserPutRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^[0-9]{10}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Mail

	if len(errors) > 0 {
		return UserPutRequestMultiError(errors)
	}

	return nil
}

// UserPutRequestMultiError is an error wrapping multiple validation errors
// returned by UserPutRequest.ValidateAll() if the designated constraints
// aren't met.
type UserPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPutRequestMultiError) AllErrors() []error { return m }

// UserPutRequestValidationError is the validation error returned by
// UserPutRequest.Validate if the designated constraints aren't met.
type UserPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPutRequestValidationError) ErrorName() string { return "UserPutRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPutRequestValidationError{}

var _UserPutRequest_Phone_Pattern = regexp.MustCompile("^[0-9]{10}$")

// Validate checks the field values on UserPutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPutResponseMultiError, or nil if none found.
func (m *UserPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserPutResponseMultiError(errors)
	}

	return nil
}

// UserPutResponseMultiError is an error wrapping multiple validation errors
// returned by UserPutResponse.ValidateAll() if the designated constraints
// aren't met.
type UserPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPutResponseMultiError) AllErrors() []error { return m }

// UserPutResponseValidationError is the validation error returned by
// UserPutResponse.Validate if the designated constraints aren't met.
type UserPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPutResponseValidationError) ErrorName() string { return "UserPutResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPutResponseValidationError{}

// Validate checks the field values on ContactPutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContactPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactPutRequestMultiError, or nil if none found.
func (m *ContactPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	// no validation rules for Zipcode

	// no validation rules for Address1

	// no validation rules for Address2

	// no validation rules for StateId

	// no validation rules for City

	if len(errors) > 0 {
		return ContactPutRequestMultiError(errors)
	}

	return nil
}

// ContactPutRequestMultiError is an error wrapping multiple validation errors
// returned by ContactPutRequest.ValidateAll() if the designated constraints
// aren't met.
type ContactPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactPutRequestMultiError) AllErrors() []error { return m }

// ContactPutRequestValidationError is the validation error returned by
// ContactPutRequest.Validate if the designated constraints aren't met.
type ContactPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactPutRequestValidationError) ErrorName() string {
	return "ContactPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactPutRequestValidationError{}

// Validate checks the field values on ContactPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactPutResponseMultiError, or nil if none found.
func (m *ContactPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContactPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContactPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContactPutResponseMultiError(errors)
	}

	return nil
}

// ContactPutResponseMultiError is an error wrapping multiple validation errors
// returned by ContactPutResponse.ValidateAll() if the designated constraints
// aren't met.
type ContactPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactPutResponseMultiError) AllErrors() []error { return m }

// ContactPutResponseValidationError is the validation error returned by
// ContactPutResponse.Validate if the designated constraints aren't met.
type ContactPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactPutResponseValidationError) ErrorName() string {
	return "ContactPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactPutResponseValidationError{}

// Validate checks the field values on AdminBusinessDeletePostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessDeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessDeletePostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBusinessDeletePostRequestMultiError, or nil if none found.
func (m *AdminBusinessDeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessDeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminBusinessDeletePostRequestMultiError(errors)
	}

	return nil
}

// AdminBusinessDeletePostRequestMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessDeletePostRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminBusinessDeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessDeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessDeletePostRequestMultiError) AllErrors() []error { return m }

// AdminBusinessDeletePostRequestValidationError is the validation error
// returned by AdminBusinessDeletePostRequest.Validate if the designated
// constraints aren't met.
type AdminBusinessDeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessDeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessDeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessDeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessDeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessDeletePostRequestValidationError) ErrorName() string {
	return "AdminBusinessDeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessDeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessDeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessDeletePostRequestValidationError{}

// Validate checks the field values on AdminBusinessDeletePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessDeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessDeletePostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBusinessDeletePostResponseMultiError, or nil if none found.
func (m *AdminBusinessDeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessDeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBusinessDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBusinessDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBusinessDeletePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBusinessDeletePostResponseMultiError(errors)
	}

	return nil
}

// AdminBusinessDeletePostResponseMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessDeletePostResponse.ValidateAll()
// if the designated constraints aren't met.
type AdminBusinessDeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessDeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessDeletePostResponseMultiError) AllErrors() []error { return m }

// AdminBusinessDeletePostResponseValidationError is the validation error
// returned by AdminBusinessDeletePostResponse.Validate if the designated
// constraints aren't met.
type AdminBusinessDeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessDeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessDeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessDeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessDeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessDeletePostResponseValidationError) ErrorName() string {
	return "AdminBusinessDeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessDeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessDeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessDeletePostResponseValidationError{}

// Validate checks the field values on AdminBusinessBanPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessBanPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessBanPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBusinessBanPostRequestMultiError, or nil if none found.
func (m *AdminBusinessBanPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessBanPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminBusinessBanPostRequestMultiError(errors)
	}

	return nil
}

// AdminBusinessBanPostRequestMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessBanPostRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminBusinessBanPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessBanPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessBanPostRequestMultiError) AllErrors() []error { return m }

// AdminBusinessBanPostRequestValidationError is the validation error returned
// by AdminBusinessBanPostRequest.Validate if the designated constraints
// aren't met.
type AdminBusinessBanPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessBanPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessBanPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessBanPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessBanPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessBanPostRequestValidationError) ErrorName() string {
	return "AdminBusinessBanPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessBanPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessBanPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessBanPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessBanPostRequestValidationError{}

// Validate checks the field values on AdminBusinessBanPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessBanPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessBanPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBusinessBanPostResponseMultiError, or nil if none found.
func (m *AdminBusinessBanPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessBanPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBusinessBanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBusinessBanPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBusinessBanPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBusinessBanPostResponseMultiError(errors)
	}

	return nil
}

// AdminBusinessBanPostResponseMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessBanPostResponse.ValidateAll() if
// the designated constraints aren't met.
type AdminBusinessBanPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessBanPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessBanPostResponseMultiError) AllErrors() []error { return m }

// AdminBusinessBanPostResponseValidationError is the validation error returned
// by AdminBusinessBanPostResponse.Validate if the designated constraints
// aren't met.
type AdminBusinessBanPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessBanPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessBanPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessBanPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessBanPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessBanPostResponseValidationError) ErrorName() string {
	return "AdminBusinessBanPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessBanPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessBanPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessBanPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessBanPostResponseValidationError{}

// Validate checks the field values on AdminUsersGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersGetRequestMultiError, or nil if none found.
func (m *AdminUsersGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Mail

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Phone

	if len(errors) > 0 {
		return AdminUsersGetRequestMultiError(errors)
	}

	return nil
}

// AdminUsersGetRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUsersGetRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUsersGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersGetRequestMultiError) AllErrors() []error { return m }

// AdminUsersGetRequestValidationError is the validation error returned by
// AdminUsersGetRequest.Validate if the designated constraints aren't met.
type AdminUsersGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersGetRequestValidationError) ErrorName() string {
	return "AdminUsersGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersGetRequestValidationError{}

// Validate checks the field values on AdminUsersGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersGetResponseMultiError, or nil if none found.
func (m *AdminUsersGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUsersGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUsersGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUsersGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUsersGetResponseMultiError(errors)
	}

	return nil
}

// AdminUsersGetResponseMultiError is an error wrapping multiple validation
// errors returned by AdminUsersGetResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminUsersGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersGetResponseMultiError) AllErrors() []error { return m }

// AdminUsersGetResponseValidationError is the validation error returned by
// AdminUsersGetResponse.Validate if the designated constraints aren't met.
type AdminUsersGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersGetResponseValidationError) ErrorName() string {
	return "AdminUsersGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersGetResponseValidationError{}

// Validate checks the field values on AdminBusinessesGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessesGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBusinessesGetRequestMultiError, or nil if none found.
func (m *AdminBusinessesGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Mail

	// no validation rules for Phone

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return AdminBusinessesGetRequestMultiError(errors)
	}

	return nil
}

// AdminBusinessesGetRequestMultiError is an error wrapping multiple validation
// errors returned by AdminBusinessesGetRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminBusinessesGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesGetRequestMultiError) AllErrors() []error { return m }

// AdminBusinessesGetRequestValidationError is the validation error returned by
// AdminBusinessesGetRequest.Validate if the designated constraints aren't met.
type AdminBusinessesGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesGetRequestValidationError) ErrorName() string {
	return "AdminBusinessesGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesGetRequestValidationError{}

// Validate checks the field values on AdminBusinessesGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessesGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBusinessesGetResponseMultiError, or nil if none found.
func (m *AdminBusinessesGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBusinessesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBusinessesGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBusinessesGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBusinessesGetResponseMultiError(errors)
	}

	return nil
}

// AdminBusinessesGetResponseMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessesGetResponse.ValidateAll() if
// the designated constraints aren't met.
type AdminBusinessesGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesGetResponseMultiError) AllErrors() []error { return m }

// AdminBusinessesGetResponseValidationError is the validation error returned
// by AdminBusinessesGetResponse.Validate if the designated constraints aren't met.
type AdminBusinessesGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesGetResponseValidationError) ErrorName() string {
	return "AdminBusinessesGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesGetResponseValidationError{}

// Validate checks the field values on BusinessGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessGetRequestMultiError, or nil if none found.
func (m *BusinessGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessGetRequestMultiError(errors)
	}

	return nil
}

// BusinessGetRequestMultiError is an error wrapping multiple validation errors
// returned by BusinessGetRequest.ValidateAll() if the designated constraints
// aren't met.
type BusinessGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessGetRequestMultiError) AllErrors() []error { return m }

// BusinessGetRequestValidationError is the validation error returned by
// BusinessGetRequest.Validate if the designated constraints aren't met.
type BusinessGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessGetRequestValidationError) ErrorName() string {
	return "BusinessGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessGetRequestValidationError{}

// Validate checks the field values on BusinessGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessGetResponseMultiError, or nil if none found.
func (m *BusinessGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessGetResponseMultiError(errors)
	}

	return nil
}

// BusinessGetResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessGetResponseMultiError) AllErrors() []error { return m }

// BusinessGetResponseValidationError is the validation error returned by
// BusinessGetResponse.Validate if the designated constraints aren't met.
type BusinessGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessGetResponseValidationError) ErrorName() string {
	return "BusinessGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessGetResponseValidationError{}

// Validate checks the field values on State with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *State) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on State with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StateMultiError, or nil if none found.
func (m *State) ValidateAll() error {
	return m.validate(true)
}

func (m *State) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return StateMultiError(errors)
	}

	return nil
}

// StateMultiError is an error wrapping multiple validation errors returned by
// State.ValidateAll() if the designated constraints aren't met.
type StateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateMultiError) AllErrors() []error { return m }

// StateValidationError is the validation error returned by State.Validate if
// the designated constraints aren't met.
type StateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateValidationError) ErrorName() string { return "StateValidationError" }

// Error satisfies the builtin error interface
func (e StateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateValidationError{}

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Business with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessMultiError, or nil
// if none found.
func (m *Business) ValidateAll() error {
	return m.validate(true)
}

func (m *Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for LogoImage

	// no validation rules for BannerImage

	// no validation rules for ContactId

	// no validation rules for Website

	// no validation rules for Descriptions

	// no validation rules for Mail

	// no validation rules for Zipcode

	// no validation rules for Status

	// no validation rules for RefStatus

	for idx, item := range m.GetServiceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessValidationError{
					field:  fmt.Sprintf("ServiceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StartDate

	if len(errors) > 0 {
		return BusinessMultiError(errors)
	}

	return nil
}

// BusinessMultiError is an error wrapping multiple validation errors returned
// by Business.ValidateAll() if the designated constraints aren't met.
type BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessMultiError) AllErrors() []error { return m }

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for BusinessId

	// no validation rules for Status

	// no validation rules for CategoryId

	// no validation rules for CategoryName

	// no validation rules for NumberOrder

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on BusinessPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPutRequestMultiError, or nil if none found.
func (m *BusinessPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	// no validation rules for Name

	if m.GetPhone() != "" {

		if !_BusinessPutRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := BusinessPutRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^[0-9]{10}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for LogoUrl

	// no validation rules for BannerUrl

	// no validation rules for Website

	// no validation rules for Description

	if len(errors) > 0 {
		return BusinessPutRequestMultiError(errors)
	}

	return nil
}

// BusinessPutRequestMultiError is an error wrapping multiple validation errors
// returned by BusinessPutRequest.ValidateAll() if the designated constraints
// aren't met.
type BusinessPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPutRequestMultiError) AllErrors() []error { return m }

// BusinessPutRequestValidationError is the validation error returned by
// BusinessPutRequest.Validate if the designated constraints aren't met.
type BusinessPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPutRequestValidationError) ErrorName() string {
	return "BusinessPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPutRequestValidationError{}

var _BusinessPutRequest_Phone_Pattern = regexp.MustCompile("^[0-9]{10}$")

// Validate checks the field values on BusinessPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPutResponseMultiError, or nil if none found.
func (m *BusinessPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPutResponseMultiError(errors)
	}

	return nil
}

// BusinessPutResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessPutResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPutResponseMultiError) AllErrors() []error { return m }

// BusinessPutResponseValidationError is the validation error returned by
// BusinessPutResponse.Validate if the designated constraints aren't met.
type BusinessPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPutResponseValidationError) ErrorName() string {
	return "BusinessPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPutResponseValidationError{}

// Validate checks the field values on UserGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetRequestMultiError,
// or nil if none found.
func (m *UserGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for XUserId

	if len(errors) > 0 {
		return UserGetRequestMultiError(errors)
	}

	return nil
}

// UserGetRequestMultiError is an error wrapping multiple validation errors
// returned by UserGetRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetRequestMultiError) AllErrors() []error { return m }

// UserGetRequestValidationError is the validation error returned by
// UserGetRequest.Validate if the designated constraints aren't met.
type UserGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetRequestValidationError) ErrorName() string { return "UserGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetRequestValidationError{}

// Validate checks the field values on UserGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponseMultiError, or nil if none found.
func (m *UserGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponseMultiError(errors)
	}

	return nil
}

// UserGetResponseMultiError is an error wrapping multiple validation errors
// returned by UserGetResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponseMultiError) AllErrors() []error { return m }

// UserGetResponseValidationError is the validation error returned by
// UserGetResponse.Validate if the designated constraints aren't met.
type UserGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponseValidationError) ErrorName() string { return "UserGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Image

	// no validation rules for Mail

	// no validation rules for Phone

	// no validation rules for ContactId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Zipcode

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContactMultiError, or nil if none found.
func (m *Contact) ValidateAll() error {
	return m.validate(true)
}

func (m *Contact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Zipcode

	// no validation rules for Address1

	// no validation rules for Address2

	// no validation rules for State

	// no validation rules for City

	// no validation rules for StateId

	if len(errors) > 0 {
		return ContactMultiError(errors)
	}

	return nil
}

// ContactMultiError is an error wrapping multiple validation errors returned
// by Contact.ValidateAll() if the designated constraints aren't met.
type ContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactMultiError) AllErrors() []error { return m }

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}

// Validate checks the field values on AuthPasswordPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthPasswordPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPasswordPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthPasswordPostRequestMultiError, or nil if none found.
func (m *AuthPasswordPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPasswordPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for EncryptedPrivateKey

	// no validation rules for XUserId

	if len(errors) > 0 {
		return AuthPasswordPostRequestMultiError(errors)
	}

	return nil
}

// AuthPasswordPostRequestMultiError is an error wrapping multiple validation
// errors returned by AuthPasswordPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthPasswordPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPasswordPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPasswordPostRequestMultiError) AllErrors() []error { return m }

// AuthPasswordPostRequestValidationError is the validation error returned by
// AuthPasswordPostRequest.Validate if the designated constraints aren't met.
type AuthPasswordPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPasswordPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPasswordPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPasswordPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPasswordPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPasswordPostRequestValidationError) ErrorName() string {
	return "AuthPasswordPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthPasswordPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPasswordPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPasswordPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPasswordPostRequestValidationError{}

// Validate checks the field values on AuthPasswordPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthPasswordPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPasswordPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthPasswordPostResponseMultiError, or nil if none found.
func (m *AuthPasswordPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPasswordPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthPasswordPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthPasswordPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthPasswordPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthPasswordPostResponseMultiError(errors)
	}

	return nil
}

// AuthPasswordPostResponseMultiError is an error wrapping multiple validation
// errors returned by AuthPasswordPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthPasswordPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPasswordPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPasswordPostResponseMultiError) AllErrors() []error { return m }

// AuthPasswordPostResponseValidationError is the validation error returned by
// AuthPasswordPostResponse.Validate if the designated constraints aren't met.
type AuthPasswordPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPasswordPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPasswordPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPasswordPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPasswordPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPasswordPostResponseValidationError) ErrorName() string {
	return "AuthPasswordPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthPasswordPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPasswordPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPasswordPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPasswordPostResponseValidationError{}

// Validate checks the field values on UserPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPostRequestMultiError, or nil if none found.
func (m *UserPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetMail()); err != nil {
		err = UserPostRequestValidationError{
			field:  "Mail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserPostRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := UserPostRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPublicKey()) < 1 {
		err := UserPostRequestValidationError{
			field:  "PublicKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEncryptedPrivateKey()) < 1 {
		err := UserPostRequestValidationError{
			field:  "EncryptedPrivateKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserPostRequestMultiError(errors)
	}

	return nil
}

func (m *UserPostRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserPostRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserPostRequestMultiError is an error wrapping multiple validation errors
// returned by UserPostRequest.ValidateAll() if the designated constraints
// aren't met.
type UserPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPostRequestMultiError) AllErrors() []error { return m }

// UserPostRequestValidationError is the validation error returned by
// UserPostRequest.Validate if the designated constraints aren't met.
type UserPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPostRequestValidationError) ErrorName() string { return "UserPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPostRequestValidationError{}

var _UserPostRequest_Phone_Pattern = regexp.MustCompile("^[0-9]{10}$")

// Validate checks the field values on UserPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPostResponseMultiError, or nil if none found.
func (m *UserPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserPostResponseMultiError(errors)
	}

	return nil
}

// UserPostResponseMultiError is an error wrapping multiple validation errors
// returned by UserPostResponse.ValidateAll() if the designated constraints
// aren't met.
type UserPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPostResponseMultiError) AllErrors() []error { return m }

// UserPostResponseValidationError is the validation error returned by
// UserPostResponse.Validate if the designated constraints aren't met.
type UserPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPostResponseValidationError) ErrorName() string { return "UserPostResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPostResponseValidationError{}

// Validate checks the field values on BusinessPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPostRequestMultiError, or nil if none found.
func (m *BusinessPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetMail()); err != nil {
		err = BusinessPostRequestValidationError{
			field:  "Mail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_BusinessPostRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := BusinessPostRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPublicKey()) < 1 {
		err := BusinessPostRequestValidationError{
			field:  "PublicKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEncryptedPrivateKey()) < 1 {
		err := BusinessPostRequestValidationError{
			field:  "EncryptedPrivateKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RefCode

	if len(errors) > 0 {
		return BusinessPostRequestMultiError(errors)
	}

	return nil
}

func (m *BusinessPostRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *BusinessPostRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// BusinessPostRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessPostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPostRequestMultiError) AllErrors() []error { return m }

// BusinessPostRequestValidationError is the validation error returned by
// BusinessPostRequest.Validate if the designated constraints aren't met.
type BusinessPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPostRequestValidationError) ErrorName() string {
	return "BusinessPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPostRequestValidationError{}

var _BusinessPostRequest_Phone_Pattern = regexp.MustCompile("^[0-9]{10}$")

// Validate checks the field values on BusinessPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPostResponseMultiError, or nil if none found.
func (m *BusinessPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPostResponseMultiError(errors)
	}

	return nil
}

// BusinessPostResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessPostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPostResponseMultiError) AllErrors() []error { return m }

// BusinessPostResponseValidationError is the validation error returned by
// BusinessPostResponse.Validate if the designated constraints aren't met.
type BusinessPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPostResponseValidationError) ErrorName() string {
	return "BusinessPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPostResponseValidationError{}

// Validate checks the field values on AuthCredentialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCredentialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCredentialRequestMultiError, or nil if none found.
func (m *AuthCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	if len(errors) > 0 {
		return AuthCredentialRequestMultiError(errors)
	}

	return nil
}

// AuthCredentialRequestMultiError is an error wrapping multiple validation
// errors returned by AuthCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCredentialRequestMultiError) AllErrors() []error { return m }

// AuthCredentialRequestValidationError is the validation error returned by
// AuthCredentialRequest.Validate if the designated constraints aren't met.
type AuthCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCredentialRequestValidationError) ErrorName() string {
	return "AuthCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCredentialRequestValidationError{}

// Validate checks the field values on AuthCredentialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCredentialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCredentialResponseMultiError, or nil if none found.
func (m *AuthCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthCredentialResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthCredentialResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthCredentialResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthCredentialResponseMultiError(errors)
	}

	return nil
}

// AuthCredentialResponseMultiError is an error wrapping multiple validation
// errors returned by AuthCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCredentialResponseMultiError) AllErrors() []error { return m }

// AuthCredentialResponseValidationError is the validation error returned by
// AuthCredentialResponse.Validate if the designated constraints aren't met.
type AuthCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCredentialResponseValidationError) ErrorName() string {
	return "AuthCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCredentialResponseValidationError{}

// Validate checks the field values on AuthPingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthPingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthPingRequestMultiError, or nil if none found.
func (m *AuthPingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for XRole

	if len(errors) > 0 {
		return AuthPingRequestMultiError(errors)
	}

	return nil
}

// AuthPingRequestMultiError is an error wrapping multiple validation errors
// returned by AuthPingRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthPingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPingRequestMultiError) AllErrors() []error { return m }

// AuthPingRequestValidationError is the validation error returned by
// AuthPingRequest.Validate if the designated constraints aren't met.
type AuthPingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPingRequestValidationError) ErrorName() string { return "AuthPingRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthPingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPingRequestValidationError{}

// Validate checks the field values on AuthPingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthPingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthPingResponseMultiError, or nil if none found.
func (m *AuthPingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthPingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthPingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthPingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthPingResponseMultiError(errors)
	}

	return nil
}

// AuthPingResponseMultiError is an error wrapping multiple validation errors
// returned by AuthPingResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthPingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPingResponseMultiError) AllErrors() []error { return m }

// AuthPingResponseValidationError is the validation error returned by
// AuthPingResponse.Validate if the designated constraints aren't met.
type AuthPingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPingResponseValidationError) ErrorName() string { return "AuthPingResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthPingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPingResponseValidationError{}

// Validate checks the field values on BusinessTransactionsGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessTransactionsGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessTransactionsGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessTransactionsGetRequestMultiError, or nil if none found.
func (m *BusinessTransactionsGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessTransactionsGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Query

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return BusinessTransactionsGetRequestMultiError(errors)
	}

	return nil
}

// BusinessTransactionsGetRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessTransactionsGetRequest.ValidateAll()
// if the designated constraints aren't met.
type BusinessTransactionsGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessTransactionsGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessTransactionsGetRequestMultiError) AllErrors() []error { return m }

// BusinessTransactionsGetRequestValidationError is the validation error
// returned by BusinessTransactionsGetRequest.Validate if the designated
// constraints aren't met.
type BusinessTransactionsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessTransactionsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessTransactionsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessTransactionsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessTransactionsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessTransactionsGetRequestValidationError) ErrorName() string {
	return "BusinessTransactionsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessTransactionsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessTransactionsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessTransactionsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessTransactionsGetRequestValidationError{}

// Validate checks the field values on BusinessTransactionsGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessTransactionsGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessTransactionsGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessTransactionsGetResponseMultiError, or nil if none found.
func (m *BusinessTransactionsGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessTransactionsGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTransactionsGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTransactionsGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTransactionsGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessTransactionsGetResponseMultiError(errors)
	}

	return nil
}

// BusinessTransactionsGetResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessTransactionsGetResponse.ValidateAll()
// if the designated constraints aren't met.
type BusinessTransactionsGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessTransactionsGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessTransactionsGetResponseMultiError) AllErrors() []error { return m }

// BusinessTransactionsGetResponseValidationError is the validation error
// returned by BusinessTransactionsGetResponse.Validate if the designated
// constraints aren't met.
type BusinessTransactionsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessTransactionsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessTransactionsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessTransactionsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessTransactionsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessTransactionsGetResponseValidationError) ErrorName() string {
	return "BusinessTransactionsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessTransactionsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessTransactionsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessTransactionsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessTransactionsGetResponseValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for ServiceName

	// no validation rules for Zipcode

	// no validation rules for Fee

	// no validation rules for Status

	// no validation rules for Id

	// no validation rules for Image

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on AdvertisePackage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdvertisePackage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertisePackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertisePackageMultiError, or nil if none found.
func (m *AdvertisePackage) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertisePackage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetServiceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvertisePackageValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvertisePackageValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvertisePackageValidationError{
					field:  fmt.Sprintf("ServiceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return AdvertisePackageMultiError(errors)
	}

	return nil
}

// AdvertisePackageMultiError is an error wrapping multiple validation errors
// returned by AdvertisePackage.ValidateAll() if the designated constraints
// aren't met.
type AdvertisePackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertisePackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertisePackageMultiError) AllErrors() []error { return m }

// AdvertisePackageValidationError is the validation error returned by
// AdvertisePackage.Validate if the designated constraints aren't met.
type AdvertisePackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertisePackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertisePackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertisePackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertisePackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertisePackageValidationError) ErrorName() string { return "AdvertisePackageValidationError" }

// Error satisfies the builtin error interface
func (e AdvertisePackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertisePackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertisePackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertisePackageValidationError{}

// Validate checks the field values on AdminAdvertiseManagementPostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminAdvertiseManagementPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementPostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementPostRequestMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return AdminAdvertiseManagementPostRequestMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPostRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementPostRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPostRequestMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPostRequestValidationError is the validation error
// returned by AdminAdvertiseManagementPostRequest.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPostRequestValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPostRequestValidationError{}

// Validate checks the field values on AdminAdvertiseManagementPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminAdvertiseManagementPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementPostResponseMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAdvertiseManagementPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAdvertiseManagementPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAdvertiseManagementPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminAdvertiseManagementPostResponseMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPostResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementPostResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPostResponseMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPostResponseValidationError is the validation error
// returned by AdminAdvertiseManagementPostResponse.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPostResponseValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPostResponseValidationError{}

// Validate checks the field values on AdminAdvertiseManagementGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminAdvertiseManagementGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementGetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementGetRequestMultiError, or nil if none found.
func (m *AdminAdvertiseManagementGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for ServiceName

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return AdminAdvertiseManagementGetRequestMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementGetRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementGetRequestMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementGetRequestValidationError is the validation error
// returned by AdminAdvertiseManagementGetRequest.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementGetRequestValidationError) ErrorName() string {
	return "AdminAdvertiseManagementGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementGetRequestValidationError{}

// Validate checks the field values on AdminAdvertiseManagementGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminAdvertiseManagementGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementGetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementGetResponseMultiError, or nil if none found.
func (m *AdminAdvertiseManagementGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAdvertiseManagementGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAdvertiseManagementGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAdvertiseManagementGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminAdvertiseManagementGetResponseMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementGetResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementGetResponseMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementGetResponseValidationError is the validation error
// returned by AdminAdvertiseManagementGetResponse.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementGetResponseValidationError) ErrorName() string {
	return "AdminAdvertiseManagementGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementGetResponseValidationError{}

// Validate checks the field values on AdminAdvertiseManagementPutRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminAdvertiseManagementPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementPutRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementPutRequestMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminAdvertiseManagementPutRequestMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPutRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementPutRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPutRequestMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPutRequestValidationError is the validation error
// returned by AdminAdvertiseManagementPutRequest.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPutRequestValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPutRequestValidationError{}

// Validate checks the field values on AdminAdvertiseManagementPutResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminAdvertiseManagementPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAdvertiseManagementPutResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAdvertiseManagementPutResponseMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAdvertiseManagementPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAdvertiseManagementPutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAdvertiseManagementPutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminAdvertiseManagementPutResponseMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPutResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminAdvertiseManagementPutResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPutResponseMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPutResponseValidationError is the validation error
// returned by AdminAdvertiseManagementPutResponse.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPutResponseValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPutResponseValidationError{}

// Validate checks the field values on
// AdminAdvertiseManagementDeletePostRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAdvertiseManagementDeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementDeletePostRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminAdvertiseManagementDeletePostRequestMultiError, or nil if none found.
func (m *AdminAdvertiseManagementDeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementDeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminAdvertiseManagementDeletePostRequestMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementDeletePostRequestMultiError is an error wrapping
// multiple validation errors returned by
// AdminAdvertiseManagementDeletePostRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementDeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementDeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementDeletePostRequestMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementDeletePostRequestValidationError is the validation
// error returned by AdminAdvertiseManagementDeletePostRequest.Validate if the
// designated constraints aren't met.
type AdminAdvertiseManagementDeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementDeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementDeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementDeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementDeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementDeletePostRequestValidationError) ErrorName() string {
	return "AdminAdvertiseManagementDeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementDeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementDeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementDeletePostRequestValidationError{}

// Validate checks the field values on
// AdminAdvertiseManagementDeletePostResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAdvertiseManagementDeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementDeletePostResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminAdvertiseManagementDeletePostResponseMultiError, or nil if none found.
func (m *AdminAdvertiseManagementDeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementDeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAdvertiseManagementDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAdvertiseManagementDeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAdvertiseManagementDeletePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminAdvertiseManagementDeletePostResponseMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementDeletePostResponseMultiError is an error wrapping
// multiple validation errors returned by
// AdminAdvertiseManagementDeletePostResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementDeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementDeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementDeletePostResponseMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementDeletePostResponseValidationError is the validation
// error returned by AdminAdvertiseManagementDeletePostResponse.Validate if
// the designated constraints aren't met.
type AdminAdvertiseManagementDeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementDeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementDeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementDeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementDeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementDeletePostResponseValidationError) ErrorName() string {
	return "AdminAdvertiseManagementDeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementDeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementDeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementDeletePostResponseValidationError{}

// Validate checks the field values on AdvertiseGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseGetRequestMultiError, or nil if none found.
func (m *AdvertiseGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return AdvertiseGetRequestMultiError(errors)
	}

	return nil
}

// AdvertiseGetRequestMultiError is an error wrapping multiple validation
// errors returned by AdvertiseGetRequest.ValidateAll() if the designated
// constraints aren't met.
type AdvertiseGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseGetRequestMultiError) AllErrors() []error { return m }

// AdvertiseGetRequestValidationError is the validation error returned by
// AdvertiseGetRequest.Validate if the designated constraints aren't met.
type AdvertiseGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseGetRequestValidationError) ErrorName() string {
	return "AdvertiseGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseGetRequestValidationError{}

// Validate checks the field values on AdvertiseGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseGetResponseMultiError, or nil if none found.
func (m *AdvertiseGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvertiseGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvertiseGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvertiseGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdvertiseGetResponseMultiError(errors)
	}

	return nil
}

// AdvertiseGetResponseMultiError is an error wrapping multiple validation
// errors returned by AdvertiseGetResponse.ValidateAll() if the designated
// constraints aren't met.
type AdvertiseGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseGetResponseMultiError) AllErrors() []error { return m }

// AdvertiseGetResponseValidationError is the validation error returned by
// AdvertiseGetResponse.Validate if the designated constraints aren't met.
type AdvertiseGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseGetResponseValidationError) ErrorName() string {
	return "AdvertiseGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseGetResponseValidationError{}

// Validate checks the field values on AdvertiseOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdvertiseOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdvertiseOrderMultiError,
// or nil if none found.
func (m *AdvertiseOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CategoryName

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	// no validation rules for Zipcode

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for XUserId

	// no validation rules for AdvertisePackageId

	if len(errors) > 0 {
		return AdvertiseOrderMultiError(errors)
	}

	return nil
}

// AdvertiseOrderMultiError is an error wrapping multiple validation errors
// returned by AdvertiseOrder.ValidateAll() if the designated constraints
// aren't met.
type AdvertiseOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseOrderMultiError) AllErrors() []error { return m }

// AdvertiseOrderValidationError is the validation error returned by
// AdvertiseOrder.Validate if the designated constraints aren't met.
type AdvertiseOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseOrderValidationError) ErrorName() string { return "AdvertiseOrderValidationError" }

// Error satisfies the builtin error interface
func (e AdvertiseOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseOrderValidationError{}

// Validate checks the field values on BusinessAdvertiseOrderGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessAdvertiseOrderGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessAdvertiseOrderGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessAdvertiseOrderGetRequestMultiError, or nil if none found.
func (m *BusinessAdvertiseOrderGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAdvertiseOrderGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return BusinessAdvertiseOrderGetRequestMultiError(errors)
	}

	return nil
}

// BusinessAdvertiseOrderGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// BusinessAdvertiseOrderGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessAdvertiseOrderGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAdvertiseOrderGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAdvertiseOrderGetRequestMultiError) AllErrors() []error { return m }

// BusinessAdvertiseOrderGetRequestValidationError is the validation error
// returned by BusinessAdvertiseOrderGetRequest.Validate if the designated
// constraints aren't met.
type BusinessAdvertiseOrderGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAdvertiseOrderGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAdvertiseOrderGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAdvertiseOrderGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAdvertiseOrderGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAdvertiseOrderGetRequestValidationError) ErrorName() string {
	return "BusinessAdvertiseOrderGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAdvertiseOrderGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAdvertiseOrderGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAdvertiseOrderGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAdvertiseOrderGetRequestValidationError{}

// Validate checks the field values on BusinessAdvertiseOrderGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessAdvertiseOrderGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessAdvertiseOrderGetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessAdvertiseOrderGetResponseMultiError, or nil if none found.
func (m *BusinessAdvertiseOrderGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAdvertiseOrderGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAdvertiseOrderGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAdvertiseOrderGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAdvertiseOrderGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessAdvertiseOrderGetResponseMultiError(errors)
	}

	return nil
}

// BusinessAdvertiseOrderGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessAdvertiseOrderGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessAdvertiseOrderGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAdvertiseOrderGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAdvertiseOrderGetResponseMultiError) AllErrors() []error { return m }

// BusinessAdvertiseOrderGetResponseValidationError is the validation error
// returned by BusinessAdvertiseOrderGetResponse.Validate if the designated
// constraints aren't met.
type BusinessAdvertiseOrderGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAdvertiseOrderGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAdvertiseOrderGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAdvertiseOrderGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAdvertiseOrderGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAdvertiseOrderGetResponseValidationError) ErrorName() string {
	return "BusinessAdvertiseOrderGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAdvertiseOrderGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAdvertiseOrderGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAdvertiseOrderGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAdvertiseOrderGetResponseValidationError{}

// Validate checks the field values on BusinessInvitationCodeGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessInvitationCodeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessInvitationCodeGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessInvitationCodeGetRequestMultiError, or nil if none found.
func (m *BusinessInvitationCodeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInvitationCodeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	if len(errors) > 0 {
		return BusinessInvitationCodeGetRequestMultiError(errors)
	}

	return nil
}

// BusinessInvitationCodeGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// BusinessInvitationCodeGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessInvitationCodeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInvitationCodeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInvitationCodeGetRequestMultiError) AllErrors() []error { return m }

// BusinessInvitationCodeGetRequestValidationError is the validation error
// returned by BusinessInvitationCodeGetRequest.Validate if the designated
// constraints aren't met.
type BusinessInvitationCodeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInvitationCodeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInvitationCodeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInvitationCodeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInvitationCodeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInvitationCodeGetRequestValidationError) ErrorName() string {
	return "BusinessInvitationCodeGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInvitationCodeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInvitationCodeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInvitationCodeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInvitationCodeGetRequestValidationError{}

// Validate checks the field values on BusinessInvitationCodeGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessInvitationCodeGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessInvitationCodeGetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessInvitationCodeGetResponseMultiError, or nil if none found.
func (m *BusinessInvitationCodeGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInvitationCodeGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessInvitationCodeGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessInvitationCodeGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessInvitationCodeGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessInvitationCodeGetResponseMultiError(errors)
	}

	return nil
}

// BusinessInvitationCodeGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessInvitationCodeGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessInvitationCodeGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInvitationCodeGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInvitationCodeGetResponseMultiError) AllErrors() []error { return m }

// BusinessInvitationCodeGetResponseValidationError is the validation error
// returned by BusinessInvitationCodeGetResponse.Validate if the designated
// constraints aren't met.
type BusinessInvitationCodeGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInvitationCodeGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInvitationCodeGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInvitationCodeGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInvitationCodeGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInvitationCodeGetResponseValidationError) ErrorName() string {
	return "BusinessInvitationCodeGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInvitationCodeGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInvitationCodeGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInvitationCodeGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInvitationCodeGetResponseValidationError{}

// Validate checks the field values on AdvertiseDetailGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseDetailGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseDetailGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseDetailGetRequestMultiError, or nil if none found.
func (m *AdvertiseDetailGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseDetailGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Id

	if len(errors) > 0 {
		return AdvertiseDetailGetRequestMultiError(errors)
	}

	return nil
}

// AdvertiseDetailGetRequestMultiError is an error wrapping multiple validation
// errors returned by AdvertiseDetailGetRequest.ValidateAll() if the
// designated constraints aren't met.
type AdvertiseDetailGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseDetailGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseDetailGetRequestMultiError) AllErrors() []error { return m }

// AdvertiseDetailGetRequestValidationError is the validation error returned by
// AdvertiseDetailGetRequest.Validate if the designated constraints aren't met.
type AdvertiseDetailGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseDetailGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseDetailGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseDetailGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseDetailGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseDetailGetRequestValidationError) ErrorName() string {
	return "AdvertiseDetailGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseDetailGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseDetailGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseDetailGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseDetailGetRequestValidationError{}

// Validate checks the field values on AdvertiseDetailGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseDetailGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseDetailGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseDetailGetResponseMultiError, or nil if none found.
func (m *AdvertiseDetailGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseDetailGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvertiseDetailGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvertiseDetailGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvertiseDetailGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdvertiseDetailGetResponseMultiError(errors)
	}

	return nil
}

// AdvertiseDetailGetResponseMultiError is an error wrapping multiple
// validation errors returned by AdvertiseDetailGetResponse.ValidateAll() if
// the designated constraints aren't met.
type AdvertiseDetailGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseDetailGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseDetailGetResponseMultiError) AllErrors() []error { return m }

// AdvertiseDetailGetResponseValidationError is the validation error returned
// by AdvertiseDetailGetResponse.Validate if the designated constraints aren't met.
type AdvertiseDetailGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseDetailGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseDetailGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseDetailGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseDetailGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseDetailGetResponseValidationError) ErrorName() string {
	return "AdvertiseDetailGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseDetailGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseDetailGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseDetailGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseDetailGetResponseValidationError{}

// Validate checks the field values on AdvertiseDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseDetailMultiError, or nil if none found.
func (m *AdvertiseDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetServiceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvertiseDetailValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvertiseDetailValidationError{
						field:  fmt.Sprintf("ServiceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvertiseDetailValidationError{
					field:  fmt.Sprintf("ServiceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return AdvertiseDetailMultiError(errors)
	}

	return nil
}

// AdvertiseDetailMultiError is an error wrapping multiple validation errors
// returned by AdvertiseDetail.ValidateAll() if the designated constraints
// aren't met.
type AdvertiseDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseDetailMultiError) AllErrors() []error { return m }

// AdvertiseDetailValidationError is the validation error returned by
// AdvertiseDetail.Validate if the designated constraints aren't met.
type AdvertiseDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseDetailValidationError) ErrorName() string { return "AdvertiseDetailValidationError" }

// Error satisfies the builtin error interface
func (e AdvertiseDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseDetailValidationError{}

// Validate checks the field values on BusinessFreeContactGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessFreeContactGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFreeContactGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessFreeContactGetRequestMultiError, or nil if none found.
func (m *BusinessFreeContactGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFreeContactGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BusinessFreeContactGetRequestMultiError(errors)
	}

	return nil
}

// BusinessFreeContactGetRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessFreeContactGetRequest.ValidateAll()
// if the designated constraints aren't met.
type BusinessFreeContactGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFreeContactGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFreeContactGetRequestMultiError) AllErrors() []error { return m }

// BusinessFreeContactGetRequestValidationError is the validation error
// returned by BusinessFreeContactGetRequest.Validate if the designated
// constraints aren't met.
type BusinessFreeContactGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFreeContactGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFreeContactGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFreeContactGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFreeContactGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFreeContactGetRequestValidationError) ErrorName() string {
	return "BusinessFreeContactGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFreeContactGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFreeContactGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFreeContactGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFreeContactGetRequestValidationError{}

// Validate checks the field values on BusinessFreeContactGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessFreeContactGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFreeContactGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessFreeContactGetResponseMultiError, or nil if none found.
func (m *BusinessFreeContactGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFreeContactGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessFreeContactGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessFreeContactGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessFreeContactGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessFreeContactGetResponseMultiError(errors)
	}

	return nil
}

// BusinessFreeContactGetResponseMultiError is an error wrapping multiple
// validation errors returned by BusinessFreeContactGetResponse.ValidateAll()
// if the designated constraints aren't met.
type BusinessFreeContactGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFreeContactGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFreeContactGetResponseMultiError) AllErrors() []error { return m }

// BusinessFreeContactGetResponseValidationError is the validation error
// returned by BusinessFreeContactGetResponse.Validate if the designated
// constraints aren't met.
type BusinessFreeContactGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFreeContactGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFreeContactGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFreeContactGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFreeContactGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFreeContactGetResponseValidationError) ErrorName() string {
	return "BusinessFreeContactGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFreeContactGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFreeContactGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFreeContactGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFreeContactGetResponseValidationError{}

// Validate checks the field values on BusinessBuyAdvertiseSetupPostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessBuyAdvertiseSetupPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessBuyAdvertiseSetupPostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessBuyAdvertiseSetupPostRequestMultiError, or nil if none found.
func (m *BusinessBuyAdvertiseSetupPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertiseSetupPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Amount

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return BusinessBuyAdvertiseSetupPostRequestMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertiseSetupPostRequestMultiError is an error wrapping multiple
// validation errors returned by
// BusinessBuyAdvertiseSetupPostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessBuyAdvertiseSetupPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertiseSetupPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertiseSetupPostRequestMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertiseSetupPostRequestValidationError is the validation error
// returned by BusinessBuyAdvertiseSetupPostRequest.Validate if the designated
// constraints aren't met.
type BusinessBuyAdvertiseSetupPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) ErrorName() string {
	return "BusinessBuyAdvertiseSetupPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertiseSetupPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertiseSetupPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertiseSetupPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertiseSetupPostRequestValidationError{}

// Validate checks the field values on BusinessBuyAdvertiseSetupPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessBuyAdvertiseSetupPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessBuyAdvertiseSetupPostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessBuyAdvertiseSetupPostResponseMultiError, or nil if none found.
func (m *BusinessBuyAdvertiseSetupPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertiseSetupPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessBuyAdvertiseSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessBuyAdvertiseSetupPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessBuyAdvertiseSetupPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessBuyAdvertiseSetupPostResponseMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertiseSetupPostResponseMultiError is an error wrapping
// multiple validation errors returned by
// BusinessBuyAdvertiseSetupPostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessBuyAdvertiseSetupPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertiseSetupPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertiseSetupPostResponseMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertiseSetupPostResponseValidationError is the validation error
// returned by BusinessBuyAdvertiseSetupPostResponse.Validate if the
// designated constraints aren't met.
type BusinessBuyAdvertiseSetupPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) ErrorName() string {
	return "BusinessBuyAdvertiseSetupPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertiseSetupPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertiseSetupPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertiseSetupPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertiseSetupPostResponseValidationError{}

// Validate checks the field values on BusinessBuyAdvertisePostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessBuyAdvertisePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessBuyAdvertisePostRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessBuyAdvertisePostRequestMultiError, or nil if none found.
func (m *BusinessBuyAdvertisePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertisePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for AdvertisePackageId

	// no validation rules for PackageName

	// no validation rules for Price

	// no validation rules for BannerUrl

	// no validation rules for Description

	// no validation rules for Zipcode

	// no validation rules for CategoryName

	// no validation rules for CategoryId

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return BusinessBuyAdvertisePostRequestMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertisePostRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessBuyAdvertisePostRequest.ValidateAll()
// if the designated constraints aren't met.
type BusinessBuyAdvertisePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertisePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertisePostRequestMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertisePostRequestValidationError is the validation error
// returned by BusinessBuyAdvertisePostRequest.Validate if the designated
// constraints aren't met.
type BusinessBuyAdvertisePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertisePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertisePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertisePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertisePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertisePostRequestValidationError) ErrorName() string {
	return "BusinessBuyAdvertisePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertisePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertisePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertisePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertisePostRequestValidationError{}

// Validate checks the field values on BusinessBuyAdvertisePostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessBuyAdvertisePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessBuyAdvertisePostResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessBuyAdvertisePostResponseMultiError, or nil if none found.
func (m *BusinessBuyAdvertisePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertisePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessBuyAdvertisePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessBuyAdvertisePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessBuyAdvertisePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessBuyAdvertisePostResponseMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertisePostResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessBuyAdvertisePostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessBuyAdvertisePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertisePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertisePostResponseMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertisePostResponseValidationError is the validation error
// returned by BusinessBuyAdvertisePostResponse.Validate if the designated
// constraints aren't met.
type BusinessBuyAdvertisePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertisePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertisePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertisePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertisePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertisePostResponseValidationError) ErrorName() string {
	return "BusinessBuyAdvertisePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertisePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertisePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertisePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertisePostResponseValidationError{}

// Validate checks the field values on BusinessVerifyRefCodePutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessVerifyRefCodePutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessVerifyRefCodePutRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessVerifyRefCodePutRequestMultiError, or nil if none found.
func (m *BusinessVerifyRefCodePutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessVerifyRefCodePutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return BusinessVerifyRefCodePutRequestMultiError(errors)
	}

	return nil
}

// BusinessVerifyRefCodePutRequestMultiError is an error wrapping multiple
// validation errors returned by BusinessVerifyRefCodePutRequest.ValidateAll()
// if the designated constraints aren't met.
type BusinessVerifyRefCodePutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessVerifyRefCodePutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessVerifyRefCodePutRequestMultiError) AllErrors() []error { return m }

// BusinessVerifyRefCodePutRequestValidationError is the validation error
// returned by BusinessVerifyRefCodePutRequest.Validate if the designated
// constraints aren't met.
type BusinessVerifyRefCodePutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessVerifyRefCodePutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessVerifyRefCodePutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessVerifyRefCodePutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessVerifyRefCodePutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessVerifyRefCodePutRequestValidationError) ErrorName() string {
	return "BusinessVerifyRefCodePutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessVerifyRefCodePutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessVerifyRefCodePutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessVerifyRefCodePutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessVerifyRefCodePutRequestValidationError{}

// Validate checks the field values on BusinessVerifyRefCodePutResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessVerifyRefCodePutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessVerifyRefCodePutResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessVerifyRefCodePutResponseMultiError, or nil if none found.
func (m *BusinessVerifyRefCodePutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessVerifyRefCodePutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessVerifyRefCodePutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessVerifyRefCodePutResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessVerifyRefCodePutResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessVerifyRefCodePutResponseMultiError(errors)
	}

	return nil
}

// BusinessVerifyRefCodePutResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessVerifyRefCodePutResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessVerifyRefCodePutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessVerifyRefCodePutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessVerifyRefCodePutResponseMultiError) AllErrors() []error { return m }

// BusinessVerifyRefCodePutResponseValidationError is the validation error
// returned by BusinessVerifyRefCodePutResponse.Validate if the designated
// constraints aren't met.
type BusinessVerifyRefCodePutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessVerifyRefCodePutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessVerifyRefCodePutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessVerifyRefCodePutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessVerifyRefCodePutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessVerifyRefCodePutResponseValidationError) ErrorName() string {
	return "BusinessVerifyRefCodePutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessVerifyRefCodePutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessVerifyRefCodePutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessVerifyRefCodePutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessVerifyRefCodePutResponseValidationError{}

// Validate checks the field values on BusinessValidateBuyAdvertisePostRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessValidateBuyAdvertisePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessValidateBuyAdvertisePostRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessValidateBuyAdvertisePostRequestMultiError, or nil if none found.
func (m *BusinessValidateBuyAdvertisePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessValidateBuyAdvertisePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for CategoryId

	// no validation rules for Zipcode

	if len(errors) > 0 {
		return BusinessValidateBuyAdvertisePostRequestMultiError(errors)
	}

	return nil
}

// BusinessValidateBuyAdvertisePostRequestMultiError is an error wrapping
// multiple validation errors returned by
// BusinessValidateBuyAdvertisePostRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessValidateBuyAdvertisePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessValidateBuyAdvertisePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessValidateBuyAdvertisePostRequestMultiError) AllErrors() []error { return m }

// BusinessValidateBuyAdvertisePostRequestValidationError is the validation
// error returned by BusinessValidateBuyAdvertisePostRequest.Validate if the
// designated constraints aren't met.
type BusinessValidateBuyAdvertisePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidateBuyAdvertisePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidateBuyAdvertisePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidateBuyAdvertisePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidateBuyAdvertisePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidateBuyAdvertisePostRequestValidationError) ErrorName() string {
	return "BusinessValidateBuyAdvertisePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessValidateBuyAdvertisePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessValidateBuyAdvertisePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidateBuyAdvertisePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidateBuyAdvertisePostRequestValidationError{}

// Validate checks the field values on BusinessValidateBuyAdvertisePostResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessValidateBuyAdvertisePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessValidateBuyAdvertisePostResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessValidateBuyAdvertisePostResponseMultiError, or nil if none found.
func (m *BusinessValidateBuyAdvertisePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessValidateBuyAdvertisePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessValidateBuyAdvertisePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessValidateBuyAdvertisePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessValidateBuyAdvertisePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessValidateBuyAdvertisePostResponseMultiError(errors)
	}

	return nil
}

// BusinessValidateBuyAdvertisePostResponseMultiError is an error wrapping
// multiple validation errors returned by
// BusinessValidateBuyAdvertisePostResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessValidateBuyAdvertisePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessValidateBuyAdvertisePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessValidateBuyAdvertisePostResponseMultiError) AllErrors() []error { return m }

// BusinessValidateBuyAdvertisePostResponseValidationError is the validation
// error returned by BusinessValidateBuyAdvertisePostResponse.Validate if the
// designated constraints aren't met.
type BusinessValidateBuyAdvertisePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidateBuyAdvertisePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidateBuyAdvertisePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidateBuyAdvertisePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidateBuyAdvertisePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidateBuyAdvertisePostResponseValidationError) ErrorName() string {
	return "BusinessValidateBuyAdvertisePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessValidateBuyAdvertisePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessValidateBuyAdvertisePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidateBuyAdvertisePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidateBuyAdvertisePostResponseValidationError{}

// Validate checks the field values on UserStateGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserStateGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStateGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStateGetRequestMultiError, or nil if none found.
func (m *UserStateGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStateGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserStateGetRequestMultiError(errors)
	}

	return nil
}

// UserStateGetRequestMultiError is an error wrapping multiple validation
// errors returned by UserStateGetRequest.ValidateAll() if the designated
// constraints aren't met.
type UserStateGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStateGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStateGetRequestMultiError) AllErrors() []error { return m }

// UserStateGetRequestValidationError is the validation error returned by
// UserStateGetRequest.Validate if the designated constraints aren't met.
type UserStateGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStateGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStateGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStateGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStateGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStateGetRequestValidationError) ErrorName() string {
	return "UserStateGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserStateGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStateGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStateGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStateGetRequestValidationError{}

// Validate checks the field values on UserStateGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserStateGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStateGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStateGetResponseMultiError, or nil if none found.
func (m *UserStateGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStateGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserStateGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserStateGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserStateGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserStateGetResponseMultiError(errors)
	}

	return nil
}

// UserStateGetResponseMultiError is an error wrapping multiple validation
// errors returned by UserStateGetResponse.ValidateAll() if the designated
// constraints aren't met.
type UserStateGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStateGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStateGetResponseMultiError) AllErrors() []error { return m }

// UserStateGetResponseValidationError is the validation error returned by
// UserStateGetResponse.Validate if the designated constraints aren't met.
type UserStateGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStateGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStateGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStateGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStateGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStateGetResponseValidationError) ErrorName() string {
	return "UserStateGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserStateGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStateGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStateGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStateGetResponseValidationError{}

// Validate checks the field values on StatisticGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticGetRequestMultiError, or nil if none found.
func (m *StatisticGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatisticGetRequestMultiError(errors)
	}

	return nil
}

// StatisticGetRequestMultiError is an error wrapping multiple validation
// errors returned by StatisticGetRequest.ValidateAll() if the designated
// constraints aren't met.
type StatisticGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticGetRequestMultiError) AllErrors() []error { return m }

// StatisticGetRequestValidationError is the validation error returned by
// StatisticGetRequest.Validate if the designated constraints aren't met.
type StatisticGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticGetRequestValidationError) ErrorName() string {
	return "StatisticGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticGetRequestValidationError{}

// Validate checks the field values on StatisticGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticGetResponseMultiError, or nil if none found.
func (m *StatisticGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatisticGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatisticGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatisticGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatisticGetResponseMultiError(errors)
	}

	return nil
}

// StatisticGetResponseMultiError is an error wrapping multiple validation
// errors returned by StatisticGetResponse.ValidateAll() if the designated
// constraints aren't met.
type StatisticGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticGetResponseMultiError) AllErrors() []error { return m }

// StatisticGetResponseValidationError is the validation error returned by
// StatisticGetResponse.Validate if the designated constraints aren't met.
type StatisticGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticGetResponseValidationError) ErrorName() string {
	return "StatisticGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticGetResponseValidationError{}

// Validate checks the field values on ValidateMailGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateMailGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateMailGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateMailGetRequestMultiError, or nil if none found.
func (m *ValidateMailGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateMailGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mail

	if len(errors) > 0 {
		return ValidateMailGetRequestMultiError(errors)
	}

	return nil
}

// ValidateMailGetRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateMailGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateMailGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateMailGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateMailGetRequestMultiError) AllErrors() []error { return m }

// ValidateMailGetRequestValidationError is the validation error returned by
// ValidateMailGetRequest.Validate if the designated constraints aren't met.
type ValidateMailGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateMailGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateMailGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateMailGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateMailGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateMailGetRequestValidationError) ErrorName() string {
	return "ValidateMailGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateMailGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateMailGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateMailGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateMailGetRequestValidationError{}

// Validate checks the field values on ValidateMailGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateMailGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateMailGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateMailGetResponseMultiError, or nil if none found.
func (m *ValidateMailGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateMailGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateMailGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateMailGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateMailGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateMailGetResponseMultiError(errors)
	}

	return nil
}

// ValidateMailGetResponseMultiError is an error wrapping multiple validation
// errors returned by ValidateMailGetResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateMailGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateMailGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateMailGetResponseMultiError) AllErrors() []error { return m }

// ValidateMailGetResponseValidationError is the validation error returned by
// ValidateMailGetResponse.Validate if the designated constraints aren't met.
type ValidateMailGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateMailGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateMailGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateMailGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateMailGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateMailGetResponseValidationError) ErrorName() string {
	return "ValidateMailGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateMailGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateMailGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateMailGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateMailGetResponseValidationError{}

// Validate checks the field values on BusinessesAlreadyOrderedGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessesAlreadyOrderedGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesAlreadyOrderedGetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessesAlreadyOrderedGetRequestMultiError, or nil if none found.
func (m *BusinessesAlreadyOrderedGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesAlreadyOrderedGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XUserId

	// no validation rules for Zipcode

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return BusinessesAlreadyOrderedGetRequestMultiError(errors)
	}

	return nil
}

// BusinessesAlreadyOrderedGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// BusinessesAlreadyOrderedGetRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessesAlreadyOrderedGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesAlreadyOrderedGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesAlreadyOrderedGetRequestMultiError) AllErrors() []error { return m }

// BusinessesAlreadyOrderedGetRequestValidationError is the validation error
// returned by BusinessesAlreadyOrderedGetRequest.Validate if the designated
// constraints aren't met.
type BusinessesAlreadyOrderedGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesAlreadyOrderedGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesAlreadyOrderedGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesAlreadyOrderedGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesAlreadyOrderedGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesAlreadyOrderedGetRequestValidationError) ErrorName() string {
	return "BusinessesAlreadyOrderedGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesAlreadyOrderedGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesAlreadyOrderedGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesAlreadyOrderedGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesAlreadyOrderedGetRequestValidationError{}

// Validate checks the field values on BusinessesAlreadyOrderedGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessesAlreadyOrderedGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesAlreadyOrderedGetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessesAlreadyOrderedGetResponseMultiError, or nil if none found.
func (m *BusinessesAlreadyOrderedGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesAlreadyOrderedGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessesAlreadyOrderedGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessesAlreadyOrderedGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessesAlreadyOrderedGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessesAlreadyOrderedGetResponseMultiError(errors)
	}

	return nil
}

// BusinessesAlreadyOrderedGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// BusinessesAlreadyOrderedGetResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessesAlreadyOrderedGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesAlreadyOrderedGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesAlreadyOrderedGetResponseMultiError) AllErrors() []error { return m }

// BusinessesAlreadyOrderedGetResponseValidationError is the validation error
// returned by BusinessesAlreadyOrderedGetResponse.Validate if the designated
// constraints aren't met.
type BusinessesAlreadyOrderedGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesAlreadyOrderedGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesAlreadyOrderedGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesAlreadyOrderedGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesAlreadyOrderedGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesAlreadyOrderedGetResponseValidationError) ErrorName() string {
	return "BusinessesAlreadyOrderedGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesAlreadyOrderedGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesAlreadyOrderedGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesAlreadyOrderedGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesAlreadyOrderedGetResponseValidationError{}

// Validate checks the field values on SubscribePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribePostResponse_DataMultiError, or nil if none found.
func (m *SubscribePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribePostResponse_DataMultiError(errors)
	}

	return nil
}

// SubscribePostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by SubscribePostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type SubscribePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePostResponse_DataMultiError) AllErrors() []error { return m }

// SubscribePostResponse_DataValidationError is the validation error returned
// by SubscribePostResponse_Data.Validate if the designated constraints aren't met.
type SubscribePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePostResponse_DataValidationError) ErrorName() string {
	return "SubscribePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePostResponse_DataValidationError{}

// Validate checks the field values on UnsubscribePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribePostResponse_DataMultiError, or nil if none found.
func (m *UnsubscribePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnsubscribePostResponse_DataMultiError(errors)
	}

	return nil
}

// UnsubscribePostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UnsubscribePostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UnsubscribePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribePostResponse_DataMultiError) AllErrors() []error { return m }

// UnsubscribePostResponse_DataValidationError is the validation error returned
// by UnsubscribePostResponse_Data.Validate if the designated constraints
// aren't met.
type UnsubscribePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribePostResponse_DataValidationError) ErrorName() string {
	return "UnsubscribePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribePostResponse_DataValidationError{}

// Validate checks the field values on ConversationPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConversationPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConversationPostResponse_DataMultiError, or nil if none found.
func (m *ConversationPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversation() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConversationPostResponse_DataValidationError{
						field:  fmt.Sprintf("Conversation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConversationPostResponse_DataValidationError{
						field:  fmt.Sprintf("Conversation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConversationPostResponse_DataValidationError{
					field:  fmt.Sprintf("Conversation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConversationPostResponse_DataMultiError(errors)
	}

	return nil
}

// ConversationPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ConversationPostResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type ConversationPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationPostResponse_DataMultiError) AllErrors() []error { return m }

// ConversationPostResponse_DataValidationError is the validation error
// returned by ConversationPostResponse_Data.Validate if the designated
// constraints aren't met.
type ConversationPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationPostResponse_DataValidationError) ErrorName() string {
	return "ConversationPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ConversationPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationPostResponse_DataValidationError{}

// Validate checks the field values on Conversation_Member with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Conversation_Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conversation_Member with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Conversation_MemberMultiError, or nil if none found.
func (m *Conversation_Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Conversation_Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return Conversation_MemberMultiError(errors)
	}

	return nil
}

// Conversation_MemberMultiError is an error wrapping multiple validation
// errors returned by Conversation_Member.ValidateAll() if the designated
// constraints aren't met.
type Conversation_MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Conversation_MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Conversation_MemberMultiError) AllErrors() []error { return m }

// Conversation_MemberValidationError is the validation error returned by
// Conversation_Member.Validate if the designated constraints aren't met.
type Conversation_MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Conversation_MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Conversation_MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Conversation_MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Conversation_MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Conversation_MemberValidationError) ErrorName() string {
	return "Conversation_MemberValidationError"
}

// Error satisfies the builtin error interface
func (e Conversation_MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversation_Member.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Conversation_MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Conversation_MemberValidationError{}

// Validate checks the field values on StripePaymentMethodGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StripePaymentMethodGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodGetResponse_DataMultiError, or nil if none found.
func (m *StripePaymentMethodGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethodInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StripePaymentMethodGetResponse_DataValidationError{
					field:  "PaymentMethodInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StripePaymentMethodGetResponse_DataValidationError{
					field:  "PaymentMethodInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethodInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StripePaymentMethodGetResponse_DataValidationError{
				field:  "PaymentMethodInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StripePaymentMethodGetResponse_DataMultiError(errors)
	}

	return nil
}

// StripePaymentMethodGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// StripePaymentMethodGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type StripePaymentMethodGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodGetResponse_DataMultiError) AllErrors() []error { return m }

// StripePaymentMethodGetResponse_DataValidationError is the validation error
// returned by StripePaymentMethodGetResponse_Data.Validate if the designated
// constraints aren't met.
type StripePaymentMethodGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodGetResponse_DataValidationError) ErrorName() string {
	return "StripePaymentMethodGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodGetResponse_DataValidationError{}

// Validate checks the field values on
// BusinessPaymentMethodSetupPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessPaymentMethodSetupPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodSetupPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessPaymentMethodSetupPostResponse_DataMultiError, or nil if none found.
func (m *BusinessPaymentMethodSetupPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodSetupPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return BusinessPaymentMethodSetupPostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodSetupPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodSetupPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodSetupPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodSetupPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodSetupPostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodSetupPostResponse_DataValidationError is the validation
// error returned by BusinessPaymentMethodSetupPostResponse_Data.Validate if
// the designated constraints aren't met.
type BusinessPaymentMethodSetupPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) ErrorName() string {
	return "BusinessPaymentMethodSetupPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodSetupPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodSetupPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodSetupPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodSetupPostResponse_DataValidationError{}

// Validate checks the field values on
// BusinessPaymentMethodDeletePostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessPaymentMethodDeletePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodDeletePostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessPaymentMethodDeletePostResponse_DataMultiError, or nil if none found.
func (m *BusinessPaymentMethodDeletePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodDeletePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessPaymentMethodDeletePostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodDeletePostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodDeletePostResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type BusinessPaymentMethodDeletePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodDeletePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodDeletePostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodDeletePostResponse_DataValidationError is the
// validation error returned by
// BusinessPaymentMethodDeletePostResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessPaymentMethodDeletePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) ErrorName() string {
	return "BusinessPaymentMethodDeletePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodDeletePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodDeletePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodDeletePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodDeletePostResponse_DataValidationError{}

// Validate checks the field values on UserProjectsGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserProjectsGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProjectsGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProjectsGetResponse_DataMultiError, or nil if none found.
func (m *UserProjectsGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProjectsGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserProjectsGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserProjectsGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserProjectsGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProjectsGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProjectsGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProjectsGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserProjectsGetResponse_DataMultiError(errors)
	}

	return nil
}

// UserProjectsGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UserProjectsGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UserProjectsGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProjectsGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProjectsGetResponse_DataMultiError) AllErrors() []error { return m }

// UserProjectsGetResponse_DataValidationError is the validation error returned
// by UserProjectsGetResponse_Data.Validate if the designated constraints
// aren't met.
type UserProjectsGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProjectsGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProjectsGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProjectsGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProjectsGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProjectsGetResponse_DataValidationError) ErrorName() string {
	return "UserProjectsGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserProjectsGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProjectsGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProjectsGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProjectsGetResponse_DataValidationError{}

// Validate checks the field values on CancelProjectPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProjectPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProjectPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelProjectPostResponse_DataMultiError, or nil if none found.
func (m *CancelProjectPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProjectPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelProjectPostResponse_DataMultiError(errors)
	}

	return nil
}

// CancelProjectPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CancelProjectPostResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type CancelProjectPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProjectPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProjectPostResponse_DataMultiError) AllErrors() []error { return m }

// CancelProjectPostResponse_DataValidationError is the validation error
// returned by CancelProjectPostResponse_Data.Validate if the designated
// constraints aren't met.
type CancelProjectPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProjectPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProjectPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProjectPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProjectPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProjectPostResponse_DataValidationError) ErrorName() string {
	return "CancelProjectPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProjectPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProjectPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProjectPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProjectPostResponse_DataValidationError{}

// Validate checks the field values on AdminCategoryPostResponese_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCategoryPostResponese_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostResponese_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostResponese_DataMultiError, or nil if none found.
func (m *AdminCategoryPostResponese_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostResponese_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminCategoryPostResponese_DataMultiError(errors)
	}

	return nil
}

// AdminCategoryPostResponese_DataMultiError is an error wrapping multiple
// validation errors returned by AdminCategoryPostResponese_Data.ValidateAll()
// if the designated constraints aren't met.
type AdminCategoryPostResponese_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostResponese_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostResponese_DataMultiError) AllErrors() []error { return m }

// AdminCategoryPostResponese_DataValidationError is the validation error
// returned by AdminCategoryPostResponese_Data.Validate if the designated
// constraints aren't met.
type AdminCategoryPostResponese_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostResponese_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostResponese_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostResponese_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostResponese_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostResponese_DataValidationError) ErrorName() string {
	return "AdminCategoryPostResponese_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostResponese_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostResponese_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostResponese_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostResponese_DataValidationError{}

// Validate checks the field values on AdminCategoryPostEditResponese_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminCategoryPostEditResponese_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostEditResponese_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostEditResponese_DataMultiError, or nil if none found.
func (m *AdminCategoryPostEditResponese_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostEditResponese_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminCategoryPostEditResponese_DataMultiError(errors)
	}

	return nil
}

// AdminCategoryPostEditResponese_DataMultiError is an error wrapping multiple
// validation errors returned by
// AdminCategoryPostEditResponese_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminCategoryPostEditResponese_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostEditResponese_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostEditResponese_DataMultiError) AllErrors() []error { return m }

// AdminCategoryPostEditResponese_DataValidationError is the validation error
// returned by AdminCategoryPostEditResponese_Data.Validate if the designated
// constraints aren't met.
type AdminCategoryPostEditResponese_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostEditResponese_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostEditResponese_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostEditResponese_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostEditResponese_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostEditResponese_DataValidationError) ErrorName() string {
	return "AdminCategoryPostEditResponese_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostEditResponese_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostEditResponese_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostEditResponese_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostEditResponese_DataValidationError{}

// Validate checks the field values on AdminCategoryPostDeleteResponese_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminCategoryPostDeleteResponese_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCategoryPostDeleteResponese_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminCategoryPostDeleteResponese_DataMultiError, or nil if none found.
func (m *AdminCategoryPostDeleteResponese_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCategoryPostDeleteResponese_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminCategoryPostDeleteResponese_DataMultiError(errors)
	}

	return nil
}

// AdminCategoryPostDeleteResponese_DataMultiError is an error wrapping
// multiple validation errors returned by
// AdminCategoryPostDeleteResponese_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminCategoryPostDeleteResponese_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCategoryPostDeleteResponese_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCategoryPostDeleteResponese_DataMultiError) AllErrors() []error { return m }

// AdminCategoryPostDeleteResponese_DataValidationError is the validation error
// returned by AdminCategoryPostDeleteResponese_Data.Validate if the
// designated constraints aren't met.
type AdminCategoryPostDeleteResponese_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCategoryPostDeleteResponese_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCategoryPostDeleteResponese_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCategoryPostDeleteResponese_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCategoryPostDeleteResponese_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCategoryPostDeleteResponese_DataValidationError) ErrorName() string {
	return "AdminCategoryPostDeleteResponese_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCategoryPostDeleteResponese_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCategoryPostDeleteResponese_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCategoryPostDeleteResponese_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCategoryPostDeleteResponese_DataValidationError{}

// Validate checks the field values on AdminGroupGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupGetResponse_DataMultiError, or nil if none found.
func (m *AdminGroupGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminGroupGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminGroupGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminGroupGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminGroupGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminGroupGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminGroupGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminGroupGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdminGroupGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminGroupGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AdminGroupGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupGetResponse_DataMultiError) AllErrors() []error { return m }

// AdminGroupGetResponse_DataValidationError is the validation error returned
// by AdminGroupGetResponse_Data.Validate if the designated constraints aren't met.
type AdminGroupGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupGetResponse_DataValidationError) ErrorName() string {
	return "AdminGroupGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupGetResponse_DataValidationError{}

// Validate checks the field values on AdminGroupPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPostResponse_DataMultiError, or nil if none found.
func (m *AdminGroupPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminGroupPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminGroupPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminGroupPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AdminGroupPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminGroupPostResponse_DataValidationError is the validation error returned
// by AdminGroupPostResponse_Data.Validate if the designated constraints
// aren't met.
type AdminGroupPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPostResponse_DataValidationError) ErrorName() string {
	return "AdminGroupPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPostResponse_DataValidationError{}

// Validate checks the field values on AdminGroupPutResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGroupPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGroupPutResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGroupPutResponse_DataMultiError, or nil if none found.
func (m *AdminGroupPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGroupPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminGroupPutResponse_DataMultiError(errors)
	}

	return nil
}

// AdminGroupPutResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminGroupPutResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AdminGroupPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGroupPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGroupPutResponse_DataMultiError) AllErrors() []error { return m }

// AdminGroupPutResponse_DataValidationError is the validation error returned
// by AdminGroupPutResponse_Data.Validate if the designated constraints aren't met.
type AdminGroupPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGroupPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGroupPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGroupPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGroupPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGroupPutResponse_DataValidationError) ErrorName() string {
	return "AdminGroupPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGroupPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGroupPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGroupPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGroupPutResponse_DataValidationError{}

// Validate checks the field values on AuthMailPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthMailPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthMailPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthMailPostResponse_DataMultiError, or nil if none found.
func (m *AuthMailPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthMailPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	if len(errors) > 0 {
		return AuthMailPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthMailPostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AuthMailPostResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type AuthMailPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMailPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMailPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthMailPostResponse_DataValidationError is the validation error returned by
// AuthMailPostResponse_Data.Validate if the designated constraints aren't met.
type AuthMailPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthMailPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthMailPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthMailPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthMailPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthMailPostResponse_DataValidationError) ErrorName() string {
	return "AuthMailPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthMailPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthMailPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthMailPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthMailPostResponse_DataValidationError{}

// Validate checks the field values on StripeSetupPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeSetupPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeSetupPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeSetupPostResponse_DataMultiError, or nil if none found.
func (m *StripeSetupPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeSetupPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SetupIntentId

	if len(errors) > 0 {
		return StripeSetupPostResponse_DataMultiError(errors)
	}

	return nil
}

// StripeSetupPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by StripeSetupPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type StripeSetupPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeSetupPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeSetupPostResponse_DataMultiError) AllErrors() []error { return m }

// StripeSetupPostResponse_DataValidationError is the validation error returned
// by StripeSetupPostResponse_Data.Validate if the designated constraints
// aren't met.
type StripeSetupPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeSetupPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeSetupPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeSetupPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeSetupPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeSetupPostResponse_DataValidationError) ErrorName() string {
	return "StripeSetupPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StripeSetupPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeSetupPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeSetupPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeSetupPostResponse_DataValidationError{}

// Validate checks the field values on BusinessPaymentMethodGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPaymentMethodGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessPaymentMethodGetResponse_DataMultiError, or nil if none found.
func (m *BusinessPaymentMethodGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPaymentMethodGetResponse_DataValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPaymentMethodGetResponse_DataValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPaymentMethodGetResponse_DataValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPaymentMethodGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodGetResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodGetResponse_DataValidationError is the validation error
// returned by BusinessPaymentMethodGetResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodGetResponse_DataValidationError) ErrorName() string {
	return "BusinessPaymentMethodGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodGetResponse_DataValidationError{}

// Validate checks the field values on BusinessPaymentMethodPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessPaymentMethodPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessPaymentMethodPostResponse_Data with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessPaymentMethodPostResponse_DataMultiError, or nil if none found.
func (m *BusinessPaymentMethodPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPaymentMethodPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessPaymentMethodPostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPaymentMethodPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessPaymentMethodPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessPaymentMethodPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPaymentMethodPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPaymentMethodPostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPaymentMethodPostResponse_DataValidationError is the validation
// error returned by BusinessPaymentMethodPostResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessPaymentMethodPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPaymentMethodPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPaymentMethodPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPaymentMethodPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPaymentMethodPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPaymentMethodPostResponse_DataValidationError) ErrorName() string {
	return "BusinessPaymentMethodPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPaymentMethodPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPaymentMethodPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPaymentMethodPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPaymentMethodPostResponse_DataValidationError{}

// Validate checks the field values on StripePaymentMethodPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StripePaymentMethodPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripePaymentMethodPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StripePaymentMethodPostResponse_DataMultiError, or nil if none found.
func (m *StripePaymentMethodPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StripePaymentMethodPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StripePaymentMethodPostResponse_DataMultiError(errors)
	}

	return nil
}

// StripePaymentMethodPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// StripePaymentMethodPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type StripePaymentMethodPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripePaymentMethodPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripePaymentMethodPostResponse_DataMultiError) AllErrors() []error { return m }

// StripePaymentMethodPostResponse_DataValidationError is the validation error
// returned by StripePaymentMethodPostResponse_Data.Validate if the designated
// constraints aren't met.
type StripePaymentMethodPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripePaymentMethodPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripePaymentMethodPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripePaymentMethodPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripePaymentMethodPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripePaymentMethodPostResponse_DataValidationError) ErrorName() string {
	return "StripePaymentMethodPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StripePaymentMethodPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripePaymentMethodPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripePaymentMethodPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripePaymentMethodPostResponse_DataValidationError{}

// Validate checks the field values on StripeKeyGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeKeyGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeKeyGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeKeyGetResponse_DataMultiError, or nil if none found.
func (m *StripeKeyGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeKeyGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return StripeKeyGetResponse_DataMultiError(errors)
	}

	return nil
}

// StripeKeyGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by StripeKeyGetResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type StripeKeyGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeKeyGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeKeyGetResponse_DataMultiError) AllErrors() []error { return m }

// StripeKeyGetResponse_DataValidationError is the validation error returned by
// StripeKeyGetResponse_Data.Validate if the designated constraints aren't met.
type StripeKeyGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeKeyGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeKeyGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeKeyGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeKeyGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeKeyGetResponse_DataValidationError) ErrorName() string {
	return "StripeKeyGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StripeKeyGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeKeyGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeKeyGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeKeyGetResponse_DataValidationError{}

// Validate checks the field values on FeedbacksPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbacksPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbacksPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbacksPostResponse_DataMultiError, or nil if none found.
func (m *FeedbacksPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbacksPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbacksPostResponse_DataValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbacksPostResponse_DataValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbacksPostResponse_DataValidationError{
				field:  "Feedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbacksPostResponse_DataMultiError(errors)
	}

	return nil
}

// FeedbacksPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by FeedbacksPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type FeedbacksPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbacksPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbacksPostResponse_DataMultiError) AllErrors() []error { return m }

// FeedbacksPostResponse_DataValidationError is the validation error returned
// by FeedbacksPostResponse_Data.Validate if the designated constraints aren't met.
type FeedbacksPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbacksPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbacksPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbacksPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbacksPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbacksPostResponse_DataValidationError) ErrorName() string {
	return "FeedbacksPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbacksPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbacksPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbacksPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbacksPostResponse_DataValidationError{}

// Validate checks the field values on FeedbackPutResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackPutResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackPutResponse_DataMultiError, or nil if none found.
func (m *FeedbackPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeedbackPutResponse_DataMultiError(errors)
	}

	return nil
}

// FeedbackPutResponse_DataMultiError is an error wrapping multiple validation
// errors returned by FeedbackPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type FeedbackPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackPutResponse_DataMultiError) AllErrors() []error { return m }

// FeedbackPutResponse_DataValidationError is the validation error returned by
// FeedbackPutResponse_Data.Validate if the designated constraints aren't met.
type FeedbackPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackPutResponse_DataValidationError) ErrorName() string {
	return "FeedbackPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackPutResponse_DataValidationError{}

// Validate checks the field values on FeedbackGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedbackGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedbackGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedbackGetResponse_DataMultiError, or nil if none found.
func (m *FeedbackGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedbackGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbackGetResponse_DataValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbackGetResponse_DataValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackGetResponse_DataValidationError{
				field:  "Feedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbackGetResponse_DataMultiError(errors)
	}

	return nil
}

// FeedbackGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by FeedbackGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type FeedbackGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackGetResponse_DataMultiError) AllErrors() []error { return m }

// FeedbackGetResponse_DataValidationError is the validation error returned by
// FeedbackGetResponse_Data.Validate if the designated constraints aren't met.
type FeedbackGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackGetResponse_DataValidationError) ErrorName() string {
	return "FeedbackGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FeedbackGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackGetResponse_DataValidationError{}

// Validate checks the field values on UpdateOrderStatusPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOrderStatusPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusPostResponse_DataMultiError, or nil if none found.
func (m *UpdateOrderStatusPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderStatusPostResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrderStatusPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusPostResponse_DataMultiError) AllErrors() []error { return m }

// UpdateOrderStatusPostResponse_DataValidationError is the validation error
// returned by UpdateOrderStatusPostResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateOrderStatusPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusPostResponse_DataValidationError) ErrorName() string {
	return "UpdateOrderStatusPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusPostResponse_DataValidationError{}

// Validate checks the field values on UpdateAllOrderStatusPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateAllOrderStatusPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAllOrderStatusPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAllOrderStatusPostResponse_DataMultiError, or nil if none found.
func (m *UpdateAllOrderStatusPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAllOrderStatusPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAllOrderStatusPostResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateAllOrderStatusPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// UpdateAllOrderStatusPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateAllOrderStatusPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAllOrderStatusPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAllOrderStatusPostResponse_DataMultiError) AllErrors() []error { return m }

// UpdateAllOrderStatusPostResponse_DataValidationError is the validation error
// returned by UpdateAllOrderStatusPostResponse_Data.Validate if the
// designated constraints aren't met.
type UpdateAllOrderStatusPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAllOrderStatusPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAllOrderStatusPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAllOrderStatusPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAllOrderStatusPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAllOrderStatusPostResponse_DataValidationError) ErrorName() string {
	return "UpdateAllOrderStatusPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAllOrderStatusPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAllOrderStatusPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAllOrderStatusPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAllOrderStatusPostResponse_DataValidationError{}

// Validate checks the field values on CategoryGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetResponse_DataMultiError, or nil if none found.
func (m *CategoryGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryGetResponse_DataValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryGetResponse_DataValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryGetResponse_DataValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryGetResponse_DataMultiError(errors)
	}

	return nil
}

// CategoryGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CategoryGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CategoryGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetResponse_DataMultiError) AllErrors() []error { return m }

// CategoryGetResponse_DataValidationError is the validation error returned by
// CategoryGetResponse_Data.Validate if the designated constraints aren't met.
type CategoryGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetResponse_DataValidationError) ErrorName() string {
	return "CategoryGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetResponse_DataValidationError{}

// Validate checks the field values on OrdersPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrdersPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersPostResponse_DataMultiError, or nil if none found.
func (m *OrdersPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrdersPostResponse_DataMultiError(errors)
	}

	return nil
}

// OrdersPostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by OrdersPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type OrdersPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersPostResponse_DataMultiError) AllErrors() []error { return m }

// OrdersPostResponse_DataValidationError is the validation error returned by
// OrdersPostResponse_Data.Validate if the designated constraints aren't met.
type OrdersPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersPostResponse_DataValidationError) ErrorName() string {
	return "OrdersPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e OrdersPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersPostResponse_DataValidationError{}

// Validate checks the field values on BusinessRatingGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessRatingGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessRatingGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessRatingGetResponse_DataMultiError, or nil if none found.
func (m *BusinessRatingGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessRatingGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessRatingGetResponse_DataValidationError{
						field:  fmt.Sprintf("Rate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessRatingGetResponse_DataValidationError{
						field:  fmt.Sprintf("Rate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessRatingGetResponse_DataValidationError{
					field:  fmt.Sprintf("Rate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessRatingGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessRatingGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by BusinessRatingGetResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type BusinessRatingGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessRatingGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessRatingGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessRatingGetResponse_DataValidationError is the validation error
// returned by BusinessRatingGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessRatingGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessRatingGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessRatingGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessRatingGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessRatingGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessRatingGetResponse_DataValidationError) ErrorName() string {
	return "BusinessRatingGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessRatingGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessRatingGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessRatingGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessRatingGetResponse_DataValidationError{}

// Validate checks the field values on BusinessFeedbacksGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessFeedbacksGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFeedbacksGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessFeedbacksGetResponse_DataMultiError, or nil if none found.
func (m *BusinessFeedbacksGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFeedbacksGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessFeedbacksGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessFeedbacksGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessFeedbacksGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessFeedbacksGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessFeedbacksGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessFeedbacksGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessFeedbacksGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessFeedbacksGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// BusinessFeedbacksGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessFeedbacksGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFeedbacksGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFeedbacksGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessFeedbacksGetResponse_DataValidationError is the validation error
// returned by BusinessFeedbacksGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessFeedbacksGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFeedbacksGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFeedbacksGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFeedbacksGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFeedbacksGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFeedbacksGetResponse_DataValidationError) ErrorName() string {
	return "BusinessFeedbacksGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFeedbacksGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFeedbacksGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFeedbacksGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFeedbacksGetResponse_DataValidationError{}

// Validate checks the field values on BusinessServicesPutResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessServicesPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServicesPutResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessServicesPutResponse_DataMultiError, or nil if none found.
func (m *BusinessServicesPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServicesPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessServicesPutResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessServicesPutResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessServicesPutResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessServicesPutResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessServicesPutResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// BusinessServicesPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessServicesPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServicesPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServicesPutResponse_DataMultiError) AllErrors() []error { return m }

// BusinessServicesPutResponse_DataValidationError is the validation error
// returned by BusinessServicesPutResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessServicesPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServicesPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServicesPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServicesPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServicesPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServicesPutResponse_DataValidationError) ErrorName() string {
	return "BusinessServicesPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServicesPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServicesPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServicesPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServicesPutResponse_DataValidationError{}

// Validate checks the field values on CategoriesGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoriesGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoriesGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoriesGetResponse_DataMultiError, or nil if none found.
func (m *CategoriesGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoriesGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoriesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoriesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoriesGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoriesGetResponse_DataMultiError(errors)
	}

	return nil
}

// CategoriesGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CategoriesGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type CategoriesGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesGetResponse_DataMultiError) AllErrors() []error { return m }

// CategoriesGetResponse_DataValidationError is the validation error returned
// by CategoriesGetResponse_Data.Validate if the designated constraints aren't met.
type CategoriesGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesGetResponse_DataValidationError) ErrorName() string {
	return "CategoriesGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CategoriesGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoriesGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesGetResponse_DataValidationError{}

// Validate checks the field values on BusinessesGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessesGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessesGetResponse_DataMultiError, or nil if none found.
func (m *BusinessesGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessesGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessesGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessesGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessesGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by BusinessesGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type BusinessesGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessesGetResponse_DataValidationError is the validation error returned
// by BusinessesGetResponse_Data.Validate if the designated constraints aren't met.
type BusinessesGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesGetResponse_DataValidationError) ErrorName() string {
	return "BusinessesGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesGetResponse_DataValidationError{}

// Validate checks the field values on AuthCheckGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCheckGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCheckGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCheckGetResponse_DataMultiError, or nil if none found.
func (m *AuthCheckGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCheckGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Existed

	if len(errors) > 0 {
		return AuthCheckGetResponse_DataMultiError(errors)
	}

	return nil
}

// AuthCheckGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AuthCheckGetResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type AuthCheckGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCheckGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCheckGetResponse_DataMultiError) AllErrors() []error { return m }

// AuthCheckGetResponse_DataValidationError is the validation error returned by
// AuthCheckGetResponse_Data.Validate if the designated constraints aren't met.
type AuthCheckGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCheckGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCheckGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCheckGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCheckGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCheckGetResponse_DataValidationError) ErrorName() string {
	return "AuthCheckGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCheckGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCheckGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCheckGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCheckGetResponse_DataValidationError{}

// Validate checks the field values on BusinessServiceGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessServiceGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessServiceGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessServiceGetResponse_DataMultiError, or nil if none found.
func (m *BusinessServiceGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessServiceGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessServiceGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessServiceGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessServiceGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessServiceGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessServiceGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by BusinessServiceGetResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type BusinessServiceGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessServiceGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessServiceGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessServiceGetResponse_DataValidationError is the validation error
// returned by BusinessServiceGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessServiceGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessServiceGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessServiceGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessServiceGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessServiceGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessServiceGetResponse_DataValidationError) ErrorName() string {
	return "BusinessServiceGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessServiceGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessServiceGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessServiceGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessServiceGetResponse_DataValidationError{}

// Validate checks the field values on BusinessNearGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessNearGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessNearGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessNearGetResponse_DataMultiError, or nil if none found.
func (m *BusinessNearGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessNearGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessNearGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessNearGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessNearGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessNearGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessNearGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by BusinessNearGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type BusinessNearGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessNearGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessNearGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessNearGetResponse_DataValidationError is the validation error returned
// by BusinessNearGetResponse_Data.Validate if the designated constraints
// aren't met.
type BusinessNearGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessNearGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessNearGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessNearGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessNearGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessNearGetResponse_DataValidationError) ErrorName() string {
	return "BusinessNearGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessNearGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessNearGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessNearGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessNearGetResponse_DataValidationError{}

// Validate checks the field values on OrdersGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrdersGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdersGetResponse_DataMultiError, or nil if none found.
func (m *OrdersGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrdersGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrdersGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrdersGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdersGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdersGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdersGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrdersGetResponse_DataMultiError(errors)
	}

	return nil
}

// OrdersGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by OrdersGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type OrdersGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersGetResponse_DataMultiError) AllErrors() []error { return m }

// OrdersGetResponse_DataValidationError is the validation error returned by
// OrdersGetResponse_Data.Validate if the designated constraints aren't met.
type OrdersGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersGetResponse_DataValidationError) ErrorName() string {
	return "OrdersGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e OrdersGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersGetResponse_DataValidationError{}

// Validate checks the field values on BusinessInterestGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessInterestGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessInterestGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessInterestGetResponse_DataMultiError, or nil if none found.
func (m *BusinessInterestGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInterestGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessInterestGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessInterestGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessInterestGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessInterestGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessInterestGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// BusinessInterestGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessInterestGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInterestGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInterestGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessInterestGetResponse_DataValidationError is the validation error
// returned by BusinessInterestGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessInterestGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInterestGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInterestGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInterestGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInterestGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInterestGetResponse_DataValidationError) ErrorName() string {
	return "BusinessInterestGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInterestGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInterestGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInterestGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInterestGetResponse_DataValidationError{}

// Validate checks the field values on UploadUrlPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadUrlPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadUrlPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadUrlPostResponse_DataMultiError, or nil if none found.
func (m *UploadUrlPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadUrlPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadUrlPostResponse_DataMultiError(errors)
	}

	return nil
}

// UploadUrlPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UploadUrlPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UploadUrlPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadUrlPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadUrlPostResponse_DataMultiError) AllErrors() []error { return m }

// UploadUrlPostResponse_DataValidationError is the validation error returned
// by UploadUrlPostResponse_Data.Validate if the designated constraints aren't met.
type UploadUrlPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadUrlPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadUrlPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadUrlPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadUrlPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadUrlPostResponse_DataValidationError) ErrorName() string {
	return "UploadUrlPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UploadUrlPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadUrlPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadUrlPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadUrlPostResponse_DataValidationError{}

// Validate checks the field values on AdminBanUserPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBanUserPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBanUserPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBanUserPostResponse_DataMultiError, or nil if none found.
func (m *AdminBanUserPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBanUserPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminBanUserPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminBanUserPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminBanUserPostResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type AdminBanUserPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBanUserPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBanUserPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminBanUserPostResponse_DataValidationError is the validation error
// returned by AdminBanUserPostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminBanUserPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBanUserPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBanUserPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBanUserPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBanUserPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBanUserPostResponse_DataValidationError) ErrorName() string {
	return "AdminBanUserPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBanUserPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBanUserPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBanUserPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBanUserPostResponse_DataValidationError{}

// Validate checks the field values on AdminUsersUnbanPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminUsersUnbanPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersUnbanPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminUsersUnbanPostResponse_DataMultiError, or nil if none found.
func (m *AdminUsersUnbanPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersUnbanPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUsersUnbanPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminUsersUnbanPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AdminUsersUnbanPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminUsersUnbanPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersUnbanPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersUnbanPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminUsersUnbanPostResponse_DataValidationError is the validation error
// returned by AdminUsersUnbanPostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminUsersUnbanPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersUnbanPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersUnbanPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersUnbanPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersUnbanPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersUnbanPostResponse_DataValidationError) ErrorName() string {
	return "AdminUsersUnbanPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersUnbanPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersUnbanPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersUnbanPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersUnbanPostResponse_DataValidationError{}

// Validate checks the field values on AdminUsersDeletePostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminUsersDeletePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersDeletePostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminUsersDeletePostResponse_DataMultiError, or nil if none found.
func (m *AdminUsersDeletePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersDeletePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUsersDeletePostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminUsersDeletePostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AdminUsersDeletePostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminUsersDeletePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersDeletePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersDeletePostResponse_DataMultiError) AllErrors() []error { return m }

// AdminUsersDeletePostResponse_DataValidationError is the validation error
// returned by AdminUsersDeletePostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminUsersDeletePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersDeletePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersDeletePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersDeletePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersDeletePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersDeletePostResponse_DataValidationError) ErrorName() string {
	return "AdminUsersDeletePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersDeletePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersDeletePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersDeletePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersDeletePostResponse_DataValidationError{}

// Validate checks the field values on AdminBusinessesUnbanPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminBusinessesUnbanPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesUnbanPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminBusinessesUnbanPostResponse_DataMultiError, or nil if none found.
func (m *AdminBusinessesUnbanPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesUnbanPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminBusinessesUnbanPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminBusinessesUnbanPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// AdminBusinessesUnbanPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminBusinessesUnbanPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesUnbanPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesUnbanPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminBusinessesUnbanPostResponse_DataValidationError is the validation error
// returned by AdminBusinessesUnbanPostResponse_Data.Validate if the
// designated constraints aren't met.
type AdminBusinessesUnbanPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesUnbanPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesUnbanPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesUnbanPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesUnbanPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesUnbanPostResponse_DataValidationError) ErrorName() string {
	return "AdminBusinessesUnbanPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesUnbanPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesUnbanPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesUnbanPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesUnbanPostResponse_DataValidationError{}

// Validate checks the field values on AuthForgotResetPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthForgotResetPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotResetPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthForgotResetPostResponse_DataMultiError, or nil if none found.
func (m *AuthForgotResetPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotResetPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthForgotResetPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthForgotResetPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AuthForgotResetPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AuthForgotResetPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotResetPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotResetPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthForgotResetPostResponse_DataValidationError is the validation error
// returned by AuthForgotResetPostResponse_Data.Validate if the designated
// constraints aren't met.
type AuthForgotResetPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotResetPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotResetPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotResetPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotResetPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotResetPostResponse_DataValidationError) ErrorName() string {
	return "AuthForgotResetPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotResetPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotResetPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotResetPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotResetPostResponse_DataValidationError{}

// Validate checks the field values on AuthChangeMailAndPassPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AuthChangeMailAndPassPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthChangeMailAndPassPostResponse_Data with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AuthChangeMailAndPassPostResponse_DataMultiError, or nil if none found.
func (m *AuthChangeMailAndPassPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthChangeMailAndPassPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthChangeMailAndPassPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthChangeMailAndPassPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// AuthChangeMailAndPassPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AuthChangeMailAndPassPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthChangeMailAndPassPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthChangeMailAndPassPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthChangeMailAndPassPostResponse_DataValidationError is the validation
// error returned by AuthChangeMailAndPassPostResponse_Data.Validate if the
// designated constraints aren't met.
type AuthChangeMailAndPassPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthChangeMailAndPassPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthChangeMailAndPassPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthChangeMailAndPassPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthChangeMailAndPassPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthChangeMailAndPassPostResponse_DataValidationError) ErrorName() string {
	return "AuthChangeMailAndPassPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthChangeMailAndPassPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthChangeMailAndPassPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthChangeMailAndPassPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthChangeMailAndPassPostResponse_DataValidationError{}

// Validate checks the field values on AuthForgotPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgotPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgotPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgotPostResponse_DataMultiError, or nil if none found.
func (m *AuthForgotPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgotPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	// no validation rules for Id

	if len(errors) > 0 {
		return AuthForgotPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthForgotPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AuthForgotPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AuthForgotPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgotPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgotPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthForgotPostResponse_DataValidationError is the validation error returned
// by AuthForgotPostResponse_Data.Validate if the designated constraints
// aren't met.
type AuthForgotPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgotPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgotPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgotPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgotPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgotPostResponse_DataValidationError) ErrorName() string {
	return "AuthForgotPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgotPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgotPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgotPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgotPostResponse_DataValidationError{}

// Validate checks the field values on AuthResendOTPPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthResendOTPPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResendOTPPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthResendOTPPostResponse_DataMultiError, or nil if none found.
func (m *AuthResendOTPPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResendOTPPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	if len(errors) > 0 {
		return AuthResendOTPPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthResendOTPPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AuthResendOTPPostResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type AuthResendOTPPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResendOTPPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResendOTPPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthResendOTPPostResponse_DataValidationError is the validation error
// returned by AuthResendOTPPostResponse_Data.Validate if the designated
// constraints aren't met.
type AuthResendOTPPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResendOTPPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResendOTPPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResendOTPPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResendOTPPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResendOTPPostResponse_DataValidationError) ErrorName() string {
	return "AuthResendOTPPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthResendOTPPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResendOTPPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResendOTPPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResendOTPPostResponse_DataValidationError{}

// Validate checks the field values on AuthOTPPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOTPPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOTPPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOTPPostResponse_DataMultiError, or nil if none found.
func (m *AuthOTPPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOTPPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthOTPPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthOTPPostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AuthOTPPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AuthOTPPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOTPPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOTPPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthOTPPostResponse_DataValidationError is the validation error returned by
// AuthOTPPostResponse_Data.Validate if the designated constraints aren't met.
type AuthOTPPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOTPPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOTPPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOTPPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOTPPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOTPPostResponse_DataValidationError) ErrorName() string {
	return "AuthOTPPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOTPPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOTPPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOTPPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOTPPostResponse_DataValidationError{}

// Validate checks the field values on StatesGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatesGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatesGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatesGetResponse_DataMultiError, or nil if none found.
func (m *StatesGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StatesGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatesGetResponse_DataValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatesGetResponse_DataValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatesGetResponse_DataValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StatesGetResponse_DataMultiError(errors)
	}

	return nil
}

// StatesGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by StatesGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type StatesGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatesGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatesGetResponse_DataMultiError) AllErrors() []error { return m }

// StatesGetResponse_DataValidationError is the validation error returned by
// StatesGetResponse_Data.Validate if the designated constraints aren't met.
type StatesGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatesGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatesGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatesGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatesGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatesGetResponse_DataValidationError) ErrorName() string {
	return "StatesGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StatesGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatesGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatesGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatesGetResponse_DataValidationError{}

// Validate checks the field values on ContactGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGetResponse_DataMultiError, or nil if none found.
func (m *ContactGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContactGetResponse_DataValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContactGetResponse_DataValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactGetResponse_DataValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContactGetResponse_DataMultiError(errors)
	}

	return nil
}

// ContactGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by ContactGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ContactGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGetResponse_DataMultiError) AllErrors() []error { return m }

// ContactGetResponse_DataValidationError is the validation error returned by
// ContactGetResponse_Data.Validate if the designated constraints aren't met.
type ContactGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGetResponse_DataValidationError) ErrorName() string {
	return "ContactGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGetResponse_DataValidationError{}

// Validate checks the field values on UserPutResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPutResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPutResponse_DataMultiError, or nil if none found.
func (m *UserPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserPutResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserPutResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserPutResponse_DataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserPutResponse_DataMultiError(errors)
	}

	return nil
}

// UserPutResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPutResponse_DataMultiError) AllErrors() []error { return m }

// UserPutResponse_DataValidationError is the validation error returned by
// UserPutResponse_Data.Validate if the designated constraints aren't met.
type UserPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPutResponse_DataValidationError) ErrorName() string {
	return "UserPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPutResponse_DataValidationError{}

// Validate checks the field values on ContactPutResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactPutResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactPutResponse_DataMultiError, or nil if none found.
func (m *ContactPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContactPutResponse_DataValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContactPutResponse_DataValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactPutResponse_DataValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContactPutResponse_DataMultiError(errors)
	}

	return nil
}

// ContactPutResponse_DataMultiError is an error wrapping multiple validation
// errors returned by ContactPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ContactPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactPutResponse_DataMultiError) AllErrors() []error { return m }

// ContactPutResponse_DataValidationError is the validation error returned by
// ContactPutResponse_Data.Validate if the designated constraints aren't met.
type ContactPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactPutResponse_DataValidationError) ErrorName() string {
	return "ContactPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ContactPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactPutResponse_DataValidationError{}

// Validate checks the field values on AdminBusinessDeletePostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminBusinessDeletePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessDeletePostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminBusinessDeletePostResponse_DataMultiError, or nil if none found.
func (m *AdminBusinessDeletePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessDeletePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminBusinessDeletePostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminBusinessDeletePostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AdminBusinessDeletePostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminBusinessDeletePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessDeletePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessDeletePostResponse_DataMultiError) AllErrors() []error { return m }

// AdminBusinessDeletePostResponse_DataValidationError is the validation error
// returned by AdminBusinessDeletePostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminBusinessDeletePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessDeletePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessDeletePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessDeletePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessDeletePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessDeletePostResponse_DataValidationError) ErrorName() string {
	return "AdminBusinessDeletePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessDeletePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessDeletePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessDeletePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessDeletePostResponse_DataValidationError{}

// Validate checks the field values on AdminBusinessBanPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminBusinessBanPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessBanPostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminBusinessBanPostResponse_DataMultiError, or nil if none found.
func (m *AdminBusinessBanPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessBanPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminBusinessBanPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminBusinessBanPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AdminBusinessBanPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminBusinessBanPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessBanPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessBanPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminBusinessBanPostResponse_DataValidationError is the validation error
// returned by AdminBusinessBanPostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminBusinessBanPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessBanPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessBanPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessBanPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessBanPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessBanPostResponse_DataValidationError) ErrorName() string {
	return "AdminBusinessBanPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessBanPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessBanPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessBanPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessBanPostResponse_DataValidationError{}

// Validate checks the field values on AdminUsersGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUsersGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUsersGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUsersGetResponse_DataMultiError, or nil if none found.
func (m *AdminUsersGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUsersGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUsersGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUsersGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUsersGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUsersGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUsersGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUsersGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUsersGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdminUsersGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminUsersGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AdminUsersGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUsersGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUsersGetResponse_DataMultiError) AllErrors() []error { return m }

// AdminUsersGetResponse_DataValidationError is the validation error returned
// by AdminUsersGetResponse_Data.Validate if the designated constraints aren't met.
type AdminUsersGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUsersGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUsersGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUsersGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUsersGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUsersGetResponse_DataValidationError) ErrorName() string {
	return "AdminUsersGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUsersGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUsersGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUsersGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUsersGetResponse_DataValidationError{}

// Validate checks the field values on AdminBusinessesGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBusinessesGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBusinessesGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminBusinessesGetResponse_DataMultiError, or nil if none found.
func (m *AdminBusinessesGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBusinessesGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBusinessesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBusinessesGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBusinessesGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminBusinessesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminBusinessesGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminBusinessesGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminBusinessesGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdminBusinessesGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdminBusinessesGetResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type AdminBusinessesGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBusinessesGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBusinessesGetResponse_DataMultiError) AllErrors() []error { return m }

// AdminBusinessesGetResponse_DataValidationError is the validation error
// returned by AdminBusinessesGetResponse_Data.Validate if the designated
// constraints aren't met.
type AdminBusinessesGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBusinessesGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBusinessesGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBusinessesGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBusinessesGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBusinessesGetResponse_DataValidationError) ErrorName() string {
	return "AdminBusinessesGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBusinessesGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBusinessesGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBusinessesGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBusinessesGetResponse_DataValidationError{}

// Validate checks the field values on BusinessGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessGetResponse_DataMultiError, or nil if none found.
func (m *BusinessGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessGetResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessGetResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessGetResponse_DataValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by BusinessGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessGetResponse_DataValidationError is the validation error returned by
// BusinessGetResponse_Data.Validate if the designated constraints aren't met.
type BusinessGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessGetResponse_DataValidationError) ErrorName() string {
	return "BusinessGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessGetResponse_DataValidationError{}

// Validate checks the field values on BusinessPutResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPutResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPutResponse_DataMultiError, or nil if none found.
func (m *BusinessPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessPutResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessPutResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessPutResponse_DataValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessPutResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPutResponse_DataMultiError is an error wrapping multiple validation
// errors returned by BusinessPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPutResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPutResponse_DataValidationError is the validation error returned by
// BusinessPutResponse_Data.Validate if the designated constraints aren't met.
type BusinessPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPutResponse_DataValidationError) ErrorName() string {
	return "BusinessPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPutResponse_DataValidationError{}

// Validate checks the field values on UserGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponse_DataMultiError, or nil if none found.
func (m *UserGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponse_DataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponse_DataMultiError(errors)
	}

	return nil
}

// UserGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponse_DataMultiError) AllErrors() []error { return m }

// UserGetResponse_DataValidationError is the validation error returned by
// UserGetResponse_Data.Validate if the designated constraints aren't met.
type UserGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponse_DataValidationError) ErrorName() string {
	return "UserGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponse_DataValidationError{}

// Validate checks the field values on AuthPasswordPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthPasswordPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPasswordPostResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthPasswordPostResponse_DataMultiError, or nil if none found.
func (m *AuthPasswordPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPasswordPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthPasswordPostResponse_DataMultiError(errors)
	}

	return nil
}

// AuthPasswordPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AuthPasswordPostResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type AuthPasswordPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPasswordPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPasswordPostResponse_DataMultiError) AllErrors() []error { return m }

// AuthPasswordPostResponse_DataValidationError is the validation error
// returned by AuthPasswordPostResponse_Data.Validate if the designated
// constraints aren't met.
type AuthPasswordPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPasswordPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPasswordPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPasswordPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPasswordPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPasswordPostResponse_DataValidationError) ErrorName() string {
	return "AuthPasswordPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthPasswordPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPasswordPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPasswordPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPasswordPostResponse_DataValidationError{}

// Validate checks the field values on UserPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPostResponse_DataMultiError, or nil if none found.
func (m *UserPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	// no validation rules for Mail

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserPostResponse_DataMultiError(errors)
	}

	return nil
}

// UserPostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPostResponse_DataMultiError) AllErrors() []error { return m }

// UserPostResponse_DataValidationError is the validation error returned by
// UserPostResponse_Data.Validate if the designated constraints aren't met.
type UserPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPostResponse_DataValidationError) ErrorName() string {
	return "UserPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPostResponse_DataValidationError{}

// Validate checks the field values on BusinessPostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessPostResponse_DataMultiError, or nil if none found.
func (m *BusinessPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpId

	// no validation rules for Mail

	// no validation rules for Phone

	if len(errors) > 0 {
		return BusinessPostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessPostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by BusinessPostResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type BusinessPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessPostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessPostResponse_DataValidationError is the validation error returned by
// BusinessPostResponse_Data.Validate if the designated constraints aren't met.
type BusinessPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessPostResponse_DataValidationError) ErrorName() string {
	return "BusinessPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessPostResponse_DataValidationError{}

// Validate checks the field values on AuthCredentialResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCredentialResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCredentialResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCredentialResponse_DataMultiError, or nil if none found.
func (m *AuthCredentialResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCredentialResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for EncryptedPrivateKey

	// no validation rules for ShouldChangeMail

	// no validation rules for IsDefaultPassword

	if len(errors) > 0 {
		return AuthCredentialResponse_DataMultiError(errors)
	}

	return nil
}

// AuthCredentialResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AuthCredentialResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type AuthCredentialResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCredentialResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCredentialResponse_DataMultiError) AllErrors() []error { return m }

// AuthCredentialResponse_DataValidationError is the validation error returned
// by AuthCredentialResponse_Data.Validate if the designated constraints
// aren't met.
type AuthCredentialResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCredentialResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCredentialResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCredentialResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCredentialResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCredentialResponse_DataValidationError) ErrorName() string {
	return "AuthCredentialResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCredentialResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCredentialResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCredentialResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCredentialResponse_DataValidationError{}

// Validate checks the field values on AuthPingResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthPingResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthPingResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthPingResponse_DataMultiError, or nil if none found.
func (m *AuthPingResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthPingResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	// no validation rules for Process

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthPingResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthPingResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthPingResponse_DataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthPingResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthPingResponse_DataValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthPingResponse_DataValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthPingResponse_DataMultiError(errors)
	}

	return nil
}

// AuthPingResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AuthPingResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AuthPingResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthPingResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthPingResponse_DataMultiError) AllErrors() []error { return m }

// AuthPingResponse_DataValidationError is the validation error returned by
// AuthPingResponse_Data.Validate if the designated constraints aren't met.
type AuthPingResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthPingResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthPingResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthPingResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthPingResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthPingResponse_DataValidationError) ErrorName() string {
	return "AuthPingResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthPingResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthPingResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthPingResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthPingResponse_DataValidationError{}

// Validate checks the field values on BusinessTransactionsGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessTransactionsGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessTransactionsGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessTransactionsGetResponse_DataMultiError, or nil if none found.
func (m *BusinessTransactionsGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessTransactionsGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessTransactionsGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessTransactionsGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessTransactionsGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTransactionsGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTransactionsGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTransactionsGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalFee

	if len(errors) > 0 {
		return BusinessTransactionsGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessTransactionsGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// BusinessTransactionsGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessTransactionsGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessTransactionsGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessTransactionsGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessTransactionsGetResponse_DataValidationError is the validation error
// returned by BusinessTransactionsGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessTransactionsGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessTransactionsGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessTransactionsGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessTransactionsGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessTransactionsGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessTransactionsGetResponse_DataValidationError) ErrorName() string {
	return "BusinessTransactionsGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessTransactionsGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessTransactionsGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessTransactionsGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessTransactionsGetResponse_DataValidationError{}

// Validate checks the field values on
// AdminAdvertiseManagementPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAdvertiseManagementPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminAdvertiseManagementPostResponse_DataMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAdvertiseManagementPostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// AdminAdvertiseManagementPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPostResponse_DataMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPostResponse_DataValidationError is the validation
// error returned by AdminAdvertiseManagementPostResponse_Data.Validate if the
// designated constraints aren't met.
type AdminAdvertiseManagementPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPostResponse_DataValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPostResponse_DataValidationError{}

// Validate checks the field values on AdminAdvertiseManagementGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminAdvertiseManagementGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementGetResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminAdvertiseManagementGetResponse_DataMultiError, or nil if none found.
func (m *AdminAdvertiseManagementGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAdvertiseManagementGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAdvertiseManagementGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAdvertiseManagementGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminAdvertiseManagementGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminAdvertiseManagementGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminAdvertiseManagementGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminAdvertiseManagementGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementGetResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// AdminAdvertiseManagementGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementGetResponse_DataMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementGetResponse_DataValidationError is the validation
// error returned by AdminAdvertiseManagementGetResponse_Data.Validate if the
// designated constraints aren't met.
type AdminAdvertiseManagementGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementGetResponse_DataValidationError) ErrorName() string {
	return "AdminAdvertiseManagementGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementGetResponse_DataValidationError{}

// Validate checks the field values on AdminAdvertiseManagementPutResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminAdvertiseManagementPutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementPutResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminAdvertiseManagementPutResponse_DataMultiError, or nil if none found.
func (m *AdminAdvertiseManagementPutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementPutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAdvertiseManagementPutResponse_DataMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementPutResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// AdminAdvertiseManagementPutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AdminAdvertiseManagementPutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementPutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementPutResponse_DataMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementPutResponse_DataValidationError is the validation
// error returned by AdminAdvertiseManagementPutResponse_Data.Validate if the
// designated constraints aren't met.
type AdminAdvertiseManagementPutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementPutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAdvertiseManagementPutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAdvertiseManagementPutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementPutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementPutResponse_DataValidationError) ErrorName() string {
	return "AdminAdvertiseManagementPutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementPutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementPutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementPutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementPutResponse_DataValidationError{}

// Validate checks the field values on
// AdminAdvertiseManagementDeletePostResponse_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAdvertiseManagementDeletePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminAdvertiseManagementDeletePostResponse_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AdminAdvertiseManagementDeletePostResponse_DataMultiError, or nil if none found.
func (m *AdminAdvertiseManagementDeletePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAdvertiseManagementDeletePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAdvertiseManagementDeletePostResponse_DataMultiError(errors)
	}

	return nil
}

// AdminAdvertiseManagementDeletePostResponse_DataMultiError is an error
// wrapping multiple validation errors returned by
// AdminAdvertiseManagementDeletePostResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type AdminAdvertiseManagementDeletePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAdvertiseManagementDeletePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAdvertiseManagementDeletePostResponse_DataMultiError) AllErrors() []error { return m }

// AdminAdvertiseManagementDeletePostResponse_DataValidationError is the
// validation error returned by
// AdminAdvertiseManagementDeletePostResponse_Data.Validate if the designated
// constraints aren't met.
type AdminAdvertiseManagementDeletePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) ErrorName() string {
	return "AdminAdvertiseManagementDeletePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAdvertiseManagementDeletePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAdvertiseManagementDeletePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAdvertiseManagementDeletePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAdvertiseManagementDeletePostResponse_DataValidationError{}

// Validate checks the field values on AdvertiseGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvertiseGetResponse_DataMultiError, or nil if none found.
func (m *AdvertiseGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvertiseGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvertiseGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvertiseGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvertiseGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvertiseGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvertiseGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdvertiseGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdvertiseGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AdvertiseGetResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type AdvertiseGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseGetResponse_DataMultiError) AllErrors() []error { return m }

// AdvertiseGetResponse_DataValidationError is the validation error returned by
// AdvertiseGetResponse_Data.Validate if the designated constraints aren't met.
type AdvertiseGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseGetResponse_DataValidationError) ErrorName() string {
	return "AdvertiseGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseGetResponse_DataValidationError{}

// Validate checks the field values on BusinessAdvertiseOrderGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessAdvertiseOrderGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAdvertiseOrderGetResponse_Data with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessAdvertiseOrderGetResponse_DataMultiError, or nil if none found.
func (m *BusinessAdvertiseOrderGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAdvertiseOrderGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAdvertiseOrderGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAdvertiseOrderGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAdvertiseOrderGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessAdvertiseOrderGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessAdvertiseOrderGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessAdvertiseOrderGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessAdvertiseOrderGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessAdvertiseOrderGetResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAdvertiseOrderGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessAdvertiseOrderGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAdvertiseOrderGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAdvertiseOrderGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessAdvertiseOrderGetResponse_DataValidationError is the validation
// error returned by BusinessAdvertiseOrderGetResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessAdvertiseOrderGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) ErrorName() string {
	return "BusinessAdvertiseOrderGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAdvertiseOrderGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAdvertiseOrderGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAdvertiseOrderGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAdvertiseOrderGetResponse_DataValidationError{}

// Validate checks the field values on BusinessInvitationCodeGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessInvitationCodeGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessInvitationCodeGetResponse_Data with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BusinessInvitationCodeGetResponse_DataMultiError, or nil if none found.
func (m *BusinessInvitationCodeGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessInvitationCodeGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return BusinessInvitationCodeGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessInvitationCodeGetResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessInvitationCodeGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessInvitationCodeGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessInvitationCodeGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessInvitationCodeGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessInvitationCodeGetResponse_DataValidationError is the validation
// error returned by BusinessInvitationCodeGetResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessInvitationCodeGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessInvitationCodeGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessInvitationCodeGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessInvitationCodeGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessInvitationCodeGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessInvitationCodeGetResponse_DataValidationError) ErrorName() string {
	return "BusinessInvitationCodeGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessInvitationCodeGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessInvitationCodeGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessInvitationCodeGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessInvitationCodeGetResponse_DataValidationError{}

// Validate checks the field values on AdvertiseDetailGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvertiseDetailGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvertiseDetailGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdvertiseDetailGetResponse_DataMultiError, or nil if none found.
func (m *AdvertiseDetailGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvertiseDetailGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvertiseDetailGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvertiseDetailGetResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvertiseDetailGetResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvertiseDetailGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvertiseDetailGetResponse_DataValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvertiseDetailGetResponse_DataValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdvertiseDetailGetResponse_DataMultiError(errors)
	}

	return nil
}

// AdvertiseDetailGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by AdvertiseDetailGetResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type AdvertiseDetailGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvertiseDetailGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvertiseDetailGetResponse_DataMultiError) AllErrors() []error { return m }

// AdvertiseDetailGetResponse_DataValidationError is the validation error
// returned by AdvertiseDetailGetResponse_Data.Validate if the designated
// constraints aren't met.
type AdvertiseDetailGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvertiseDetailGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvertiseDetailGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvertiseDetailGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvertiseDetailGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvertiseDetailGetResponse_DataValidationError) ErrorName() string {
	return "AdvertiseDetailGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AdvertiseDetailGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvertiseDetailGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvertiseDetailGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvertiseDetailGetResponse_DataValidationError{}

// Validate checks the field values on BusinessFreeContactGetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessFreeContactGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFreeContactGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessFreeContactGetResponse_DataMultiError, or nil if none found.
func (m *BusinessFreeContactGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFreeContactGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return BusinessFreeContactGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessFreeContactGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// BusinessFreeContactGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessFreeContactGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFreeContactGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFreeContactGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessFreeContactGetResponse_DataValidationError is the validation error
// returned by BusinessFreeContactGetResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessFreeContactGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFreeContactGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFreeContactGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFreeContactGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFreeContactGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFreeContactGetResponse_DataValidationError) ErrorName() string {
	return "BusinessFreeContactGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessFreeContactGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFreeContactGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFreeContactGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFreeContactGetResponse_DataValidationError{}

// Validate checks the field values on
// BusinessBuyAdvertiseSetupPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessBuyAdvertiseSetupPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessBuyAdvertiseSetupPostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessBuyAdvertiseSetupPostResponse_DataMultiError, or nil if none found.
func (m *BusinessBuyAdvertiseSetupPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertiseSetupPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BusinessBuyAdvertiseSetupPostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertiseSetupPostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessBuyAdvertiseSetupPostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessBuyAdvertiseSetupPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertiseSetupPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertiseSetupPostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertiseSetupPostResponse_DataValidationError is the validation
// error returned by BusinessBuyAdvertiseSetupPostResponse_Data.Validate if
// the designated constraints aren't met.
type BusinessBuyAdvertiseSetupPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) ErrorName() string {
	return "BusinessBuyAdvertiseSetupPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertiseSetupPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertiseSetupPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertiseSetupPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertiseSetupPostResponse_DataValidationError{}

// Validate checks the field values on BusinessBuyAdvertisePostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessBuyAdvertisePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessBuyAdvertisePostResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessBuyAdvertisePostResponse_DataMultiError, or nil if none found.
func (m *BusinessBuyAdvertisePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessBuyAdvertisePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessBuyAdvertisePostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessBuyAdvertisePostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessBuyAdvertisePostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessBuyAdvertisePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessBuyAdvertisePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessBuyAdvertisePostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessBuyAdvertisePostResponse_DataValidationError is the validation error
// returned by BusinessBuyAdvertisePostResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessBuyAdvertisePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessBuyAdvertisePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessBuyAdvertisePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessBuyAdvertisePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessBuyAdvertisePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessBuyAdvertisePostResponse_DataValidationError) ErrorName() string {
	return "BusinessBuyAdvertisePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessBuyAdvertisePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessBuyAdvertisePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessBuyAdvertisePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessBuyAdvertisePostResponse_DataValidationError{}

// Validate checks the field values on BusinessVerifyRefCodePutResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessVerifyRefCodePutResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessVerifyRefCodePutResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessVerifyRefCodePutResponse_DataMultiError, or nil if none found.
func (m *BusinessVerifyRefCodePutResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessVerifyRefCodePutResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessVerifyRefCodePutResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessVerifyRefCodePutResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessVerifyRefCodePutResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessVerifyRefCodePutResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessVerifyRefCodePutResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessVerifyRefCodePutResponse_DataMultiError) AllErrors() []error { return m }

// BusinessVerifyRefCodePutResponse_DataValidationError is the validation error
// returned by BusinessVerifyRefCodePutResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessVerifyRefCodePutResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessVerifyRefCodePutResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessVerifyRefCodePutResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessVerifyRefCodePutResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessVerifyRefCodePutResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessVerifyRefCodePutResponse_DataValidationError) ErrorName() string {
	return "BusinessVerifyRefCodePutResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessVerifyRefCodePutResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessVerifyRefCodePutResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessVerifyRefCodePutResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessVerifyRefCodePutResponse_DataValidationError{}

// Validate checks the field values on
// BusinessValidateBuyAdvertisePostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessValidateBuyAdvertisePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessValidateBuyAdvertisePostResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessValidateBuyAdvertisePostResponse_DataMultiError, or nil if none found.
func (m *BusinessValidateBuyAdvertisePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessValidateBuyAdvertisePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessValidateBuyAdvertisePostResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessValidateBuyAdvertisePostResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessValidateBuyAdvertisePostResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type BusinessValidateBuyAdvertisePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessValidateBuyAdvertisePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessValidateBuyAdvertisePostResponse_DataMultiError) AllErrors() []error { return m }

// BusinessValidateBuyAdvertisePostResponse_DataValidationError is the
// validation error returned by
// BusinessValidateBuyAdvertisePostResponse_Data.Validate if the designated
// constraints aren't met.
type BusinessValidateBuyAdvertisePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) ErrorName() string {
	return "BusinessValidateBuyAdvertisePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessValidateBuyAdvertisePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessValidateBuyAdvertisePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidateBuyAdvertisePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidateBuyAdvertisePostResponse_DataValidationError{}

// Validate checks the field values on UserStateGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserStateGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStateGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStateGetResponse_DataMultiError, or nil if none found.
func (m *UserStateGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStateGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserStateGetResponse_DataMultiError(errors)
	}

	return nil
}

// UserStateGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserStateGetResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type UserStateGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStateGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStateGetResponse_DataMultiError) AllErrors() []error { return m }

// UserStateGetResponse_DataValidationError is the validation error returned by
// UserStateGetResponse_Data.Validate if the designated constraints aren't met.
type UserStateGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStateGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStateGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStateGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStateGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStateGetResponse_DataValidationError) ErrorName() string {
	return "UserStateGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserStateGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStateGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStateGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStateGetResponse_DataValidationError{}

// Validate checks the field values on StatisticGetResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticGetResponse_DataMultiError, or nil if none found.
func (m *StatisticGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceQuantity

	// no validation rules for BusinessQuantity

	// no validation rules for CustomerQuantity

	// no validation rules for CityQuantity

	if len(errors) > 0 {
		return StatisticGetResponse_DataMultiError(errors)
	}

	return nil
}

// StatisticGetResponse_DataMultiError is an error wrapping multiple validation
// errors returned by StatisticGetResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type StatisticGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticGetResponse_DataMultiError) AllErrors() []error { return m }

// StatisticGetResponse_DataValidationError is the validation error returned by
// StatisticGetResponse_Data.Validate if the designated constraints aren't met.
type StatisticGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticGetResponse_DataValidationError) ErrorName() string {
	return "StatisticGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticGetResponse_DataValidationError{}

// Validate checks the field values on ValidateMailGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateMailGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateMailGetResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateMailGetResponse_DataMultiError, or nil if none found.
func (m *ValidateMailGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateMailGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValidate

	if len(errors) > 0 {
		return ValidateMailGetResponse_DataMultiError(errors)
	}

	return nil
}

// ValidateMailGetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ValidateMailGetResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type ValidateMailGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateMailGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateMailGetResponse_DataMultiError) AllErrors() []error { return m }

// ValidateMailGetResponse_DataValidationError is the validation error returned
// by ValidateMailGetResponse_Data.Validate if the designated constraints
// aren't met.
type ValidateMailGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateMailGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateMailGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateMailGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateMailGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateMailGetResponse_DataValidationError) ErrorName() string {
	return "ValidateMailGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateMailGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateMailGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateMailGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateMailGetResponse_DataValidationError{}

// Validate checks the field values on BusinessesAlreadyOrderedGetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessesAlreadyOrderedGetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessesAlreadyOrderedGetResponse_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessesAlreadyOrderedGetResponse_DataMultiError, or nil if none found.
func (m *BusinessesAlreadyOrderedGetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesAlreadyOrderedGetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessesAlreadyOrderedGetResponse_DataMultiError(errors)
	}

	return nil
}

// BusinessesAlreadyOrderedGetResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// BusinessesAlreadyOrderedGetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BusinessesAlreadyOrderedGetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesAlreadyOrderedGetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesAlreadyOrderedGetResponse_DataMultiError) AllErrors() []error { return m }

// BusinessesAlreadyOrderedGetResponse_DataValidationError is the validation
// error returned by BusinessesAlreadyOrderedGetResponse_Data.Validate if the
// designated constraints aren't met.
type BusinessesAlreadyOrderedGetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) ErrorName() string {
	return "BusinessesAlreadyOrderedGetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessesAlreadyOrderedGetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesAlreadyOrderedGetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesAlreadyOrderedGetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesAlreadyOrderedGetResponse_DataValidationError{}
