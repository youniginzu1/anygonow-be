// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aqaurius6666/apiservice/src/internal/api"
	"github.com/aqaurius6666/apiservice/src/internal/api/middleware"
	"github.com/aqaurius6666/apiservice/src/internal/db"
	"github.com/aqaurius6666/apiservice/src/internal/db/cockroach"
	"github.com/aqaurius6666/apiservice/src/internal/model"
	"github.com/aqaurius6666/apiservice/src/services/authservice"
	"github.com/aqaurius6666/apiservice/src/services/chatservice"
	"github.com/aqaurius6666/apiservice/src/services/mailservice"
	"github.com/aqaurius6666/apiservice/src/services/payment"
	"github.com/aqaurius6666/apiservice/src/services/s3"
	cockroach2 "github.com/aqaurius6666/go-utils/database/cockroach"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

// Injectors from server.wire.go:

func InitMainServer(ctx context.Context, logger2 *logrus.Logger, opts ServerOptions) (*Server, error) {
	engine := gin.New()
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := cockroach.InterfacesProvider()
	cdbRepository := cockroach2.CDBRepository{
		Db:         gormDB,
		Logger:     logger2,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	serverCDBRepo := &cockroach.ServerCDBRepo{
		CDBRepository: cdbRepository,
	}
	authServiceAddr := opts.AuthserviceAddr
	authServiceClient, err := authservice.ConnectClient(ctx, authServiceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := authservice.ServiceGRPC{
		Ctx:    ctx,
		Client: authServiceClient,
	}
	bucketName := opts.Bucket
	v2, err := s3.NewV2(ctx, bucketName)
	if err != nil {
		return nil, err
	}
	stripe_API_KEY := opts.Key
	stripe, err := payment.NewStripe(ctx, logger2, stripe_API_KEY)
	if err != nil {
		return nil, err
	}
	chatserviceAddr := opts.ChatserviceAddr
	chatServiceClient, err := chatservice.ConnectClient(ctx, chatserviceAddr)
	if err != nil {
		return nil, err
	}
	chatserviceServiceGRPC := &chatservice.ServiceGRPC{
		Ctx:    ctx,
		Client: chatServiceClient,
	}
	mailserviceAddr := opts.MailserviceAddr
	mailServiceClient, err := mailservice.ConnectClient(ctx, mailserviceAddr)
	if err != nil {
		return nil, err
	}
	mailserviceServiceGRPC := &mailservice.ServiceGRPC{
		Ctx:    ctx,
		Client: mailServiceClient,
	}
	serverModel := &model.ServerModel{
		Ctx:     ctx,
		Logger:  logger2,
		Repo:    serverCDBRepo,
		Auth:    serviceGRPC,
		S3:      v2,
		Payment: stripe,
		Chat:    chatserviceServiceGRPC,
		Mail:    mailserviceServiceGRPC,
	}
	indexService := api.IndexService{
		Model:  serverModel,
		Logger: logger2,
	}
	stripe_SIGNATURE_KEY := opts.SignKey
	indexController := api.IndexController{
		S:       indexService,
		SignKey: stripe_SIGNATURE_KEY,
	}
	businessService := api.BusinessService{
		Model: serverModel,
	}
	businessController := api.BusinessController{
		S: businessService,
	}
	contactService := api.ContactService{
		Model: serverModel,
	}
	contactController := api.ContactController{
		S: contactService,
	}
	authService := api.AuthService{
		Model: serverModel,
	}
	authController := api.AuthController{
		S: authService,
	}
	adminService := api.AdminService{
		Model: serverModel,
	}
	adminController := api.AdminController{
		S: adminService,
	}
	categoryService := api.CategoryService{
		Model: serverModel,
	}
	categoryController := api.CategoryController{
		S: categoryService,
	}
	middlewareV1 := &middleware.MiddlewareV1{
		Logger: logger2,
		Auth:   serviceGRPC,
	}
	userService := api.UserService{
		Model: serverModel,
	}
	userController := api.UserController{
		S: userService,
	}
	orderService := api.OrderService{
		Model:  serverModel,
		Logger: logger2,
	}
	orderController := api.OrderController{
		S: orderService,
	}
	feedbackService := api.FeedbackService{
		Model: serverModel,
	}
	feedbackController := api.FeedbackController{
		S: feedbackService,
	}
	chatService := api.ChatService{
		Model: serverModel,
	}
	chatController := api.ChatController{
		S: chatService,
	}
	apiServer := &api.ApiServer{
		G:          engine,
		Logger:     logger2,
		ServerRepo: serverCDBRepo,
		Index:      indexController,
		Business:   businessController,
		Contact:    contactController,
		Auth:       authController,
		Admin:      adminController,
		Category:   categoryController,
		Mid:        middlewareV1,
		Users:      userController,
		Order:      orderController,
		Feedback:   feedbackController,
		Chat:       chatController,
	}
	server := &Server{
		ApiServer: apiServer,
		MainRepo:  serverCDBRepo,
	}
	return server, nil
}

// server.wire.go:

type Server struct {
	ApiServer *api.ApiServer
	MainRepo  db.ServerRepo
}

type ServerOptions struct {
	DBDsn           db.DBDsn
	ChatserviceAddr chatservice.ChatserviceAddr
	AuthserviceAddr authservice.AuthServiceAddr
	MailserviceAddr mailservice.MailserviceAddr
	Bucket          s3.BucketName
	Key             payment.STRIPE_API_KEY
	SignKey         api.STRIPE_SIGNATURE_KEY
}
