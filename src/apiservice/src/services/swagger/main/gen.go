package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
)

func main() {
	s := os.Args[1:]
	for _, name := range s {
		handle(name)
	}
}

func handle(name string) {
	json_path := fmt.Sprintf("%s.swagger.json", name)
	go_path := fmt.Sprintf("%s.swagger.go", name)
	deleteFile(go_path)
	createFile(go_path)
	writeFile(name, go_path, json_path)
}
func deleteFile(path string) {
	// delete file
	var err = os.Remove(path)
	if err != nil {
		return
	}
	fmt.Println("File Deleted")
}
func createFile(path string) {
	// check if file exists
	var _, err = os.Stat(path)

	// create file if not exists
	if os.IsNotExist(err) {
		var file, err = os.Create(path)
		if err != nil {
			return
		}
		defer file.Close()
	}

	fmt.Println("File Created Successfully", path)
}
func writeFile(name, path, from string) {
	// Open file using READ & WRITE permission.
	var file, err = os.OpenFile(path, os.O_RDWR, 0644)
	if err != nil {
		return
	}
	defer file.Close()

	// Write some text line-by-line to file.
	b, err := ioutil.ReadFile(from)
	if err != nil {
		return
	}
	temp := template.New(name)
	temp, err = temp.Parse(TEMPLATE)
	if err != nil {
		log.Println(err)
	}
	temp.Execute(file, map[string]string{
		"VAR_NAME":  fmt.Sprintf("%s_JSON", strings.ToUpper(name)),
		"JSON_STR":  string(b),
		"BACK_TICK": "`",
	})
	// Save file changes.
	err = file.Sync()
	if err != nil {
		return
	}

	fmt.Println("File Updated Successfully.")
}

var TEMPLATE = `// Code generated by swagger.main.go. DO NOT EDIT.
package swagger

var {{.VAR_NAME}} = {{.BACK_TICK}}{{.JSON_STR}}{{.BACK_TICK}}
`
