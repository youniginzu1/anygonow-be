// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: authservice.proto

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	ChangeMail(ctx context.Context, in *ChangeMailRequest, opts ...grpc.CallOption) (*ChangeMailResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	ResendOTP(ctx context.Context, in *ResendOTPRequest, opts ...grpc.CallOption) (*ResendOTPResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterOTP(ctx context.Context, in *RegisterOTPRequest, opts ...grpc.CallOption) (*RegisterOTPResponse, error)
	ChangeMailAndPass(ctx context.Context, in *ChangeMailAndPassRequest, opts ...grpc.CallOption) (*ChangeMailAndPassResponse, error)
	ChangeMailAndPassOTP(ctx context.Context, in *ChangeMailAndPassOTPRequest, opts ...grpc.CallOption) (*ChangeMailAndPassOTPResponse, error)
	RegisterNoOTP(ctx context.Context, in *RegisterNoOTPRequest, opts ...grpc.CallOption) (*RegisterNoOTPResponse, error)
	ChangeMailOTP(ctx context.Context, in *ChangeMailOTPRequest, opts ...grpc.CallOption) (*ChangeMailOTPResponse, error)
	ForgotPasswordOTP(ctx context.Context, in *ForgotPasswordOTPRequest, opts ...grpc.CallOption) (*ForgotPasswordOTPResponse, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error)
	CheckCredential(ctx context.Context, in *CheckCredentialRequest, opts ...grpc.CallOption) (*CheckCredentialResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error) {
	out := new(CheckAuthResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/CheckAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeMail(ctx context.Context, in *ChangeMailRequest, opts ...grpc.CallOption) (*ChangeMailResponse, error) {
	out := new(ChangeMailResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ChangeMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/VerifyOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendOTP(ctx context.Context, in *ResendOTPRequest, opts ...grpc.CallOption) (*ResendOTPResponse, error) {
	out := new(ResendOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ResendOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterOTP(ctx context.Context, in *RegisterOTPRequest, opts ...grpc.CallOption) (*RegisterOTPResponse, error) {
	out := new(RegisterOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/RegisterOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeMailAndPass(ctx context.Context, in *ChangeMailAndPassRequest, opts ...grpc.CallOption) (*ChangeMailAndPassResponse, error) {
	out := new(ChangeMailAndPassResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ChangeMailAndPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeMailAndPassOTP(ctx context.Context, in *ChangeMailAndPassOTPRequest, opts ...grpc.CallOption) (*ChangeMailAndPassOTPResponse, error) {
	out := new(ChangeMailAndPassOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ChangeMailAndPassOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterNoOTP(ctx context.Context, in *RegisterNoOTPRequest, opts ...grpc.CallOption) (*RegisterNoOTPResponse, error) {
	out := new(RegisterNoOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/RegisterNoOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeMailOTP(ctx context.Context, in *ChangeMailOTPRequest, opts ...grpc.CallOption) (*ChangeMailOTPResponse, error) {
	out := new(ChangeMailOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ChangeMailOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ForgotPasswordOTP(ctx context.Context, in *ForgotPasswordOTPRequest, opts ...grpc.CallOption) (*ForgotPasswordOTPResponse, error) {
	out := new(ForgotPasswordOTPResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ForgotPasswordOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error) {
	out := new(ForgotPasswordResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CheckCredential(ctx context.Context, in *CheckCredentialRequest, opts ...grpc.CallOption) (*CheckCredentialResponse, error) {
	out := new(CheckCredentialResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/CheckCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/authservice.AuthService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	ChangeMail(context.Context, *ChangeMailRequest) (*ChangeMailResponse, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error)
	ResendOTP(context.Context, *ResendOTPRequest) (*ResendOTPResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RegisterOTP(context.Context, *RegisterOTPRequest) (*RegisterOTPResponse, error)
	ChangeMailAndPass(context.Context, *ChangeMailAndPassRequest) (*ChangeMailAndPassResponse, error)
	ChangeMailAndPassOTP(context.Context, *ChangeMailAndPassOTPRequest) (*ChangeMailAndPassOTPResponse, error)
	RegisterNoOTP(context.Context, *RegisterNoOTPRequest) (*RegisterNoOTPResponse, error)
	ChangeMailOTP(context.Context, *ChangeMailOTPRequest) (*ChangeMailOTPResponse, error)
	ForgotPasswordOTP(context.Context, *ForgotPasswordOTPRequest) (*ForgotPasswordOTPResponse, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error)
	CheckCredential(context.Context, *CheckCredentialRequest) (*CheckCredentialResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedAuthServiceServer) CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) ChangeMail(context.Context, *ChangeMailRequest) (*ChangeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMail not implemented")
}
func (UnimplementedAuthServiceServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedAuthServiceServer) VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedAuthServiceServer) ResendOTP(context.Context, *ResendOTPRequest) (*ResendOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOTP not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) RegisterOTP(context.Context, *RegisterOTPRequest) (*RegisterOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOTP not implemented")
}
func (UnimplementedAuthServiceServer) ChangeMailAndPass(context.Context, *ChangeMailAndPassRequest) (*ChangeMailAndPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMailAndPass not implemented")
}
func (UnimplementedAuthServiceServer) ChangeMailAndPassOTP(context.Context, *ChangeMailAndPassOTPRequest) (*ChangeMailAndPassOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMailAndPassOTP not implemented")
}
func (UnimplementedAuthServiceServer) RegisterNoOTP(context.Context, *RegisterNoOTPRequest) (*RegisterNoOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNoOTP not implemented")
}
func (UnimplementedAuthServiceServer) ChangeMailOTP(context.Context, *ChangeMailOTPRequest) (*ChangeMailOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMailOTP not implemented")
}
func (UnimplementedAuthServiceServer) ForgotPasswordOTP(context.Context, *ForgotPasswordOTPRequest) (*ForgotPasswordOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPasswordOTP not implemented")
}
func (UnimplementedAuthServiceServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) CheckCredential(context.Context, *CheckCredentialRequest) (*CheckCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCredential not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/CheckAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ChangeMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeMail(ctx, req.(*ChangeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/VerifyOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyOTP(ctx, req.(*VerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ResendOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendOTP(ctx, req.(*ResendOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/RegisterOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterOTP(ctx, req.(*RegisterOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeMailAndPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMailAndPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeMailAndPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ChangeMailAndPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeMailAndPass(ctx, req.(*ChangeMailAndPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeMailAndPassOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMailAndPassOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeMailAndPassOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ChangeMailAndPassOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeMailAndPassOTP(ctx, req.(*ChangeMailAndPassOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterNoOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNoOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterNoOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/RegisterNoOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterNoOTP(ctx, req.(*RegisterNoOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeMailOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMailOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeMailOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ChangeMailOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeMailOTP(ctx, req.(*ChangeMailOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ForgotPasswordOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ForgotPasswordOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ForgotPasswordOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ForgotPasswordOTP(ctx, req.(*ForgotPasswordOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CheckCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CheckCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/CheckCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CheckCredential(ctx, req.(*CheckCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.AuthService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authservice.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredential",
			Handler:    _AuthService_GetCredential_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _AuthService_CheckAuth_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeMail",
			Handler:    _AuthService_ChangeMail_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _AuthService_BanUser_Handler,
		},
		{
			MethodName: "VerifyOTP",
			Handler:    _AuthService_VerifyOTP_Handler,
		},
		{
			MethodName: "ResendOTP",
			Handler:    _AuthService_ResendOTP_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "RegisterOTP",
			Handler:    _AuthService_RegisterOTP_Handler,
		},
		{
			MethodName: "ChangeMailAndPass",
			Handler:    _AuthService_ChangeMailAndPass_Handler,
		},
		{
			MethodName: "ChangeMailAndPassOTP",
			Handler:    _AuthService_ChangeMailAndPassOTP_Handler,
		},
		{
			MethodName: "RegisterNoOTP",
			Handler:    _AuthService_RegisterNoOTP_Handler,
		},
		{
			MethodName: "ChangeMailOTP",
			Handler:    _AuthService_ChangeMailOTP_Handler,
		},
		{
			MethodName: "ForgotPasswordOTP",
			Handler:    _AuthService_ForgotPasswordOTP_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _AuthService_ForgotPassword_Handler,
		},
		{
			MethodName: "CheckCredential",
			Handler:    _AuthService_CheckCredential_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authservice.proto",
}
