// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package model

import (
	"context"
	"github.com/aqaurius6666/authservice/src/internal/db"
	"github.com/aqaurius6666/authservice/src/internal/db/cockroach"
	"github.com/aqaurius6666/authservice/src/services/mailservice"
	cockroach2 "github.com/aqaurius6666/go-utils/database/cockroach"
	"github.com/sirupsen/logrus"
)

// Injectors from model.wire.go:

func ModelMock(ctx context.Context, logger *logrus.Logger, opts ModelMockOptions) (Server, error) {
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := cockroach.InterfacesProvider()
	cdbRepository := cockroach2.CDBRepository{
		Db:         gormDB,
		Logger:     logger,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	serverCDBRepo := &cockroach.ServerCDBRepo{
		CDBRepository: cdbRepository,
	}
	mailServiceAddr := opts.MailAddr
	mailServiceClient, err := mailservice.ConnectClient(ctx, mailServiceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := mailservice.ServiceGRPC{
		Ctx:    ctx,
		Client: mailServiceClient,
	}
	serverModel := &ServerModel{
		Ctx:    ctx,
		Logger: logger,
		Repo:   serverCDBRepo,
		Mail:   serviceGRPC,
	}
	return serverModel, nil
}

// model.wire.go:

type ModelMockOptions struct {
	DBDsn    db.DBDsn
	MailAddr mailservice.MailServiceAddr
}
