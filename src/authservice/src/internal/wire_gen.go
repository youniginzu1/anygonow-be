// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aqaurius6666/authservice/src/internal/api"
	"github.com/aqaurius6666/authservice/src/internal/db"
	"github.com/aqaurius6666/authservice/src/internal/db/cockroach"
	"github.com/aqaurius6666/authservice/src/internal/model"
	"github.com/aqaurius6666/authservice/src/services/mailservice"
	cockroach2 "github.com/aqaurius6666/go-utils/database/cockroach"
	"github.com/sirupsen/logrus"
)

// Injectors from server.wire.go:

func InitMainServer(ctx context.Context, logger2 *logrus.Logger, opts ServerOptions) (*Server, error) {
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := cockroach.InterfacesProvider()
	cdbRepository := cockroach2.CDBRepository{
		Db:         gormDB,
		Logger:     logger2,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	serverCDBRepo := &cockroach.ServerCDBRepo{
		CDBRepository: cdbRepository,
	}
	mailServiceAddr := opts.MailAddr
	mailServiceClient, err := mailservice.ConnectClient(ctx, mailServiceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := mailservice.ServiceGRPC{
		Ctx:    ctx,
		Client: mailServiceClient,
	}
	serverModel := &model.ServerModel{
		Ctx:    ctx,
		Logger: logger2,
		Repo:   serverCDBRepo,
		Mail:   serviceGRPC,
	}
	apiServer := &api.ApiServer{
		Model:  serverModel,
		Logger: logger2,
		Repo:   serverCDBRepo,
	}
	server := &Server{
		ApiServer: apiServer,
		MainRepo:  serverCDBRepo,
	}
	return server, nil
}

// server.wire.go:

type Server struct {
	ApiServer *api.ApiServer
	MainRepo  db.ServerRepo
}

type ServerOptions struct {
	DBDsn    db.DBDsn
	MailAddr mailservice.MailServiceAddr
}
