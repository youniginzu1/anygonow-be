// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aqaurius6666/chatservice/src/internal/api"
	"github.com/aqaurius6666/chatservice/src/internal/api/middleware"
	"github.com/aqaurius6666/chatservice/src/internal/db"
	"github.com/aqaurius6666/chatservice/src/internal/db/cockroach"
	"github.com/aqaurius6666/chatservice/src/internal/model"
	"github.com/aqaurius6666/chatservice/src/services/authservice"
	"github.com/aqaurius6666/chatservice/src/services/mailservice"
	"github.com/aqaurius6666/chatservice/src/services/redis"
	"github.com/aqaurius6666/chatservice/src/services/twilloclient"
	cockroach2 "github.com/aqaurius6666/go-utils/database/cockroach"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

// Injectors from server.wire.go:

func InitMainServer(ctx context.Context, logger2 *logrus.Logger, opts ServerOptions) (*Server, error) {
	engine := gin.New()
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := cockroach.InterfacesProvider()
	cdbRepository := cockroach2.CDBRepository{
		Db:         gormDB,
		Logger:     logger2,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	serverCDBRepo := &cockroach.ServerCDBRepo{
		CDBRepository: cdbRepository,
	}
	restClient := twilloclient.NewRestClient()
	twillo_SMS_CALLBACK_URL := opts.TwilloCallbackUrl
	requestValidator := twilloclient.NewValidator()
	twilloClient := &twilloclient.TwilloClient{
		Logger:      logger2,
		Client:      restClient,
		CallbackUrl: twillo_SMS_CALLBACK_URL,
		Validator:   requestValidator,
	}
	redis_URI := opts.RedisUri
	redis_USER := opts.RedisUser
	redis_PASS := opts.RedisPass
	client, err := redis.NewRedisClient(ctx, redis_URI, redis_USER, redis_PASS)
	if err != nil {
		return nil, err
	}
	redisImpl := &redis.RedisImpl{
		Logger: logger2,
		Client: client,
	}
	mailserviceAddr := opts.MailserviceAddr
	mailServiceClient, err := mailservice.ConnectClient(ctx, mailserviceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := &mailservice.ServiceGRPC{
		Ctx:    ctx,
		Client: mailServiceClient,
	}
	serverModel := &model.ServerModel{
		Ctx:    ctx,
		Logger: logger2,
		Repo:   serverCDBRepo,
		Twillo: twilloClient,
		Redis:  redisImpl,
		Mail:   serviceGRPC,
	}
	httpService := &api.HTTPService{
		Model:  serverModel,
		Logger: logger2,
	}
	httpController := &api.HTTPController{
		Logger: logger2,
		S:      httpService,
		Twillo: twilloClient,
	}
	authserviceAddr := opts.AuthserviceAddr
	authServiceClient, err := authservice.ConnectClient(ctx, authserviceAddr)
	if err != nil {
		return nil, err
	}
	authserviceServiceGRPC := authservice.ServiceGRPC{
		Ctx:    ctx,
		Client: authServiceClient,
	}
	middlewareV1 := &middleware.MiddlewareV1{
		Logger: logger2,
		Auth:   authserviceServiceGRPC,
	}
	indexController := &api.IndexController{}
	apiServer := &api.ApiServer{
		G:           engine,
		Logger:      logger2,
		Model:       serverModel,
		Repo:        serverCDBRepo,
		HTTP:        httpController,
		Mid:         middlewareV1,
		Index:       indexController,
		HTTPService: httpService,
	}
	server := &Server{
		ApiServer: apiServer,
		MainRepo:  serverCDBRepo,
	}
	return server, nil
}

// server.wire.go:

type Server struct {
	ApiServer *api.ApiServer
	MainRepo  db.ServerRepo
}

type ServerOptions struct {
	DBDsn             db.DBDsn
	AuthserviceAddr   authservice.AuthserviceAddr
	MailserviceAddr   mailservice.MailserviceAddr
	RedisUri          redis.REDIS_URI
	RedisUser         redis.REDIS_USER
	RedisPass         redis.REDIS_PASS
	TwilloCallbackUrl twilloclient.TWILLO_SMS_CALLBACK_URL
}
